{"version":3,"sources":["../../../../src/node_modules/ast-types/def/es-proposals.js"],"names":["module","exports","fork","use","require","types","Type","def","or","shared","defaults","bases","build","field","Boolean","LogicalOperator"],"mappings":";;AAAAA,OAAOC,OAAP,GAAiB,UAAUC,IAAV,EAAgB;AAC/BA,OAAKC,GAAL,CAASC,QAAQ,QAAR,CAAT;;AAEA,MAAIC,QAAQH,KAAKC,GAAL,CAASC,QAAQ,cAAR,CAAT,CAAZ;AACA,MAAIE,OAAOD,MAAMC,IAAjB;AACA,MAAIC,MAAMF,MAAMC,IAAN,CAAWC,GAArB;AACA,MAAIC,KAAKF,KAAKE,EAAd;;AAEA,MAAIC,SAASP,KAAKC,GAAL,CAASC,QAAQ,eAAR,CAAT,CAAb;AACA,MAAIM,WAAWD,OAAOC,QAAtB;;AAGA;AACA;AACAH,MAAI,0BAAJ,EACGI,KADH,CACS,kBADT,EAEGC,KAFH,CAES,QAFT,EAEmB,UAFnB,EAE+B,UAF/B,EAE2C,UAF3C,EAGGC,KAHH,CAGS,UAHT,EAGqBC,OAHrB,EAG8BJ,SAAS,MAAT,CAH9B;;AAKA;AACAH,MAAI,wBAAJ,EACGI,KADH,CACS,gBADT,EAEGC,KAFH,CAES,QAFT,EAEmB,WAFnB,EAEgC,UAFhC,EAGGC,KAHH,CAGS,UAHT,EAGqBC,OAHrB,EAG8BJ,SAAS,MAAT,CAH9B;;AAMA;AACA;AACA,MAAIK,kBAAkBP,GAAG,IAAH,EAAS,IAAT,EAAe,IAAf,CAAtB;;AAEAD,MAAI,mBAAJ,EACGM,KADH,CACS,UADT,EACqBE,eADrB;AAED,CAhCD","file":"es-proposals.js","sourcesContent":["module.exports = function (fork) {\n  fork.use(require('./core'));\n\n  var types = fork.use(require(\"../lib/types\"));\n  var Type = types.Type;\n  var def = types.Type.def;\n  var or = Type.or;\n\n  var shared = fork.use(require(\"../lib/shared\"));\n  var defaults = shared.defaults;\n\n\n  // https://github.com/tc39/proposal-optional-chaining\n  // `a?.b` as per https://github.com/estree/estree/issues/146\n  def(\"OptionalMemberExpression\")\n    .bases(\"MemberExpression\")\n    .build(\"object\", \"property\", \"computed\", \"optional\")\n    .field(\"optional\", Boolean, defaults[\"true\"])\n\n  // a?.b()\n  def(\"OptionalCallExpression\")\n    .bases(\"CallExpression\")\n    .build(\"callee\", \"arguments\", \"optional\")\n    .field(\"optional\", Boolean, defaults[\"true\"])\n\n\n  // https://github.com/tc39/proposal-nullish-coalescing\n  // `a ?? b` as per https://github.com/babel/babylon/pull/761/files\n  var LogicalOperator = or(\"||\", \"&&\", \"??\");\n\n  def(\"LogicalExpression\")\n    .field(\"operator\", LogicalOperator)\n};\n"]}