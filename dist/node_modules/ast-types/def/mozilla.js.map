{"version":3,"sources":["../../../../src/node_modules/ast-types/def/mozilla.js"],"names":["module","exports","fork","use","require","types","def","Type","or","shared","geq","defaults","field","build","Boolean","bases"],"mappings":";;AAAAA,OAAOC,OAAP,GAAiB,UAAUC,IAAV,EAAgB;AAC7BA,SAAKC,GAAL,CAASC,QAAQ,QAAR,CAAT;AACA,QAAIC,QAAQH,KAAKC,GAAL,CAASC,QAAQ,cAAR,CAAT,CAAZ;AACA,QAAIE,MAAMD,MAAME,IAAN,CAAWD,GAArB;AACA,QAAIE,KAAKH,MAAME,IAAN,CAAWC,EAApB;AACA,QAAIC,SAASP,KAAKC,GAAL,CAASC,QAAQ,eAAR,CAAT,CAAb;AACA,QAAIM,MAAMD,OAAOC,GAAjB;AACA,QAAIC,WAAWF,OAAOE,QAAtB;;AAEAL,QAAI,UAAJ;AACI;AADJ,KAEKM,KAFL,CAEW,MAFX,EAEmBJ,GAAGF,IAAI,gBAAJ,CAAH,EAA0BA,IAAI,YAAJ,CAA1B,CAFnB;;AAIAA,QAAI,gBAAJ,EACKO,KADL,CACW,MADX,EACmB,OADnB,EAC4B,MAD5B,EACoC,MADpC,EAEKD,KAFL,CAEW,MAFX,EAEmBE,OAFnB,EAE4BH,SAAS,OAAT,CAF5B;;AAIAL,QAAI,cAAJ,EACKS,KADL,CACW,WADX,EAEKF,KAFL,CAEW,MAFX,EAEmB,MAFnB;AAGI;AAHJ,KAIKD,KAJL,CAIW,MAJX,EAImB,CAACN,IAAI,oBAAJ,CAAD,CAJnB,EAKKM,KALL,CAKW,MALX,EAKmBN,IAAI,WAAJ,CALnB;;AAOAA,QAAI,eAAJ,EACKS,KADL,CACW,YADX,EAEKF,KAFL,CAEW,MAFX,EAEmB,MAFnB;AAGI;AAHJ,KAIKD,KAJL,CAIW,MAJX,EAImB,CAACN,IAAI,oBAAJ,CAAD,CAJnB,EAKKM,KALL,CAKW,MALX,EAKmBN,IAAI,YAAJ,CALnB;;AAOAA,QAAI,iBAAJ,EACKS,KADL,CACW,YADX,EAEKF,KAFL,CAEW,OAFX,EAEoB,YAFpB,EAGKD,KAHL,CAGW,OAHX,EAGoBF,IAAI,CAAJ,CAHpB,EAIKE,KAJL,CAIW,YAJX,EAIyBN,IAAI,SAAJ,CAJzB;;AAMAA,QAAI,sBAAJ,EACKS,KADL,CACW,YADX,EAEKF,KAFL,CAEW,OAFX,EAGKD,KAHL,CAGW,OAHX,EAGoBF,IAAI,CAAJ,CAHpB;AAIH,CAzCD","file":"mozilla.js","sourcesContent":["module.exports = function (fork) {\n    fork.use(require(\"./core\"));\n    var types = fork.use(require(\"../lib/types\"));\n    var def = types.Type.def;\n    var or = types.Type.or;\n    var shared = fork.use(require(\"../lib/shared\"));\n    var geq = shared.geq;\n    var defaults = shared.defaults;\n\n    def(\"Function\")\n        // SpiderMonkey allows expression closures: function(x) x+1\n        .field(\"body\", or(def(\"BlockStatement\"), def(\"Expression\")));\n\n    def(\"ForInStatement\")\n        .build(\"left\", \"right\", \"body\", \"each\")\n        .field(\"each\", Boolean, defaults[\"false\"]);\n\n    def(\"LetStatement\")\n        .bases(\"Statement\")\n        .build(\"head\", \"body\")\n        // TODO Deviating from the spec by reusing VariableDeclarator here.\n        .field(\"head\", [def(\"VariableDeclarator\")])\n        .field(\"body\", def(\"Statement\"));\n\n    def(\"LetExpression\")\n        .bases(\"Expression\")\n        .build(\"head\", \"body\")\n        // TODO Deviating from the spec by reusing VariableDeclarator here.\n        .field(\"head\", [def(\"VariableDeclarator\")])\n        .field(\"body\", def(\"Expression\"));\n\n    def(\"GraphExpression\")\n        .bases(\"Expression\")\n        .build(\"index\", \"expression\")\n        .field(\"index\", geq(0))\n        .field(\"expression\", def(\"Literal\"));\n\n    def(\"GraphIndexExpression\")\n        .bases(\"Expression\")\n        .build(\"index\")\n        .field(\"index\", geq(0));\n};"]}