{"version":3,"sources":["../../../../src/node_modules/ast-types/def/jsx.js"],"names":["module","exports","fork","use","require","types","def","Type","or","defaults","bases","build","field","String","Boolean","false","JSXElementName","JSXAttributes","emptyArray","openingElement","name","selfClosing","attributes"],"mappings":"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","file":"jsx.js","sourcesContent":["module.exports = function (fork) {\n  fork.use(require(\"./es7\"));\n\n  var types = fork.use(require(\"../lib/types\"));\n  var def = types.Type.def;\n  var or = types.Type.or;\n  var defaults = fork.use(require(\"../lib/shared\")).defaults;\n\n  def(\"JSXAttribute\")\n    .bases(\"Node\")\n    .build(\"name\", \"value\")\n    .field(\"name\", or(def(\"JSXIdentifier\"), def(\"JSXNamespacedName\")))\n    .field(\"value\", or(\n      def(\"Literal\"), // attr=\"value\"\n      def(\"JSXExpressionContainer\"), // attr={value}\n      null // attr= or just attr\n    ), defaults[\"null\"]);\n\n  def(\"JSXIdentifier\")\n    .bases(\"Identifier\")\n    .build(\"name\")\n    .field(\"name\", String);\n\n  def(\"JSXNamespacedName\")\n    .bases(\"Node\")\n    .build(\"namespace\", \"name\")\n    .field(\"namespace\", def(\"JSXIdentifier\"))\n    .field(\"name\", def(\"JSXIdentifier\"));\n\n  def(\"JSXMemberExpression\")\n    .bases(\"MemberExpression\")\n    .build(\"object\", \"property\")\n    .field(\"object\", or(def(\"JSXIdentifier\"), def(\"JSXMemberExpression\")))\n    .field(\"property\", def(\"JSXIdentifier\"))\n    .field(\"computed\", Boolean, defaults.false);\n\n  var JSXElementName = or(\n    def(\"JSXIdentifier\"),\n    def(\"JSXNamespacedName\"),\n    def(\"JSXMemberExpression\")\n  );\n\n  def(\"JSXSpreadAttribute\")\n    .bases(\"Node\")\n    .build(\"argument\")\n    .field(\"argument\", def(\"Expression\"));\n\n  var JSXAttributes = [or(\n    def(\"JSXAttribute\"),\n    def(\"JSXSpreadAttribute\")\n  )];\n\n  def(\"JSXExpressionContainer\")\n    .bases(\"Expression\")\n    .build(\"expression\")\n    .field(\"expression\", def(\"Expression\"));\n\n  def(\"JSXElement\")\n    .bases(\"Expression\")\n    .build(\"openingElement\", \"closingElement\", \"children\")\n    .field(\"openingElement\", def(\"JSXOpeningElement\"))\n    .field(\"closingElement\", or(def(\"JSXClosingElement\"), null), defaults[\"null\"])\n    .field(\"children\", [or(\n      def(\"JSXElement\"),\n      def(\"JSXExpressionContainer\"),\n      def(\"JSXFragment\"),\n      def(\"JSXText\"),\n      def(\"Literal\") // TODO Esprima should return JSXText instead.\n    )], defaults.emptyArray)\n    .field(\"name\", JSXElementName, function () {\n      // Little-known fact: the `this` object inside a default function\n      // is none other than the partially-built object itself, and any\n      // fields initialized directly from builder function arguments\n      // (like openingElement, closingElement, and children) are\n      // guaranteed to be available.\n      return this.openingElement.name;\n    }, true) // hidden from traversal\n    .field(\"selfClosing\", Boolean, function () {\n      return this.openingElement.selfClosing;\n    }, true) // hidden from traversal\n    .field(\"attributes\", JSXAttributes, function () {\n      return this.openingElement.attributes;\n    }, true); // hidden from traversal\n\n  def(\"JSXOpeningElement\")\n    .bases(\"Node\") // TODO Does this make sense? Can't really be an JSXElement.\n    .build(\"name\", \"attributes\", \"selfClosing\")\n    .field(\"name\", JSXElementName)\n    .field(\"attributes\", JSXAttributes, defaults.emptyArray)\n    .field(\"selfClosing\", Boolean, defaults[\"false\"]);\n\n  def(\"JSXClosingElement\")\n    .bases(\"Node\") // TODO Same concern.\n    .build(\"name\")\n    .field(\"name\", JSXElementName);\n\n  def(\"JSXFragment\")\n    .bases(\"Expression\")\n    .build(\"openingElement\", \"closingElement\", \"children\")\n    .field(\"openingElement\", def(\"JSXOpeningFragment\"))\n    .field(\"closingElement\", def(\"JSXClosingFragment\"))\n    .field(\"children\", [or(\n      def(\"JSXElement\"),\n      def(\"JSXExpressionContainer\"),\n      def(\"JSXFragment\"),\n      def(\"JSXText\"),\n      def(\"Literal\") // TODO Esprima should return JSXText instead.\n    )], defaults.emptyArray)\n\n  def(\"JSXOpeningFragment\")\n    .bases(\"Node\") // TODO Same concern.\n    .build();\n\n  def(\"JSXClosingFragment\")\n    .bases(\"Node\") // TODO Same concern.\n    .build();\n\n  def(\"JSXText\")\n    .bases(\"Literal\")\n    .build(\"value\")\n    .field(\"value\", String);\n\n  def(\"JSXEmptyExpression\").bases(\"Expression\").build();\n\n  // This PR has caused many people issues, but supporting it seems like a\n  // good idea anyway: https://github.com/babel/babel/pull/4988\n  def(\"JSXSpreadChild\")\n    .bases(\"Expression\")\n    .build(\"expression\")\n    .field(\"expression\", def(\"Expression\"));\n};\n"]}