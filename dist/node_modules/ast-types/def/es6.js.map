{"version":3,"sources":["../../../../src/node_modules/ast-types/def/es6.js"],"names":["module","exports","fork","use","require","types","def","Type","or","defaults","field","Boolean","emptyArray","bases","build","ClassBodyElement","String"],"mappings":"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","file":"es6.js","sourcesContent":["module.exports = function (fork) {\n  fork.use(require(\"./core\"));\n  var types = fork.use(require(\"../lib/types\"));\n  var def = types.Type.def;\n  var or = types.Type.or;\n  var defaults = fork.use(require(\"../lib/shared\")).defaults;\n\n  def(\"Function\")\n    .field(\"generator\", Boolean, defaults[\"false\"])\n    .field(\"expression\", Boolean, defaults[\"false\"])\n    .field(\"defaults\", [or(def(\"Expression\"), null)], defaults.emptyArray)\n    // TODO This could be represented as a RestElement in .params.\n    .field(\"rest\", or(def(\"Identifier\"), null), defaults[\"null\"]);\n\n  // The ESTree way of representing a ...rest parameter.\n  def(\"RestElement\")\n    .bases(\"Pattern\")\n    .build(\"argument\")\n    .field(\"argument\", def(\"Pattern\"))\n    .field(\"typeAnnotation\", // for Babylon. Flow parser puts it on the identifier\n      or(def(\"TypeAnnotation\"), def(\"TSTypeAnnotation\"), null), defaults[\"null\"]);\n\n  def(\"SpreadElementPattern\")\n    .bases(\"Pattern\")\n    .build(\"argument\")\n    .field(\"argument\", def(\"Pattern\"));\n\n  def(\"FunctionDeclaration\")\n    .build(\"id\", \"params\", \"body\", \"generator\", \"expression\");\n\n  def(\"FunctionExpression\")\n    .build(\"id\", \"params\", \"body\", \"generator\", \"expression\");\n\n  // The Parser API calls this ArrowExpression, but Esprima and all other\n  // actual parsers use ArrowFunctionExpression.\n  def(\"ArrowFunctionExpression\")\n    .bases(\"Function\", \"Expression\")\n    .build(\"params\", \"body\", \"expression\")\n    // The forced null value here is compatible with the overridden\n    // definition of the \"id\" field in the Function interface.\n    .field(\"id\", null, defaults[\"null\"])\n    // Arrow function bodies are allowed to be expressions.\n    .field(\"body\", or(def(\"BlockStatement\"), def(\"Expression\")))\n    // The current spec forbids arrow generators, so I have taken the\n    // liberty of enforcing that. TODO Report this.\n    .field(\"generator\", false, defaults[\"false\"]);\n\n  def(\"ForOfStatement\")\n    .bases(\"Statement\")\n    .build(\"left\", \"right\", \"body\")\n    .field(\"left\", or(\n      def(\"VariableDeclaration\"),\n      def(\"Pattern\")))\n    .field(\"right\", def(\"Expression\"))\n    .field(\"body\", def(\"Statement\"));\n\n  def(\"YieldExpression\")\n    .bases(\"Expression\")\n    .build(\"argument\", \"delegate\")\n    .field(\"argument\", or(def(\"Expression\"), null))\n    .field(\"delegate\", Boolean, defaults[\"false\"]);\n\n  def(\"GeneratorExpression\")\n    .bases(\"Expression\")\n    .build(\"body\", \"blocks\", \"filter\")\n    .field(\"body\", def(\"Expression\"))\n    .field(\"blocks\", [def(\"ComprehensionBlock\")])\n    .field(\"filter\", or(def(\"Expression\"), null));\n\n  def(\"ComprehensionExpression\")\n    .bases(\"Expression\")\n    .build(\"body\", \"blocks\", \"filter\")\n    .field(\"body\", def(\"Expression\"))\n    .field(\"blocks\", [def(\"ComprehensionBlock\")])\n    .field(\"filter\", or(def(\"Expression\"), null));\n\n  def(\"ComprehensionBlock\")\n    .bases(\"Node\")\n    .build(\"left\", \"right\", \"each\")\n    .field(\"left\", def(\"Pattern\"))\n    .field(\"right\", def(\"Expression\"))\n    .field(\"each\", Boolean);\n\n  def(\"Property\")\n    .field(\"key\", or(def(\"Literal\"), def(\"Identifier\"), def(\"Expression\")))\n    .field(\"value\", or(def(\"Expression\"), def(\"Pattern\")))\n    .field(\"method\", Boolean, defaults[\"false\"])\n    .field(\"shorthand\", Boolean, defaults[\"false\"])\n    .field(\"computed\", Boolean, defaults[\"false\"]);\n\n  def(\"ObjectProperty\")\n    .field(\"shorthand\", Boolean, defaults[\"false\"]);\n\n  def(\"PropertyPattern\")\n    .bases(\"Pattern\")\n    .build(\"key\", \"pattern\")\n    .field(\"key\", or(def(\"Literal\"), def(\"Identifier\"), def(\"Expression\")))\n    .field(\"pattern\", def(\"Pattern\"))\n    .field(\"computed\", Boolean, defaults[\"false\"]);\n\n  def(\"ObjectPattern\")\n    .bases(\"Pattern\")\n    .build(\"properties\")\n    .field(\"properties\", [or(def(\"PropertyPattern\"), def(\"Property\"))]);\n\n  def(\"ArrayPattern\")\n    .bases(\"Pattern\")\n    .build(\"elements\")\n    .field(\"elements\", [or(def(\"Pattern\"), null)]);\n\n  def(\"MethodDefinition\")\n    .bases(\"Declaration\")\n    .build(\"kind\", \"key\", \"value\", \"static\")\n    .field(\"kind\", or(\"constructor\", \"method\", \"get\", \"set\"))\n    .field(\"key\", def(\"Expression\"))\n    .field(\"value\", def(\"Function\"))\n    .field(\"computed\", Boolean, defaults[\"false\"])\n    .field(\"static\", Boolean, defaults[\"false\"]);\n\n  def(\"SpreadElement\")\n    .bases(\"Node\")\n    .build(\"argument\")\n    .field(\"argument\", def(\"Expression\"));\n\n  def(\"ArrayExpression\")\n    .field(\"elements\", [or(\n      def(\"Expression\"),\n      def(\"SpreadElement\"),\n      def(\"RestElement\"),\n      null\n    )]);\n\n  def(\"NewExpression\")\n    .field(\"arguments\", [or(def(\"Expression\"), def(\"SpreadElement\"))]);\n\n  def(\"CallExpression\")\n    .field(\"arguments\", [or(def(\"Expression\"), def(\"SpreadElement\"))]);\n\n  // Note: this node type is *not* an AssignmentExpression with a Pattern on\n  // the left-hand side! The existing AssignmentExpression type already\n  // supports destructuring assignments. AssignmentPattern nodes may appear\n  // wherever a Pattern is allowed, and the right-hand side represents a\n  // default value to be destructured against the left-hand side, if no\n  // value is otherwise provided. For example: default parameter values.\n  def(\"AssignmentPattern\")\n    .bases(\"Pattern\")\n    .build(\"left\", \"right\")\n    .field(\"left\", def(\"Pattern\"))\n    .field(\"right\", def(\"Expression\"));\n\n  var ClassBodyElement = or(\n    def(\"MethodDefinition\"),\n    def(\"VariableDeclarator\"),\n    def(\"ClassPropertyDefinition\"),\n    def(\"ClassProperty\")\n  );\n\n  def(\"ClassProperty\")\n    .bases(\"Declaration\")\n    .build(\"key\")\n    .field(\"key\", or(def(\"Literal\"), def(\"Identifier\"), def(\"Expression\")))\n    .field(\"computed\", Boolean, defaults[\"false\"]);\n\n  def(\"ClassPropertyDefinition\") // static property\n    .bases(\"Declaration\")\n    .build(\"definition\")\n    // Yes, Virginia, circular definitions are permitted.\n    .field(\"definition\", ClassBodyElement);\n\n  def(\"ClassBody\")\n    .bases(\"Declaration\")\n    .build(\"body\")\n    .field(\"body\", [ClassBodyElement]);\n\n  def(\"ClassDeclaration\")\n    .bases(\"Declaration\")\n    .build(\"id\", \"body\", \"superClass\")\n    .field(\"id\", or(def(\"Identifier\"), null))\n    .field(\"body\", def(\"ClassBody\"))\n    .field(\"superClass\", or(def(\"Expression\"), null), defaults[\"null\"]);\n\n  def(\"ClassExpression\")\n    .bases(\"Expression\")\n    .build(\"id\", \"body\", \"superClass\")\n    .field(\"id\", or(def(\"Identifier\"), null), defaults[\"null\"])\n    .field(\"body\", def(\"ClassBody\"))\n    .field(\"superClass\", or(def(\"Expression\"), null), defaults[\"null\"]);\n\n  // Specifier and ModuleSpecifier are abstract non-standard types\n  // introduced for definitional convenience.\n  def(\"Specifier\").bases(\"Node\");\n\n  // This supertype is shared/abused by both def/babel.js and\n  // def/esprima.js. In the future, it will be possible to load only one set\n  // of definitions appropriate for a given parser, but until then we must\n  // rely on default functions to reconcile the conflicting AST formats.\n  def(\"ModuleSpecifier\")\n    .bases(\"Specifier\")\n    // This local field is used by Babel/Acorn. It should not technically\n    // be optional in the Babel/Acorn AST format, but it must be optional\n    // in the Esprima AST format.\n    .field(\"local\", or(def(\"Identifier\"), null), defaults[\"null\"])\n    // The id and name fields are used by Esprima. The id field should not\n    // technically be optional in the Esprima AST format, but it must be\n    // optional in the Babel/Acorn AST format.\n    .field(\"id\", or(def(\"Identifier\"), null), defaults[\"null\"])\n    .field(\"name\", or(def(\"Identifier\"), null), defaults[\"null\"]);\n\n  // Like ModuleSpecifier, except type:\"ImportSpecifier\" and buildable.\n  // import {<id [as name]>} from ...;\n  def(\"ImportSpecifier\")\n    .bases(\"ModuleSpecifier\")\n    .build(\"id\", \"name\");\n\n  // import <* as id> from ...;\n  def(\"ImportNamespaceSpecifier\")\n    .bases(\"ModuleSpecifier\")\n    .build(\"id\");\n\n  // import <id> from ...;\n  def(\"ImportDefaultSpecifier\")\n    .bases(\"ModuleSpecifier\")\n    .build(\"id\");\n\n  def(\"ImportDeclaration\")\n    .bases(\"Declaration\")\n    .build(\"specifiers\", \"source\", \"importKind\")\n    .field(\"specifiers\", [or(\n      def(\"ImportSpecifier\"),\n      def(\"ImportNamespaceSpecifier\"),\n      def(\"ImportDefaultSpecifier\")\n    )], defaults.emptyArray)\n    .field(\"source\", def(\"Literal\"))\n    .field(\"importKind\", or(\n      \"value\",\n      \"type\"\n    ), function() {\n      return \"value\";\n    });\n\n  def(\"TaggedTemplateExpression\")\n    .bases(\"Expression\")\n    .build(\"tag\", \"quasi\")\n    .field(\"tag\", def(\"Expression\"))\n    .field(\"quasi\", def(\"TemplateLiteral\"));\n\n  def(\"TemplateLiteral\")\n    .bases(\"Expression\")\n    .build(\"quasis\", \"expressions\")\n    .field(\"quasis\", [def(\"TemplateElement\")])\n    .field(\"expressions\", [def(\"Expression\")]);\n\n  def(\"TemplateElement\")\n    .bases(\"Node\")\n    .build(\"value\", \"tail\")\n    .field(\"value\", {\"cooked\": String, \"raw\": String})\n    .field(\"tail\", Boolean);\n};\n"]}