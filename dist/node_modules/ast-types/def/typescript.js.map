{"version":3,"sources":["../../../../src/node_modules/ast-types/def/typescript.js"],"names":["module","exports","fork","use","require","types","n","namedTypes","def","Type","or","defaults","StringLiteral","value","deep","check","Literal","bases","IdOrQualifiedName","build","field","parenthesized","Boolean","forEach","keywordType","typeName","ParametersType","getDefault","String","TSTypeMember"],"mappings":"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","file":"typescript.js","sourcesContent":["module.exports = function (fork) {\n  // Since TypeScript is parsed by Babylon, include the core Babylon types\n  // but omit the Flow-related types.\n  fork.use(require(\"./babel-core\"));\n  fork.use(require(\"./type-annotations\"));\n\n  var types = fork.use(require(\"../lib/types\"));\n  var n = types.namedTypes;\n  var def = types.Type.def;\n  var or = types.Type.or;\n  var defaults = fork.use(require(\"../lib/shared\")).defaults;\n  var StringLiteral = new types.Type(function (value, deep) {\n    if (n.StringLiteral &&\n        n.StringLiteral.check(value, deep)) {\n      return true\n    }\n    if (n.Literal &&\n        n.Literal.check(value, deep) &&\n        typeof value.value === \"string\") {\n      return true;\n    }\n    return false;\n  }, \"StringLiteral\");\n\n  def(\"TSType\")\n    .bases(\"Node\");\n\n  var IdOrQualifiedName = or(\n    def(\"Identifier\"),\n    def(\"TSQualifiedName\")\n  );\n\n  def(\"TSTypeReference\")\n    .bases(\"TSType\")\n    .build(\"typeName\", \"typeParameters\")\n    .field(\"typeName\", IdOrQualifiedName)\n    .field(\"typeParameters\",\n           or(def(\"TSTypeParameterInstantiation\"), null),\n           defaults[\"null\"]);\n\n  // An abstract (non-buildable) base type that provide a commonly-needed\n  // optional .typeParameters field.\n  def(\"TSHasOptionalTypeParameters\")\n    .field(\"typeParameters\",\n           or(def(\"TSTypeParameterDeclaration\"), null),\n           defaults[\"null\"]);\n\n  // An abstract (non-buildable) base type that provide a commonly-needed\n  // optional .typeAnnotation field.\n  def(\"TSHasOptionalTypeAnnotation\")\n    .field(\"typeAnnotation\",\n           or(def(\"TSTypeAnnotation\"), null),\n           defaults[\"null\"]);\n\n  def(\"TSQualifiedName\")\n    .bases(\"Node\")\n    .build(\"left\", \"right\")\n    .field(\"left\", IdOrQualifiedName)\n    .field(\"right\", IdOrQualifiedName);\n\n  def(\"TSAsExpression\")\n    .bases(\"Expression\")\n    .build(\"expression\")\n    .field(\"expression\", def(\"Expression\"))\n    .field(\"typeAnnotation\", def(\"TSType\"))\n    .field(\"extra\",\n           or({ parenthesized: Boolean }, null),\n           defaults[\"null\"]);\n\n  def(\"TSNonNullExpression\")\n    .bases(\"Expression\")\n    .build(\"expression\")\n    .field(\"expression\", def(\"Expression\"));\n\n  [ // Define all the simple keyword types.\n    \"TSAnyKeyword\",\n    \"TSBooleanKeyword\",\n    \"TSNeverKeyword\",\n    \"TSNullKeyword\",\n    \"TSNumberKeyword\",\n    \"TSObjectKeyword\",\n    \"TSStringKeyword\",\n    \"TSSymbolKeyword\",\n    \"TSUndefinedKeyword\",\n    \"TSUnknownKeyword\",\n    \"TSVoidKeyword\",\n    \"TSThisType\",\n  ].forEach(keywordType => {\n    def(keywordType)\n      .bases(\"TSType\")\n      .build();\n  });\n\n  def(\"TSArrayType\")\n    .bases(\"TSType\")\n    .build(\"elementType\")\n    .field(\"elementType\", def(\"TSType\"))\n\n  def(\"TSLiteralType\")\n    .bases(\"TSType\")\n    .build(\"literal\")\n    .field(\"literal\",\n           or(def(\"NumericLiteral\"),\n              def(\"StringLiteral\"),\n              def(\"BooleanLiteral\")));\n\n  [\"TSUnionType\",\n   \"TSIntersectionType\",\n  ].forEach(typeName => {\n    def(typeName)\n      .bases(\"TSType\")\n      .build(\"types\")\n      .field(\"types\", [def(\"TSType\")]);\n  });\n\n  def(\"TSConditionalType\")\n    .bases(\"TSType\")\n    .build(\"checkType\", \"extendsType\", \"trueType\", \"falseType\")\n    .field(\"checkType\", def(\"TSType\"))\n    .field(\"extendsType\", def(\"TSType\"))\n    .field(\"trueType\", def(\"TSType\"))\n    .field(\"falseType\", def(\"TSType\"));\n\n  def(\"TSInferType\")\n    .bases(\"TSType\")\n    .build(\"typeParameter\")\n    .field(\"typeParameter\", def(\"TSTypeParameter\"));\n\n  def(\"TSParenthesizedType\")\n    .bases(\"TSType\")\n    .build(\"typeAnnotation\")\n    .field(\"typeAnnotation\", def(\"TSType\"));\n\n  var ParametersType = [or(\n    def(\"Identifier\"),\n    def(\"RestElement\")\n  )];\n\n  [\"TSFunctionType\",\n   \"TSConstructorType\",\n  ].forEach(typeName => {\n    def(typeName)\n      .bases(\"TSType\",\n             \"TSHasOptionalTypeParameters\",\n             \"TSHasOptionalTypeAnnotation\")\n      .build(\"parameters\")\n      .field(\"parameters\", ParametersType);\n  });\n\n  def(\"TSDeclareFunction\")\n    .bases(\"Declaration\", \"TSHasOptionalTypeParameters\")\n    .build(\"id\", \"params\", \"returnType\")\n    .field(\"declare\", Boolean, defaults[\"false\"])\n    .field(\"async\", Boolean, defaults[\"false\"])\n    .field(\"generator\", Boolean, defaults[\"false\"])\n    .field(\"id\", or(def(\"Identifier\"), null), defaults[\"null\"])\n    .field(\"params\", [def(\"Pattern\")])\n    // tSFunctionTypeAnnotationCommon\n    .field(\"returnType\",\n           or(def(\"TSTypeAnnotation\"),\n              def(\"Noop\"), // Still used?\n              null),\n           defaults[\"null\"]);\n\n  def(\"TSDeclareMethod\")\n    .bases(\"Declaration\", \"TSHasOptionalTypeParameters\")\n    .build(\"key\", \"params\", \"returnType\")\n    .field(\"async\", Boolean, defaults[\"false\"])\n    .field(\"generator\", Boolean, defaults[\"false\"])\n    .field(\"params\", [def(\"Pattern\")])\n    // classMethodOrPropertyCommon\n    .field(\"abstract\", Boolean, defaults[\"false\"])\n    .field(\"accessibility\",\n           or(\"public\", \"private\", \"protected\", void 0),\n           defaults[\"undefined\"])\n    .field(\"static\", Boolean, defaults[\"false\"])\n    .field(\"computed\", Boolean, defaults[\"false\"])\n    .field(\"optional\", Boolean, defaults[\"false\"])\n    .field(\"key\", or(\n      def(\"Identifier\"),\n      def(\"StringLiteral\"),\n      def(\"NumericLiteral\"),\n      // Only allowed if .computed is true.\n      def(\"Expression\")\n    ))\n    // classMethodOrDeclareMethodCommon\n    .field(\"kind\",\n           or(\"get\", \"set\", \"method\", \"constructor\"),\n           function getDefault() { return \"method\"; })\n    .field(\"access\", // Not \"accessibility\"?\n           or(\"public\", \"private\", \"protected\", void 0),\n           defaults[\"undefined\"])\n    .field(\"decorators\",\n           or([def(\"Decorator\")], null),\n           defaults[\"null\"])\n    // tSFunctionTypeAnnotationCommon\n    .field(\"returnType\",\n           or(def(\"TSTypeAnnotation\"),\n              def(\"Noop\"), // Still used?\n              null),\n           defaults[\"null\"]);\n\n  def(\"TSMappedType\")\n    .bases(\"TSType\")\n    .build(\"typeParameter\", \"typeAnnotation\")\n    .field(\"readonly\", or(Boolean, \"+\", \"-\"), defaults[\"false\"])\n    .field(\"typeParameter\", def(\"TSTypeParameter\"))\n    .field(\"optional\", or(Boolean, \"+\", \"-\"), defaults[\"false\"])\n    .field(\"typeAnnotation\",\n           or(def(\"TSType\"), null),\n           defaults[\"null\"]);\n\n  def(\"TSTupleType\")\n    .bases(\"TSType\")\n    .build(\"elementTypes\")\n    .field(\"elementTypes\", [def(\"TSType\")]);\n\n  def(\"TSRestType\")\n    .bases(\"TSType\")\n    .build(\"typeAnnotation\")\n    .field(\"typeAnnotation\", def(\"TSType\"));\n\n  def(\"TSOptionalType\")\n    .bases(\"TSType\")\n    .build(\"typeAnnotation\")\n    .field(\"typeAnnotation\", def(\"TSType\"));\n\n  def(\"TSIndexedAccessType\")\n    .bases(\"TSType\")\n    .build(\"objectType\", \"indexType\")\n    .field(\"objectType\", def(\"TSType\"))\n    .field(\"indexType\", def(\"TSType\"))\n\n  def(\"TSTypeOperator\")\n    .bases(\"TSType\")\n    .build(\"operator\")\n    .field(\"operator\", String)\n    .field(\"typeAnnotation\", def(\"TSType\"));\n\n  def(\"TSTypeAnnotation\")\n    .bases(\"Node\")\n    .build(\"typeAnnotation\")\n    .field(\"typeAnnotation\",\n           or(def(\"TSType\"),\n              def(\"TSTypeAnnotation\")));\n\n  def(\"TSIndexSignature\")\n    .bases(\"Declaration\", \"TSHasOptionalTypeAnnotation\")\n    .build(\"parameters\")\n    .field(\"parameters\", [def(\"Identifier\")]) // Length === 1\n    .field(\"readonly\", Boolean, defaults[\"false\"]);\n\n  def(\"TSPropertySignature\")\n    .bases(\"Declaration\", \"TSHasOptionalTypeAnnotation\")\n    .build(\"key\")\n    .field(\"key\", def(\"Expression\"))\n    .field(\"computed\", Boolean, defaults[\"false\"])\n    .field(\"readonly\", Boolean, defaults[\"false\"])\n    .field(\"optional\", Boolean, defaults[\"false\"])\n    .field(\"initializer\",\n           or(def(\"Expression\"), null),\n           defaults[\"null\"]);\n\n  def(\"TSMethodSignature\")\n    .bases(\"Declaration\",\n           \"TSHasOptionalTypeParameters\",\n           \"TSHasOptionalTypeAnnotation\")\n    .build(\"key\")\n    .field(\"key\", def(\"Expression\"))\n    .field(\"computed\", Boolean, defaults[\"false\"])\n    .field(\"optional\", Boolean, defaults[\"false\"])\n    .field(\"parameters\", ParametersType);\n\n  def(\"TSTypePredicate\")\n    .bases(\"TSTypeAnnotation\")\n    .build(\"parameterName\", \"typeAnnotation\")\n    .field(\"parameterName\",\n           or(def(\"Identifier\"),\n              def(\"TSThisType\")))\n    .field(\"typeAnnotation\", def(\"TSTypeAnnotation\"));\n\n  [\"TSCallSignatureDeclaration\",\n   \"TSConstructSignatureDeclaration\",\n  ].forEach(typeName => {\n    def(typeName)\n      .bases(\"Declaration\",\n             \"TSHasOptionalTypeParameters\",\n             \"TSHasOptionalTypeAnnotation\")\n      .build(\"parameters\")\n      .field(\"parameters\", ParametersType);\n  });\n\n  def(\"TSEnumMember\")\n    .bases(\"Node\")\n    .build(\"id\", \"initializer\")\n    .field(\"id\", or(def(\"Identifier\"), StringLiteral))\n    .field(\"initializer\",\n           or(def(\"Expression\"), null),\n           defaults[\"null\"]);\n\n  def(\"TSTypeQuery\")\n    .bases(\"TSType\")\n    .build(\"exprName\")\n    .field(\"exprName\", IdOrQualifiedName);\n\n  // Inferred from Babylon's tsParseTypeMember method.\n  var TSTypeMember = or(\n    def(\"TSCallSignatureDeclaration\"),\n    def(\"TSConstructSignatureDeclaration\"),\n    def(\"TSIndexSignature\"),\n    def(\"TSMethodSignature\"),\n    def(\"TSPropertySignature\")\n  );\n\n  def(\"TSTypeLiteral\")\n    .bases(\"TSType\")\n    .build(\"members\")\n    .field(\"members\", [TSTypeMember]);\n\n  def(\"TSTypeParameter\")\n    .bases(\"Identifier\")\n    .build(\"name\", \"constraint\", \"default\")\n    .field(\"name\", String)\n    .field(\"constraint\", or(def(\"TSType\"), null), defaults[\"null\"])\n    .field(\"default\", or(def(\"TSType\"), null), defaults[\"null\"]);\n\n  def(\"TSTypeAssertion\")\n    .bases(\"Expression\")\n    .build(\"typeAnnotation\", \"expression\")\n    .field(\"typeAnnotation\", def(\"TSType\"))\n    .field(\"expression\", def(\"Expression\"))\n    .field(\"extra\",\n           or({ parenthesized: Boolean }, null),\n           defaults[\"null\"]);\n\n  def(\"TSTypeParameterDeclaration\")\n    .bases(\"Declaration\")\n    .build(\"params\")\n    .field(\"params\", [def(\"TSTypeParameter\")]);\n\n  def(\"TSTypeParameterInstantiation\")\n    .bases(\"Node\")\n    .build(\"params\")\n    .field(\"params\", [def(\"TSType\")]);\n\n  def(\"TSEnumDeclaration\")\n    .bases(\"Declaration\")\n    .build(\"id\", \"members\")\n    .field(\"id\", def(\"Identifier\"))\n    .field(\"const\", Boolean, defaults[\"false\"])\n    .field(\"declare\", Boolean, defaults[\"false\"])\n    .field(\"members\", [def(\"TSEnumMember\")])\n    .field(\"initializer\",\n           or(def(\"Expression\"), null),\n           defaults[\"null\"]);\n\n  def(\"TSTypeAliasDeclaration\")\n    .bases(\"Declaration\", \"TSHasOptionalTypeParameters\")\n    .build(\"id\")\n    .field(\"id\", def(\"Identifier\"))\n    .field(\"declare\", Boolean, defaults[\"false\"])\n    .field(\"typeAnnotation\", def(\"TSType\"));\n\n  def(\"TSModuleBlock\")\n    .bases(\"Node\")\n    .build(\"body\")\n    .field(\"body\", [def(\"Statement\")]);\n\n  def(\"TSModuleDeclaration\")\n    .bases(\"Declaration\")\n    .build(\"id\", \"body\")\n    .field(\"id\", or(StringLiteral, IdOrQualifiedName))\n    .field(\"declare\", Boolean, defaults[\"false\"])\n    .field(\"global\", Boolean, defaults[\"false\"])\n    .field(\"body\",\n           or(def(\"TSModuleBlock\"),\n              def(\"TSModuleDeclaration\"),\n              null),\n           defaults[\"null\"]);\n\n  def(\"TSImportEqualsDeclaration\")\n    .bases(\"Declaration\")\n    .build(\"id\", \"moduleReference\")\n    .field(\"id\", def(\"Identifier\"))\n    .field(\"isExport\", Boolean, defaults[\"false\"])\n    .field(\"moduleReference\",\n           or(IdOrQualifiedName,\n              def(\"TSExternalModuleReference\")));\n\n  def(\"TSExternalModuleReference\")\n    .bases(\"Declaration\")\n    .build(\"expression\")\n    .field(\"expression\", StringLiteral);\n\n  def(\"TSExportAssignment\")\n    .bases(\"Statement\")\n    .build(\"expression\")\n    .field(\"expression\", def(\"Expression\"));\n\n  def(\"TSNamespaceExportDeclaration\")\n    .bases(\"Declaration\")\n    .build(\"id\")\n    .field(\"id\", def(\"Identifier\"));\n\n  def(\"TSInterfaceBody\")\n    .bases(\"Node\")\n    .build(\"body\")\n    .field(\"body\", [TSTypeMember]);\n\n  def(\"TSExpressionWithTypeArguments\")\n    .bases(\"TSType\")\n    .build(\"expression\", \"typeParameters\")\n    .field(\"expression\", IdOrQualifiedName)\n    .field(\"typeParameters\",\n           or(def(\"TSTypeParameterInstantiation\"), null),\n           defaults[\"null\"]);\n\n  def(\"TSInterfaceDeclaration\")\n    .bases(\"Declaration\", \"TSHasOptionalTypeParameters\")\n    .build(\"id\", \"body\")\n    .field(\"id\", IdOrQualifiedName)\n    .field(\"declare\", Boolean, defaults[\"false\"])\n    .field(\"extends\",\n           or([def(\"TSExpressionWithTypeArguments\")], null),\n           defaults[\"null\"])\n    .field(\"body\", def(\"TSInterfaceBody\"));\n\n  def(\"TSParameterProperty\")\n    .bases(\"Pattern\")\n    .build(\"parameter\")\n    .field(\"accessibility\",\n           or(\"public\", \"private\", \"protected\", void 0),\n           defaults[\"undefined\"])\n    .field(\"readonly\", Boolean, defaults[\"false\"])\n    .field(\"parameter\", or(def(\"Identifier\"),\n                           def(\"AssignmentPattern\")));\n\n  // Defined already in es6 and babel-core.\n  def(\"ClassBody\")\n    .field(\"body\", [or(\n      def(\"MethodDefinition\"),\n      def(\"VariableDeclarator\"),\n      def(\"ClassPropertyDefinition\"),\n      def(\"ClassProperty\"),\n      def(\"ClassMethod\"),\n      // Just need to add these types:\n      def(\"TSDeclareMethod\"),\n      TSTypeMember\n    )]);\n};\n"]}