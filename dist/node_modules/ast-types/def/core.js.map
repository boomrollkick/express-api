{"version":3,"sources":["../../../../src/node_modules/ast-types/def/core.js"],"names":["module","exports","fork","types","use","require","Type","def","or","shared","defaults","geq","field","bases","String","build","Boolean","handlers","handler","emptyArray","UnaryOperator","BinaryOperator","AssignmentOperator","UpdateOperator","LogicalOperator","type","property","Number","RegExp","pattern","flags","value","ignoreCase","multiline","global","source"],"mappings":";;AAAAA,OAAOC,OAAP,GAAiB,UAAUC,IAAV,EAAgB;AAC7B,QAAIC,QAAQD,KAAKE,GAAL,CAASC,QAAQ,cAAR,CAAT,CAAZ;AACA,QAAIC,OAAOH,MAAMG,IAAjB;AACA,QAAIC,MAAMD,KAAKC,GAAf;AACA,QAAIC,KAAKF,KAAKE,EAAd;AACA,QAAIC,SAASP,KAAKE,GAAL,CAASC,QAAQ,eAAR,CAAT,CAAb;AACA,QAAIK,WAAWD,OAAOC,QAAtB;AACA,QAAIC,MAAMF,OAAOE,GAAjB;;AAEA;AACA;AACAJ,QAAI,WAAJ,EACKK,KADL,CACW,KADX,EACkBJ,GACVD,IAAI,gBAAJ,CADU,EAEV,IAFU,CADlB,EAIOG,SAAS,MAAT,CAJP,EAIyB,IAJzB;;AAMAH,QAAI,MAAJ,EACKM,KADL,CACW,WADX,EAEKD,KAFL,CAEW,MAFX,EAEmBE,MAFnB,EAGKF,KAHL,CAGW,UAHX,EAGuBJ,GACf,CAACD,IAAI,SAAJ,CAAD,CADe,EAEf,IAFe,CAHvB,EAMOG,SAAS,MAAT,CANP,EAMyB,IANzB;;AAQAH,QAAI,gBAAJ,EACKQ,KADL,CACW,OADX,EACoB,KADpB,EAC2B,QAD3B,EAEKH,KAFL,CAEW,OAFX,EAEoBL,IAAI,UAAJ,CAFpB,EAGKK,KAHL,CAGW,KAHX,EAGkBL,IAAI,UAAJ,CAHlB,EAIKK,KAJL,CAIW,QAJX,EAIqBJ,GAAGM,MAAH,EAAW,IAAX,CAJrB,EAIuCJ,SAAS,MAAT,CAJvC;;AAMAH,QAAI,UAAJ,EACKQ,KADL,CACW,MADX,EACmB,QADnB,EAEKH,KAFL,CAEW,MAFX,EAEmBD,IAAI,CAAJ,CAFnB,EAGKC,KAHL,CAGW,QAHX,EAGqBD,IAAI,CAAJ,CAHrB;;AAKAJ,QAAI,MAAJ,EACKM,KADL,CACW,MADX,EAEKE,KAFL,CAEW,SAFX,EAEsB,MAFtB,EAGKH,KAHL,CAGW,SAHX,EAGsBL,IAAI,SAAJ,CAHtB,EAIKK,KAJL,CAIW,MAJX,EAImBJ,GAAGM,MAAH,EAAW,IAAX,CAJnB,EAIqCJ,SAAS,MAAT,CAJrC;;AAMAH,QAAI,SAAJ,EACKM,KADL,CACW,MADX,EAEKE,KAFL,CAEW,MAFX,EAGKH,KAHL,CAGW,MAHX,EAGmB,CAACL,IAAI,WAAJ,CAAD,CAHnB;;AAKAA,QAAI,UAAJ,EACKM,KADL,CACW,MADX,EAEKD,KAFL,CAEW,IAFX,EAEiBJ,GAAGD,IAAI,YAAJ,CAAH,EAAsB,IAAtB,CAFjB,EAE8CG,SAAS,MAAT,CAF9C,EAGKE,KAHL,CAGW,QAHX,EAGqB,CAACL,IAAI,SAAJ,CAAD,CAHrB,EAIKK,KAJL,CAIW,MAJX,EAImBL,IAAI,gBAAJ,CAJnB;;AAMAA,QAAI,WAAJ,EAAiBM,KAAjB,CAAuB,MAAvB;;AAEJ;AACA;AACIN,QAAI,gBAAJ,EAAsBM,KAAtB,CAA4B,WAA5B,EAAyCE,KAAzC;;AAEAR,QAAI,gBAAJ,EACKM,KADL,CACW,WADX,EAEKE,KAFL,CAEW,MAFX,EAGKH,KAHL,CAGW,MAHX,EAGmB,CAACL,IAAI,WAAJ,CAAD,CAHnB;;AAKA;AACA;AACAA,QAAI,qBAAJ,EACKM,KADL,CACW,WADX,EAEKE,KAFL,CAEW,YAFX,EAGKH,KAHL,CAGW,YAHX,EAGyBL,IAAI,YAAJ,CAHzB;;AAKAA,QAAI,aAAJ,EACKM,KADL,CACW,WADX,EAEKE,KAFL,CAEW,MAFX,EAEmB,YAFnB,EAEiC,WAFjC,EAGKH,KAHL,CAGW,MAHX,EAGmBL,IAAI,YAAJ,CAHnB,EAIKK,KAJL,CAIW,YAJX,EAIyBL,IAAI,WAAJ,CAJzB,EAKKK,KALL,CAKW,WALX,EAKwBJ,GAAGD,IAAI,WAAJ,CAAH,EAAqB,IAArB,CALxB,EAKoDG,SAAS,MAAT,CALpD;;AAOAH,QAAI,kBAAJ,EACKM,KADL,CACW,WADX,EAEKE,KAFL,CAEW,OAFX,EAEoB,MAFpB,EAGKH,KAHL,CAGW,OAHX,EAGoBL,IAAI,YAAJ,CAHpB,EAIKK,KAJL,CAIW,MAJX,EAImBL,IAAI,WAAJ,CAJnB;;AAMAA,QAAI,gBAAJ,EACKM,KADL,CACW,WADX,EAEKE,KAFL,CAEW,OAFX,EAGKH,KAHL,CAGW,OAHX,EAGoBJ,GAAGD,IAAI,YAAJ,CAAH,EAAsB,IAAtB,CAHpB,EAGiDG,SAAS,MAAT,CAHjD;;AAKAH,QAAI,mBAAJ,EACKM,KADL,CACW,WADX,EAEKE,KAFL,CAEW,OAFX,EAGKH,KAHL,CAGW,OAHX,EAGoBJ,GAAGD,IAAI,YAAJ,CAAH,EAAsB,IAAtB,CAHpB,EAGiDG,SAAS,MAAT,CAHjD;;AAKAH,QAAI,eAAJ,EACKM,KADL,CACW,WADX,EAEKE,KAFL,CAEW,QAFX,EAEqB,MAFrB,EAGKH,KAHL,CAGW,QAHX,EAGqBL,IAAI,YAAJ,CAHrB,EAIKK,KAJL,CAIW,MAJX,EAImBL,IAAI,WAAJ,CAJnB;;AAMAA,QAAI,iBAAJ,EACKM,KADL,CACW,WADX,EAEKE,KAFL,CAEW,cAFX,EAE2B,OAF3B,EAEoC,SAFpC,EAGKH,KAHL,CAGW,cAHX,EAG2BL,IAAI,YAAJ,CAH3B,EAIKK,KAJL,CAIW,OAJX,EAIoB,CAACL,IAAI,YAAJ,CAAD,CAJpB,EAKKK,KALL,CAKW,SALX,EAKsBI,OALtB,EAK+BN,SAAS,OAAT,CAL/B;;AAOAH,QAAI,iBAAJ,EACKM,KADL,CACW,WADX,EAEKE,KAFL,CAEW,UAFX,EAGKH,KAHL,CAGW,UAHX,EAGuBJ,GAAGD,IAAI,YAAJ,CAAH,EAAsB,IAAtB,CAHvB;;AAKAA,QAAI,gBAAJ,EACKM,KADL,CACW,WADX,EAEKE,KAFL,CAEW,UAFX,EAGKH,KAHL,CAGW,UAHX,EAGuBL,IAAI,YAAJ,CAHvB;;AAKAA,QAAI,cAAJ,EACKM,KADL,CACW,WADX,EAEKE,KAFL,CAEW,OAFX,EAEoB,SAFpB,EAE+B,WAF/B,EAGKH,KAHL,CAGW,OAHX,EAGoBL,IAAI,gBAAJ,CAHpB,EAIKK,KAJL,CAIW,SAJX,EAIsBJ,GAAGD,IAAI,aAAJ,CAAH,EAAuB,IAAvB,CAJtB,EAIoD,YAAY;AACxD,eAAO,KAAKU,QAAL,IAAiB,KAAKA,QAAL,CAAc,CAAd,CAAjB,IAAqC,IAA5C;AACH,KANL,EAOKL,KAPL,CAOW,UAPX,EAOuB,CAACL,IAAI,aAAJ,CAAD,CAPvB,EAO6C,YAAY;AACjD,eAAO,KAAKW,OAAL,GAAe,CAAC,KAAKA,OAAN,CAAf,GAAgC,EAAvC;AACH,KATL,EASO,IATP,EASa;AATb,KAUKN,KAVL,CAUW,iBAVX,EAU8B,CAACL,IAAI,aAAJ,CAAD,CAV9B,EAUoDG,SAASS,UAV7D,EAWKP,KAXL,CAWW,WAXX,EAWwBJ,GAAGD,IAAI,gBAAJ,CAAH,EAA0B,IAA1B,CAXxB,EAWyDG,SAAS,MAAT,CAXzD;;AAaAH,QAAI,aAAJ,EACKM,KADL,CACW,MADX,EAEKE,KAFL,CAEW,OAFX,EAEoB,OAFpB,EAE6B,MAF7B;AAGI;AAHJ,KAIKH,KAJL,CAIW,OAJX,EAIoBJ,GAAGD,IAAI,SAAJ,CAAH,EAAmB,IAAnB,CAJpB,EAI8CG,SAAS,MAAT,CAJ9C,EAKKE,KALL,CAKW,OALX,EAKoBJ,GAAGD,IAAI,YAAJ,CAAH,EAAsB,IAAtB,CALpB,EAKiDG,SAAS,MAAT,CALjD,EAMKE,KANL,CAMW,MANX,EAMmBL,IAAI,gBAAJ,CANnB;;AAQAA,QAAI,gBAAJ,EACKM,KADL,CACW,WADX,EAEKE,KAFL,CAEW,MAFX,EAEmB,MAFnB,EAGKH,KAHL,CAGW,MAHX,EAGmBL,IAAI,YAAJ,CAHnB,EAIKK,KAJL,CAIW,MAJX,EAImBL,IAAI,WAAJ,CAJnB;;AAMAA,QAAI,kBAAJ,EACKM,KADL,CACW,WADX,EAEKE,KAFL,CAEW,MAFX,EAEmB,MAFnB,EAGKH,KAHL,CAGW,MAHX,EAGmBL,IAAI,WAAJ,CAHnB,EAIKK,KAJL,CAIW,MAJX,EAImBL,IAAI,YAAJ,CAJnB;;AAMAA,QAAI,cAAJ,EACKM,KADL,CACW,WADX,EAEKE,KAFL,CAEW,MAFX,EAEmB,MAFnB,EAE2B,QAF3B,EAEqC,MAFrC,EAGKH,KAHL,CAGW,MAHX,EAGmBJ,GACXD,IAAI,qBAAJ,CADW,EAEXA,IAAI,YAAJ,CAFW,EAGX,IAHW,CAHnB,EAOKK,KAPL,CAOW,MAPX,EAOmBJ,GAAGD,IAAI,YAAJ,CAAH,EAAsB,IAAtB,CAPnB,EAQKK,KARL,CAQW,QARX,EAQqBJ,GAAGD,IAAI,YAAJ,CAAH,EAAsB,IAAtB,CARrB,EASKK,KATL,CASW,MATX,EASmBL,IAAI,WAAJ,CATnB;;AAWAA,QAAI,gBAAJ,EACKM,KADL,CACW,WADX,EAEKE,KAFL,CAEW,MAFX,EAEmB,OAFnB,EAE4B,MAF5B,EAGKH,KAHL,CAGW,MAHX,EAGmBJ,GACXD,IAAI,qBAAJ,CADW,EAEXA,IAAI,YAAJ,CAFW,CAHnB,EAMKK,KANL,CAMW,OANX,EAMoBL,IAAI,YAAJ,CANpB,EAOKK,KAPL,CAOW,MAPX,EAOmBL,IAAI,WAAJ,CAPnB;;AASAA,QAAI,mBAAJ,EAAyBM,KAAzB,CAA+B,WAA/B,EAA4CE,KAA5C;;AAEAR,QAAI,aAAJ,EAAmBM,KAAnB,CAAyB,WAAzB;;AAEAN,QAAI,qBAAJ,EACKM,KADL,CACW,UADX,EACuB,aADvB,EAEKE,KAFL,CAEW,IAFX,EAEiB,QAFjB,EAE2B,MAF3B,EAGKH,KAHL,CAGW,IAHX,EAGiBL,IAAI,YAAJ,CAHjB;;AAKAA,QAAI,oBAAJ,EACKM,KADL,CACW,UADX,EACuB,YADvB,EAEKE,KAFL,CAEW,IAFX,EAEiB,QAFjB,EAE2B,MAF3B;;AAIAR,QAAI,qBAAJ,EACKM,KADL,CACW,aADX,EAEKE,KAFL,CAEW,MAFX,EAEmB,cAFnB,EAGKH,KAHL,CAGW,MAHX,EAGmBJ,GAAG,KAAH,EAAU,KAAV,EAAiB,OAAjB,CAHnB,EAIKI,KAJL,CAIW,cAJX,EAI2B,CAACL,IAAI,oBAAJ,CAAD,CAJ3B;;AAMAA,QAAI,oBAAJ,EACKM,KADL,CACW,MADX,EAEKE,KAFL,CAEW,IAFX,EAEiB,MAFjB,EAGKH,KAHL,CAGW,IAHX,EAGiBL,IAAI,SAAJ,CAHjB,EAIKK,KAJL,CAIW,MAJX,EAImBJ,GAAGD,IAAI,YAAJ,CAAH,EAAsB,IAAtB,CAJnB;;AAMA;AACAA,QAAI,YAAJ,EAAkBM,KAAlB,CAAwB,MAAxB,EAAgC,SAAhC;;AAEAN,QAAI,gBAAJ,EAAsBM,KAAtB,CAA4B,YAA5B,EAA0CE,KAA1C;;AAEAR,QAAI,iBAAJ,EACKM,KADL,CACW,YADX,EAEKE,KAFL,CAEW,UAFX,EAGKH,KAHL,CAGW,UAHX,EAGuB,CAACJ,GAAGD,IAAI,YAAJ,CAAH,EAAsB,IAAtB,CAAD,CAHvB;;AAKAA,QAAI,kBAAJ,EACKM,KADL,CACW,YADX,EAEKE,KAFL,CAEW,YAFX,EAGKH,KAHL,CAGW,YAHX,EAGyB,CAACL,IAAI,UAAJ,CAAD,CAHzB;;AAKA;AACAA,QAAI,UAAJ,EACKM,KADL,CACW,MADX,EACmB;AADnB,KAEKE,KAFL,CAEW,MAFX,EAEmB,KAFnB,EAE0B,OAF1B,EAGKH,KAHL,CAGW,MAHX,EAGmBJ,GAAG,MAAH,EAAW,KAAX,EAAkB,KAAlB,CAHnB,EAIKI,KAJL,CAIW,KAJX,EAIkBJ,GAAGD,IAAI,SAAJ,CAAH,EAAmBA,IAAI,YAAJ,CAAnB,CAJlB,EAKKK,KALL,CAKW,OALX,EAKoBL,IAAI,YAAJ,CALpB;;AAOAA,QAAI,oBAAJ,EACKM,KADL,CACW,YADX,EAEKE,KAFL,CAEW,aAFX,EAGKH,KAHL,CAGW,aAHX,EAG0B,CAACL,IAAI,YAAJ,CAAD,CAH1B;;AAKA,QAAIa,gBAAgBZ,GAChB,GADgB,EACX,GADW,EACN,GADM,EACD,GADC,EAEhB,QAFgB,EAEN,MAFM,EAEE,QAFF,CAApB;;AAIAD,QAAI,iBAAJ,EACKM,KADL,CACW,YADX,EAEKE,KAFL,CAEW,UAFX,EAEuB,UAFvB,EAEmC,QAFnC,EAGKH,KAHL,CAGW,UAHX,EAGuBQ,aAHvB,EAIKR,KAJL,CAIW,UAJX,EAIuBL,IAAI,YAAJ,CAJvB;AAKI;AACA;AANJ,KAOKK,KAPL,CAOW,QAPX,EAOqBI,OAPrB,EAO8BN,SAAS,MAAT,CAP9B;;AASA,QAAIW,iBAAiBb,GACjB,IADiB,EACX,IADW,EACL,KADK,EACE,KADF,EAEjB,GAFiB,EAEZ,IAFY,EAEN,GAFM,EAED,IAFC,EAGjB,IAHiB,EAGX,IAHW,EAGL,KAHK,EAIjB,GAJiB,EAIZ,GAJY,EAIP,GAJO,EAIF,GAJE,EAIG,GAJH,EAIQ,IAJR,EAKjB,GALiB,EAKZ;AACL,OANiB,EAMZ,GANY,EAMP,IANO,EAOjB,YAPiB,EAOH,IAPG,CAArB;;AASAD,QAAI,kBAAJ,EACKM,KADL,CACW,YADX,EAEKE,KAFL,CAEW,UAFX,EAEuB,MAFvB,EAE+B,OAF/B,EAGKH,KAHL,CAGW,UAHX,EAGuBS,cAHvB,EAIKT,KAJL,CAIW,MAJX,EAImBL,IAAI,YAAJ,CAJnB,EAKKK,KALL,CAKW,OALX,EAKoBL,IAAI,YAAJ,CALpB;;AAOA,QAAIe,qBAAqBd,GACrB,GADqB,EAChB,IADgB,EACV,IADU,EACJ,IADI,EACE,IADF,EACQ,IADR,EAErB,KAFqB,EAEd,KAFc,EAEP,MAFO,EAGrB,IAHqB,EAGf,IAHe,EAGT,IAHS,CAAzB;;AAKAD,QAAI,sBAAJ,EACKM,KADL,CACW,YADX,EAEKE,KAFL,CAEW,UAFX,EAEuB,MAFvB,EAE+B,OAF/B,EAGKH,KAHL,CAGW,UAHX,EAGuBU,kBAHvB,EAIKV,KAJL,CAIW,MAJX,EAImBL,IAAI,SAAJ,CAJnB,EAKKK,KALL,CAKW,OALX,EAKoBL,IAAI,YAAJ,CALpB;;AAOA,QAAIgB,iBAAiBf,GAAG,IAAH,EAAS,IAAT,CAArB;;AAEAD,QAAI,kBAAJ,EACKM,KADL,CACW,YADX,EAEKE,KAFL,CAEW,UAFX,EAEuB,UAFvB,EAEmC,QAFnC,EAGKH,KAHL,CAGW,UAHX,EAGuBW,cAHvB,EAIKX,KAJL,CAIW,UAJX,EAIuBL,IAAI,YAAJ,CAJvB,EAKKK,KALL,CAKW,QALX,EAKqBI,OALrB;;AAOA,QAAIQ,kBAAkBhB,GAAG,IAAH,EAAS,IAAT,CAAtB;;AAEAD,QAAI,mBAAJ,EACKM,KADL,CACW,YADX,EAEKE,KAFL,CAEW,UAFX,EAEuB,MAFvB,EAE+B,OAF/B,EAGKH,KAHL,CAGW,UAHX,EAGuBY,eAHvB,EAIKZ,KAJL,CAIW,MAJX,EAImBL,IAAI,YAAJ,CAJnB,EAKKK,KALL,CAKW,OALX,EAKoBL,IAAI,YAAJ,CALpB;;AAOAA,QAAI,uBAAJ,EACKM,KADL,CACW,YADX,EAEKE,KAFL,CAEW,MAFX,EAEmB,YAFnB,EAEiC,WAFjC,EAGKH,KAHL,CAGW,MAHX,EAGmBL,IAAI,YAAJ,CAHnB,EAIKK,KAJL,CAIW,YAJX,EAIyBL,IAAI,YAAJ,CAJzB,EAKKK,KALL,CAKW,WALX,EAKwBL,IAAI,YAAJ,CALxB;;AAOAA,QAAI,eAAJ,EACKM,KADL,CACW,YADX,EAEKE,KAFL,CAEW,QAFX,EAEqB,WAFrB,EAGKH,KAHL,CAGW,QAHX,EAGqBL,IAAI,YAAJ,CAHrB;AAII;AACA;AACA;AANJ,KAOKK,KAPL,CAOW,WAPX,EAOwB,CAACL,IAAI,YAAJ,CAAD,CAPxB;;AASAA,QAAI,gBAAJ,EACKM,KADL,CACW,YADX,EAEKE,KAFL,CAEW,QAFX,EAEqB,WAFrB,EAGKH,KAHL,CAGW,QAHX,EAGqBL,IAAI,YAAJ,CAHrB;AAII;AAJJ,KAKKK,KALL,CAKW,WALX,EAKwB,CAACL,IAAI,YAAJ,CAAD,CALxB;;AAOAA,QAAI,kBAAJ,EACKM,KADL,CACW,YADX,EAEKE,KAFL,CAEW,QAFX,EAEqB,UAFrB,EAEiC,UAFjC,EAGKH,KAHL,CAGW,QAHX,EAGqBL,IAAI,YAAJ,CAHrB,EAIKK,KAJL,CAIW,UAJX,EAIuBJ,GAAGD,IAAI,YAAJ,CAAH,EAAsBA,IAAI,YAAJ,CAAtB,CAJvB,EAKKK,KALL,CAKW,UALX,EAKuBI,OALvB,EAKgC,YAAY;AACpC,YAAIS,OAAO,KAAKC,QAAL,CAAcD,IAAzB;AACA,YAAIA,SAAS,SAAT,IACAA,SAAS,kBADT,IAEAA,SAAS,kBAFb,EAEiC;AAC7B,mBAAO,IAAP;AACH;AACD,eAAO,KAAP;AACH,KAbL;;AAeAlB,QAAI,SAAJ,EAAeM,KAAf,CAAqB,MAArB;;AAEAN,QAAI,YAAJ,EACKM,KADL,CACW,MADX,EAEKE,KAFL,CAEW,MAFX,EAEmB,YAFnB,EAGKH,KAHL,CAGW,MAHX,EAGmBJ,GAAGD,IAAI,YAAJ,CAAH,EAAsB,IAAtB,CAHnB,EAIKK,KAJL,CAIW,YAJX,EAIyB,CAACL,IAAI,WAAJ,CAAD,CAJzB;;AAMAA,QAAI,YAAJ;AACI;AADJ,KAEKM,KAFL,CAEW,MAFX,EAEmB,YAFnB,EAEiC,SAFjC,EAGKE,KAHL,CAGW,MAHX,EAIKH,KAJL,CAIW,MAJX,EAImBE,MAJnB,EAKKF,KALL,CAKW,UALX,EAKuBI,OALvB,EAKgCN,SAAS,OAAT,CALhC;;AAOAH,QAAI,SAAJ;AACI;AADJ,KAEKM,KAFL,CAEW,MAFX,EAEmB,YAFnB,EAGKE,KAHL,CAGW,OAHX,EAIKH,KAJL,CAIW,OAJX,EAIoBJ,GAAGM,MAAH,EAAWE,OAAX,EAAoB,IAApB,EAA0BW,MAA1B,EAAkCC,MAAlC,CAJpB,EAKKhB,KALL,CAKW,OALX,EAKoBJ,GAAG;AACfqB,iBAASf,MADM;AAEfgB,eAAOhB;AAFQ,KAAH,EAGb,IAHa,CALpB,EAQc,YAAY;AAClB,YAAI,KAAKiB,KAAL,YAAsBH,MAA1B,EAAkC;AAC9B,gBAAIE,QAAQ,EAAZ;;AAEA,gBAAI,KAAKC,KAAL,CAAWC,UAAf,EAA2BF,SAAS,GAAT;AAC3B,gBAAI,KAAKC,KAAL,CAAWE,SAAf,EAA0BH,SAAS,GAAT;AAC1B,gBAAI,KAAKC,KAAL,CAAWG,MAAf,EAAuBJ,SAAS,GAAT;;AAEvB,mBAAO;AACHD,yBAAS,KAAKE,KAAL,CAAWI,MADjB;AAEHL,uBAAOA;AAFJ,aAAP;AAIH;;AAED,eAAO,IAAP;AACH,KAvBL;;AAyBA;AACAvB,QAAI,SAAJ,EACKM,KADL,CACW,WADX,EAEKD,KAFL,CAEW,OAFX,EAEoBE,MAFpB;AAGI;AACA;AACA;AACA;AACA;AAPJ,KAQKF,KARL,CAQW,SARX,EAQsBI,OARtB,EAQ+BN,SAAS,MAAT,CAR/B,EASKE,KATL,CASW,UATX,EASuBI,OATvB,EASgCN,SAAS,OAAT,CAThC;AAUH,CAnXD","file":"core.js","sourcesContent":["module.exports = function (fork) {\n    var types = fork.use(require(\"../lib/types\"));\n    var Type = types.Type;\n    var def = Type.def;\n    var or = Type.or;\n    var shared = fork.use(require(\"../lib/shared\"));\n    var defaults = shared.defaults;\n    var geq = shared.geq;\n\n    // Abstract supertype of all syntactic entities that are allowed to have a\n    // .loc field.\n    def(\"Printable\")\n        .field(\"loc\", or(\n            def(\"SourceLocation\"),\n            null\n        ), defaults[\"null\"], true);\n\n    def(\"Node\")\n        .bases(\"Printable\")\n        .field(\"type\", String)\n        .field(\"comments\", or(\n            [def(\"Comment\")],\n            null\n        ), defaults[\"null\"], true);\n\n    def(\"SourceLocation\")\n        .build(\"start\", \"end\", \"source\")\n        .field(\"start\", def(\"Position\"))\n        .field(\"end\", def(\"Position\"))\n        .field(\"source\", or(String, null), defaults[\"null\"]);\n\n    def(\"Position\")\n        .build(\"line\", \"column\")\n        .field(\"line\", geq(1))\n        .field(\"column\", geq(0));\n\n    def(\"File\")\n        .bases(\"Node\")\n        .build(\"program\", \"name\")\n        .field(\"program\", def(\"Program\"))\n        .field(\"name\", or(String, null), defaults[\"null\"]);\n\n    def(\"Program\")\n        .bases(\"Node\")\n        .build(\"body\")\n        .field(\"body\", [def(\"Statement\")]);\n\n    def(\"Function\")\n        .bases(\"Node\")\n        .field(\"id\", or(def(\"Identifier\"), null), defaults[\"null\"])\n        .field(\"params\", [def(\"Pattern\")])\n        .field(\"body\", def(\"BlockStatement\"));\n\n    def(\"Statement\").bases(\"Node\");\n\n// The empty .build() here means that an EmptyStatement can be constructed\n// (i.e. it's not abstract) but that it needs no arguments.\n    def(\"EmptyStatement\").bases(\"Statement\").build();\n\n    def(\"BlockStatement\")\n        .bases(\"Statement\")\n        .build(\"body\")\n        .field(\"body\", [def(\"Statement\")]);\n\n    // TODO Figure out how to silently coerce Expressions to\n    // ExpressionStatements where a Statement was expected.\n    def(\"ExpressionStatement\")\n        .bases(\"Statement\")\n        .build(\"expression\")\n        .field(\"expression\", def(\"Expression\"));\n\n    def(\"IfStatement\")\n        .bases(\"Statement\")\n        .build(\"test\", \"consequent\", \"alternate\")\n        .field(\"test\", def(\"Expression\"))\n        .field(\"consequent\", def(\"Statement\"))\n        .field(\"alternate\", or(def(\"Statement\"), null), defaults[\"null\"]);\n\n    def(\"LabeledStatement\")\n        .bases(\"Statement\")\n        .build(\"label\", \"body\")\n        .field(\"label\", def(\"Identifier\"))\n        .field(\"body\", def(\"Statement\"));\n\n    def(\"BreakStatement\")\n        .bases(\"Statement\")\n        .build(\"label\")\n        .field(\"label\", or(def(\"Identifier\"), null), defaults[\"null\"]);\n\n    def(\"ContinueStatement\")\n        .bases(\"Statement\")\n        .build(\"label\")\n        .field(\"label\", or(def(\"Identifier\"), null), defaults[\"null\"]);\n\n    def(\"WithStatement\")\n        .bases(\"Statement\")\n        .build(\"object\", \"body\")\n        .field(\"object\", def(\"Expression\"))\n        .field(\"body\", def(\"Statement\"));\n\n    def(\"SwitchStatement\")\n        .bases(\"Statement\")\n        .build(\"discriminant\", \"cases\", \"lexical\")\n        .field(\"discriminant\", def(\"Expression\"))\n        .field(\"cases\", [def(\"SwitchCase\")])\n        .field(\"lexical\", Boolean, defaults[\"false\"]);\n\n    def(\"ReturnStatement\")\n        .bases(\"Statement\")\n        .build(\"argument\")\n        .field(\"argument\", or(def(\"Expression\"), null));\n\n    def(\"ThrowStatement\")\n        .bases(\"Statement\")\n        .build(\"argument\")\n        .field(\"argument\", def(\"Expression\"));\n\n    def(\"TryStatement\")\n        .bases(\"Statement\")\n        .build(\"block\", \"handler\", \"finalizer\")\n        .field(\"block\", def(\"BlockStatement\"))\n        .field(\"handler\", or(def(\"CatchClause\"), null), function () {\n            return this.handlers && this.handlers[0] || null;\n        })\n        .field(\"handlers\", [def(\"CatchClause\")], function () {\n            return this.handler ? [this.handler] : [];\n        }, true) // Indicates this field is hidden from eachField iteration.\n        .field(\"guardedHandlers\", [def(\"CatchClause\")], defaults.emptyArray)\n        .field(\"finalizer\", or(def(\"BlockStatement\"), null), defaults[\"null\"]);\n\n    def(\"CatchClause\")\n        .bases(\"Node\")\n        .build(\"param\", \"guard\", \"body\")\n        // https://github.com/tc39/proposal-optional-catch-binding\n        .field(\"param\", or(def(\"Pattern\"), null), defaults[\"null\"])\n        .field(\"guard\", or(def(\"Expression\"), null), defaults[\"null\"])\n        .field(\"body\", def(\"BlockStatement\"));\n\n    def(\"WhileStatement\")\n        .bases(\"Statement\")\n        .build(\"test\", \"body\")\n        .field(\"test\", def(\"Expression\"))\n        .field(\"body\", def(\"Statement\"));\n\n    def(\"DoWhileStatement\")\n        .bases(\"Statement\")\n        .build(\"body\", \"test\")\n        .field(\"body\", def(\"Statement\"))\n        .field(\"test\", def(\"Expression\"));\n\n    def(\"ForStatement\")\n        .bases(\"Statement\")\n        .build(\"init\", \"test\", \"update\", \"body\")\n        .field(\"init\", or(\n            def(\"VariableDeclaration\"),\n            def(\"Expression\"),\n            null))\n        .field(\"test\", or(def(\"Expression\"), null))\n        .field(\"update\", or(def(\"Expression\"), null))\n        .field(\"body\", def(\"Statement\"));\n\n    def(\"ForInStatement\")\n        .bases(\"Statement\")\n        .build(\"left\", \"right\", \"body\")\n        .field(\"left\", or(\n            def(\"VariableDeclaration\"),\n            def(\"Expression\")))\n        .field(\"right\", def(\"Expression\"))\n        .field(\"body\", def(\"Statement\"));\n\n    def(\"DebuggerStatement\").bases(\"Statement\").build();\n\n    def(\"Declaration\").bases(\"Statement\");\n\n    def(\"FunctionDeclaration\")\n        .bases(\"Function\", \"Declaration\")\n        .build(\"id\", \"params\", \"body\")\n        .field(\"id\", def(\"Identifier\"));\n\n    def(\"FunctionExpression\")\n        .bases(\"Function\", \"Expression\")\n        .build(\"id\", \"params\", \"body\");\n\n    def(\"VariableDeclaration\")\n        .bases(\"Declaration\")\n        .build(\"kind\", \"declarations\")\n        .field(\"kind\", or(\"var\", \"let\", \"const\"))\n        .field(\"declarations\", [def(\"VariableDeclarator\")]);\n\n    def(\"VariableDeclarator\")\n        .bases(\"Node\")\n        .build(\"id\", \"init\")\n        .field(\"id\", def(\"Pattern\"))\n        .field(\"init\", or(def(\"Expression\"), null));\n\n    // TODO Are all Expressions really Patterns?\n    def(\"Expression\").bases(\"Node\", \"Pattern\");\n\n    def(\"ThisExpression\").bases(\"Expression\").build();\n\n    def(\"ArrayExpression\")\n        .bases(\"Expression\")\n        .build(\"elements\")\n        .field(\"elements\", [or(def(\"Expression\"), null)]);\n\n    def(\"ObjectExpression\")\n        .bases(\"Expression\")\n        .build(\"properties\")\n        .field(\"properties\", [def(\"Property\")]);\n\n    // TODO Not in the Mozilla Parser API, but used by Esprima.\n    def(\"Property\")\n        .bases(\"Node\") // Want to be able to visit Property Nodes.\n        .build(\"kind\", \"key\", \"value\")\n        .field(\"kind\", or(\"init\", \"get\", \"set\"))\n        .field(\"key\", or(def(\"Literal\"), def(\"Identifier\")))\n        .field(\"value\", def(\"Expression\"));\n\n    def(\"SequenceExpression\")\n        .bases(\"Expression\")\n        .build(\"expressions\")\n        .field(\"expressions\", [def(\"Expression\")]);\n\n    var UnaryOperator = or(\n        \"-\", \"+\", \"!\", \"~\",\n        \"typeof\", \"void\", \"delete\");\n\n    def(\"UnaryExpression\")\n        .bases(\"Expression\")\n        .build(\"operator\", \"argument\", \"prefix\")\n        .field(\"operator\", UnaryOperator)\n        .field(\"argument\", def(\"Expression\"))\n        // Esprima doesn't bother with this field, presumably because it's\n        // always true for unary operators.\n        .field(\"prefix\", Boolean, defaults[\"true\"]);\n\n    var BinaryOperator = or(\n        \"==\", \"!=\", \"===\", \"!==\",\n        \"<\", \"<=\", \">\", \">=\",\n        \"<<\", \">>\", \">>>\",\n        \"+\", \"-\", \"*\", \"/\", \"%\", \"**\",\n        \"&\", // TODO Missing from the Parser API.\n        \"|\", \"^\", \"in\",\n        \"instanceof\", \"..\");\n\n    def(\"BinaryExpression\")\n        .bases(\"Expression\")\n        .build(\"operator\", \"left\", \"right\")\n        .field(\"operator\", BinaryOperator)\n        .field(\"left\", def(\"Expression\"))\n        .field(\"right\", def(\"Expression\"));\n\n    var AssignmentOperator = or(\n        \"=\", \"+=\", \"-=\", \"*=\", \"/=\", \"%=\",\n        \"<<=\", \">>=\", \">>>=\",\n        \"|=\", \"^=\", \"&=\");\n\n    def(\"AssignmentExpression\")\n        .bases(\"Expression\")\n        .build(\"operator\", \"left\", \"right\")\n        .field(\"operator\", AssignmentOperator)\n        .field(\"left\", def(\"Pattern\"))\n        .field(\"right\", def(\"Expression\"));\n\n    var UpdateOperator = or(\"++\", \"--\");\n\n    def(\"UpdateExpression\")\n        .bases(\"Expression\")\n        .build(\"operator\", \"argument\", \"prefix\")\n        .field(\"operator\", UpdateOperator)\n        .field(\"argument\", def(\"Expression\"))\n        .field(\"prefix\", Boolean);\n\n    var LogicalOperator = or(\"||\", \"&&\");\n\n    def(\"LogicalExpression\")\n        .bases(\"Expression\")\n        .build(\"operator\", \"left\", \"right\")\n        .field(\"operator\", LogicalOperator)\n        .field(\"left\", def(\"Expression\"))\n        .field(\"right\", def(\"Expression\"));\n\n    def(\"ConditionalExpression\")\n        .bases(\"Expression\")\n        .build(\"test\", \"consequent\", \"alternate\")\n        .field(\"test\", def(\"Expression\"))\n        .field(\"consequent\", def(\"Expression\"))\n        .field(\"alternate\", def(\"Expression\"));\n\n    def(\"NewExpression\")\n        .bases(\"Expression\")\n        .build(\"callee\", \"arguments\")\n        .field(\"callee\", def(\"Expression\"))\n        // The Mozilla Parser API gives this type as [or(def(\"Expression\"),\n        // null)], but null values don't really make sense at the call site.\n        // TODO Report this nonsense.\n        .field(\"arguments\", [def(\"Expression\")]);\n\n    def(\"CallExpression\")\n        .bases(\"Expression\")\n        .build(\"callee\", \"arguments\")\n        .field(\"callee\", def(\"Expression\"))\n        // See comment for NewExpression above.\n        .field(\"arguments\", [def(\"Expression\")]);\n\n    def(\"MemberExpression\")\n        .bases(\"Expression\")\n        .build(\"object\", \"property\", \"computed\")\n        .field(\"object\", def(\"Expression\"))\n        .field(\"property\", or(def(\"Identifier\"), def(\"Expression\")))\n        .field(\"computed\", Boolean, function () {\n            var type = this.property.type;\n            if (type === 'Literal' ||\n                type === 'MemberExpression' ||\n                type === 'BinaryExpression') {\n                return true;\n            }\n            return false;\n        });\n\n    def(\"Pattern\").bases(\"Node\");\n\n    def(\"SwitchCase\")\n        .bases(\"Node\")\n        .build(\"test\", \"consequent\")\n        .field(\"test\", or(def(\"Expression\"), null))\n        .field(\"consequent\", [def(\"Statement\")]);\n\n    def(\"Identifier\")\n        // But aren't Expressions and Patterns already Nodes? TODO Report this.\n        .bases(\"Node\", \"Expression\", \"Pattern\")\n        .build(\"name\")\n        .field(\"name\", String)\n        .field(\"optional\", Boolean, defaults[\"false\"]);\n\n    def(\"Literal\")\n        // But aren't Expressions already Nodes? TODO Report this.\n        .bases(\"Node\", \"Expression\")\n        .build(\"value\")\n        .field(\"value\", or(String, Boolean, null, Number, RegExp))\n        .field(\"regex\", or({\n            pattern: String,\n            flags: String\n        }, null), function () {\n            if (this.value instanceof RegExp) {\n                var flags = \"\";\n\n                if (this.value.ignoreCase) flags += \"i\";\n                if (this.value.multiline) flags += \"m\";\n                if (this.value.global) flags += \"g\";\n\n                return {\n                    pattern: this.value.source,\n                    flags: flags\n                };\n            }\n\n            return null;\n        });\n\n    // Abstract (non-buildable) comment supertype. Not a Node.\n    def(\"Comment\")\n        .bases(\"Printable\")\n        .field(\"value\", String)\n        // A .leading comment comes before the node, whereas a .trailing\n        // comment comes after it. These two fields should not both be true,\n        // but they might both be false when the comment falls inside a node\n        // and the node has no children for the comment to lead or trail,\n        // e.g. { /*dangling*/ }.\n        .field(\"leading\", Boolean, defaults[\"true\"])\n        .field(\"trailing\", Boolean, defaults[\"false\"]);\n};\n"]}