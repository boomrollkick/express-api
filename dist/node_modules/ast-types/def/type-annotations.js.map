{"version":3,"sources":["../../../../src/node_modules/ast-types/def/type-annotations.js"],"names":["module","exports","fork","types","use","require","def","Type","or","defaults","TypeAnnotation","TypeParamDecl","field","build","Boolean","forEach","typeName","emptyArray"],"mappings":";;AAAA;;;;;AAKAA,OAAOC,OAAP,GAAiB,UAAUC,IAAV,EAAgB;AAC/B,MAAIC,QAAQD,KAAKE,GAAL,CAASC,QAAQ,cAAR,CAAT,CAAZ;AACA,MAAIC,MAAMH,MAAMI,IAAN,CAAWD,GAArB;AACA,MAAIE,KAAKL,MAAMI,IAAN,CAAWC,EAApB;AACA,MAAIC,WAAWP,KAAKE,GAAL,CAASC,QAAQ,eAAR,CAAT,EAAmCI,QAAlD;;AAEA,MAAIC,iBAAiBF,GACnBF,IAAI,gBAAJ,CADmB,EAEnBA,IAAI,kBAAJ,CAFmB,EAGnB,IAHmB,CAArB;;AAMA,MAAIK,gBAAgBH,GAClBF,IAAI,0BAAJ,CADkB,EAElBA,IAAI,4BAAJ,CAFkB,EAGlB,IAHkB,CAApB;;AAMAA,MAAI,YAAJ,EACGM,KADH,CACS,gBADT,EAC2BF,cAD3B,EAC2CD,SAAS,MAAT,CAD3C;;AAGAH,MAAI,eAAJ,EACGM,KADH,CACS,gBADT,EAC2BF,cAD3B,EAC2CD,SAAS,MAAT,CAD3C;;AAGAH,MAAI,UAAJ,EACGM,KADH,CACS,YADT,EACuBF,cADvB,EACuCD,SAAS,MAAT,CADvC,EAEGG,KAFH,CAES,gBAFT,EAE2BD,aAF3B,EAE0CF,SAAS,MAAT,CAF1C;;AAIAH,MAAI,eAAJ,EACGO,KADH,CACS,KADT,EACgB,OADhB,EACyB,gBADzB,EAC2C,QAD3C,EAEGD,KAFH,CAES,OAFT,EAEkBJ,GAAGF,IAAI,YAAJ,CAAH,EAAsB,IAAtB,CAFlB,EAGGM,KAHH,CAGS,QAHT,EAGmBE,OAHnB,EAG4BL,SAAS,OAAT,CAH5B,EAIGG,KAJH,CAIS,gBAJT,EAI2BF,cAJ3B,EAI2CD,SAAS,MAAT,CAJ3C;;AAMA,GAAC,kBAAD,EACE,iBADF,EAEEM,OAFF,CAEU,oBAAY;AACpBT,QAAIU,QAAJ,EACGJ,KADH,CACS,gBADT,EAC2BD,aAD3B,EAC0CF,SAAS,MAAT,CAD1C,EAEGG,KAFH,CAES,qBAFT,EAGSJ,GAAGF,IAAI,4BAAJ,CAAH,EACGA,IAAI,8BAAJ,CADH,EAEG,IAFH,CAHT,EAMSG,SAAS,MAAT,CANT;AAOD,GAVD;;AAYA,GAAC,kBAAD,EACC,iBADD,EAEEM,OAFF,CAEU,oBAAY;AACpBT,QAAIU,QAAJ,EACGJ,KADH,CACS,YADT,EAESJ,GAAG,CAACF,IAAI,iBAAJ,CAAD,CAAH,EACG,CAACA,IAAI,+BAAJ,CAAD,CADH,CAFT,EAISG,SAASQ,UAJlB;AAKD,GARD;AASD,CAvDD","file":"type-annotations.js","sourcesContent":["/**\n * Type annotation defs shared between Flow and TypeScript.\n * These defs could not be defined in ./flow.js or ./typescript.js directly\n * because they use the same name.\n */\nmodule.exports = function (fork) {\n  var types = fork.use(require(\"../lib/types\"));\n  var def = types.Type.def;\n  var or = types.Type.or;\n  var defaults = fork.use(require(\"../lib/shared\")).defaults;\n\n  var TypeAnnotation = or(\n    def(\"TypeAnnotation\"),\n    def(\"TSTypeAnnotation\"),\n    null\n  );\n\n  var TypeParamDecl = or(\n    def(\"TypeParameterDeclaration\"),\n    def(\"TSTypeParameterDeclaration\"),\n    null\n  );\n\n  def(\"Identifier\")\n    .field(\"typeAnnotation\", TypeAnnotation, defaults[\"null\"]);\n\n  def(\"ObjectPattern\")\n    .field(\"typeAnnotation\", TypeAnnotation, defaults[\"null\"]);\n\n  def(\"Function\")\n    .field(\"returnType\", TypeAnnotation, defaults[\"null\"])\n    .field(\"typeParameters\", TypeParamDecl, defaults[\"null\"]);\n\n  def(\"ClassProperty\")\n    .build(\"key\", \"value\", \"typeAnnotation\", \"static\")\n    .field(\"value\", or(def(\"Expression\"), null))\n    .field(\"static\", Boolean, defaults[\"false\"])\n    .field(\"typeAnnotation\", TypeAnnotation, defaults[\"null\"]);\n\n  [\"ClassDeclaration\",\n    \"ClassExpression\",\n  ].forEach(typeName => {\n    def(typeName)\n      .field(\"typeParameters\", TypeParamDecl, defaults[\"null\"])\n      .field(\"superTypeParameters\",\n             or(def(\"TypeParameterInstantiation\"),\n                def(\"TSTypeParameterInstantiation\"),\n                null),\n             defaults[\"null\"]);\n  });\n\n  [\"ClassDeclaration\",\n   \"ClassExpression\",\n  ].forEach(typeName => {\n    def(typeName)\n      .field(\"implements\",\n             or([def(\"ClassImplements\")],\n                [def(\"TSExpressionWithTypeArguments\")]),\n             defaults.emptyArray);\n  });\n};\n"]}