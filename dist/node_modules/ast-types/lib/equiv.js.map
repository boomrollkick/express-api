{"version":3,"sources":["../../../../src/node_modules/ast-types/lib/equiv.js"],"names":["module","exports","fork","types","use","require","getFieldNames","getFieldValue","isArray","builtInTypes","array","isObject","object","isDate","Date","isRegExp","RegExp","hasOwn","Object","prototype","hasOwnProperty","astNodesAreEquivalent","a","b","problemPath","check","length","areEquivalent","assert","Error","map","subscriptForProperty","join","property","test","JSON","stringify","arraysAreEquivalent","objectsAreEquivalent","source","global","multiline","ignoreCase","aLength","push","i","problemPathTail","pop","type","aNames","aNameCount","bNames","bNameCount","name","aChild","bChild","seenNames","create","call"],"mappings":"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","file":"equiv.js","sourcesContent":["module.exports = function (fork) {\n    var types = fork.use(require('../lib/types'));\n    var getFieldNames = types.getFieldNames;\n    var getFieldValue = types.getFieldValue;\n    var isArray = types.builtInTypes.array;\n    var isObject = types.builtInTypes.object;\n    var isDate = types.builtInTypes.Date;\n    var isRegExp = types.builtInTypes.RegExp;\n    var hasOwn = Object.prototype.hasOwnProperty;\n\n    function astNodesAreEquivalent(a, b, problemPath) {\n        if (isArray.check(problemPath)) {\n            problemPath.length = 0;\n        } else {\n            problemPath = null;\n        }\n\n        return areEquivalent(a, b, problemPath);\n    }\n\n    astNodesAreEquivalent.assert = function (a, b) {\n        var problemPath = [];\n        if (!astNodesAreEquivalent(a, b, problemPath)) {\n            if (problemPath.length === 0) {\n                if (a !== b) {\n                    throw new Error(\"Nodes must be equal\");\n                }\n            } else {\n                throw new Error(\n                  \"Nodes differ in the following path: \" +\n                  problemPath.map(subscriptForProperty).join(\"\")\n                );\n            }\n        }\n    };\n\n    function subscriptForProperty(property) {\n        if (/[_$a-z][_$a-z0-9]*/i.test(property)) {\n            return \".\" + property;\n        }\n        return \"[\" + JSON.stringify(property) + \"]\";\n    }\n\n    function areEquivalent(a, b, problemPath) {\n        if (a === b) {\n            return true;\n        }\n\n        if (isArray.check(a)) {\n            return arraysAreEquivalent(a, b, problemPath);\n        }\n\n        if (isObject.check(a)) {\n            return objectsAreEquivalent(a, b, problemPath);\n        }\n\n        if (isDate.check(a)) {\n            return isDate.check(b) && (+a === +b);\n        }\n\n        if (isRegExp.check(a)) {\n            return isRegExp.check(b) && (\n                a.source === b.source &&\n                a.global === b.global &&\n                a.multiline === b.multiline &&\n                a.ignoreCase === b.ignoreCase\n              );\n        }\n\n        return a == b;\n    }\n\n    function arraysAreEquivalent(a, b, problemPath) {\n        isArray.assert(a);\n        var aLength = a.length;\n\n        if (!isArray.check(b) || b.length !== aLength) {\n            if (problemPath) {\n                problemPath.push(\"length\");\n            }\n            return false;\n        }\n\n        for (var i = 0; i < aLength; ++i) {\n            if (problemPath) {\n                problemPath.push(i);\n            }\n\n            if (i in a !== i in b) {\n                return false;\n            }\n\n            if (!areEquivalent(a[i], b[i], problemPath)) {\n                return false;\n            }\n\n            if (problemPath) {\n                var problemPathTail = problemPath.pop();\n                if (problemPathTail !== i) {\n                    throw new Error(\"\" + problemPathTail);\n                }\n            }\n        }\n\n        return true;\n    }\n\n    function objectsAreEquivalent(a, b, problemPath) {\n        isObject.assert(a);\n        if (!isObject.check(b)) {\n            return false;\n        }\n\n        // Fast path for a common property of AST nodes.\n        if (a.type !== b.type) {\n            if (problemPath) {\n                problemPath.push(\"type\");\n            }\n            return false;\n        }\n\n        var aNames = getFieldNames(a);\n        var aNameCount = aNames.length;\n\n        var bNames = getFieldNames(b);\n        var bNameCount = bNames.length;\n\n        if (aNameCount === bNameCount) {\n            for (var i = 0; i < aNameCount; ++i) {\n                var name = aNames[i];\n                var aChild = getFieldValue(a, name);\n                var bChild = getFieldValue(b, name);\n\n                if (problemPath) {\n                    problemPath.push(name);\n                }\n\n                if (!areEquivalent(aChild, bChild, problemPath)) {\n                    return false;\n                }\n\n                if (problemPath) {\n                    var problemPathTail = problemPath.pop();\n                    if (problemPathTail !== name) {\n                        throw new Error(\"\" + problemPathTail);\n                    }\n                }\n            }\n\n            return true;\n        }\n\n        if (!problemPath) {\n            return false;\n        }\n\n        // Since aNameCount !== bNameCount, we need to find some name that's\n        // missing in aNames but present in bNames, or vice-versa.\n\n        var seenNames = Object.create(null);\n\n        for (i = 0; i < aNameCount; ++i) {\n            seenNames[aNames[i]] = true;\n        }\n\n        for (i = 0; i < bNameCount; ++i) {\n            name = bNames[i];\n\n            if (!hasOwn.call(seenNames, name)) {\n                problemPath.push(name);\n                return false;\n            }\n\n            delete seenNames[name];\n        }\n\n        for (name in seenNames) {\n            problemPath.push(name);\n            break;\n        }\n\n        return false;\n    }\n    \n    return astNodesAreEquivalent;\n};\n"]}