{"version":3,"sources":["../../../../src/node_modules/ast-types/lib/path-visitor.js"],"names":["hasOwn","Object","prototype","hasOwnProperty","module","exports","fork","types","use","require","NodePath","Printable","namedTypes","isArray","builtInTypes","array","isObject","object","isFunction","function","undefined","PathVisitor","Error","_reusableContextStack","_methodNameTable","computeMethodNameTable","_shouldVisitComments","call","Context","makeContextConstructor","_visiting","_changeReported","visitor","typeNames","create","methodName","test","slice","length","supertypeTable","computeSupertypeLookupTable","methodNameTable","keys","typeNameCount","i","typeName","check","fromMethodsObject","methods","Visitor","Vp","PVp","constructor","extend","assert","visit","target","source","property","node","_abortRequested","argc","arguments","args","Array","root","get","reset","apply","visitWithoutReset","didNotThrow","value","AbortRequest","abort","request","cancel","path","type","context","acquireContext","invokeVisitorMethod","releaseContext","visitChildren","each","childNames","getFieldNames","comments","indexOf","push","childCount","childPaths","childName","getFieldValue","pop","currentPath","reportChanged","wasChangeReported","defineProperty","writable","enumerable","configurable","needToCallTraverse","seal","Cp","sharedContextProtoMethods","result","replace","traverse","newVisitor"],"mappings":"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","file":"path-visitor.js","sourcesContent":["var hasOwn = Object.prototype.hasOwnProperty;\n\nmodule.exports = function (fork) {\n    var types = fork.use(require(\"./types\"));\n    var NodePath = fork.use(require(\"./node-path\"));\n    var Printable = types.namedTypes.Printable;\n    var isArray = types.builtInTypes.array;\n    var isObject = types.builtInTypes.object;\n    var isFunction = types.builtInTypes.function;\n    var undefined;\n\n    function PathVisitor() {\n        if (!(this instanceof PathVisitor)) {\n            throw new Error(\n              \"PathVisitor constructor cannot be invoked without 'new'\"\n            );\n        }\n\n        // Permanent state.\n        this._reusableContextStack = [];\n\n        this._methodNameTable = computeMethodNameTable(this);\n        this._shouldVisitComments =\n          hasOwn.call(this._methodNameTable, \"Block\") ||\n          hasOwn.call(this._methodNameTable, \"Line\");\n\n        this.Context = makeContextConstructor(this);\n\n        // State reset every time PathVisitor.prototype.visit is called.\n        this._visiting = false;\n        this._changeReported = false;\n    }\n\n    function computeMethodNameTable(visitor) {\n        var typeNames = Object.create(null);\n\n        for (var methodName in visitor) {\n            if (/^visit[A-Z]/.test(methodName)) {\n                typeNames[methodName.slice(\"visit\".length)] = true;\n            }\n        }\n\n        var supertypeTable = types.computeSupertypeLookupTable(typeNames);\n        var methodNameTable = Object.create(null);\n\n        var typeNames = Object.keys(supertypeTable);\n        var typeNameCount = typeNames.length;\n        for (var i = 0; i < typeNameCount; ++i) {\n            var typeName = typeNames[i];\n            methodName = \"visit\" + supertypeTable[typeName];\n            if (isFunction.check(visitor[methodName])) {\n                methodNameTable[typeName] = methodName;\n            }\n        }\n\n        return methodNameTable;\n    }\n\n    PathVisitor.fromMethodsObject = function fromMethodsObject(methods) {\n        if (methods instanceof PathVisitor) {\n            return methods;\n        }\n\n        if (!isObject.check(methods)) {\n            // An empty visitor?\n            return new PathVisitor;\n        }\n\n        function Visitor() {\n            if (!(this instanceof Visitor)) {\n                throw new Error(\n                  \"Visitor constructor cannot be invoked without 'new'\"\n                );\n            }\n            PathVisitor.call(this);\n        }\n\n        var Vp = Visitor.prototype = Object.create(PVp);\n        Vp.constructor = Visitor;\n\n        extend(Vp, methods);\n        extend(Visitor, PathVisitor);\n\n        isFunction.assert(Visitor.fromMethodsObject);\n        isFunction.assert(Visitor.visit);\n\n        return new Visitor;\n    };\n\n    function extend(target, source) {\n        for (var property in source) {\n            if (hasOwn.call(source, property)) {\n                target[property] = source[property];\n            }\n        }\n\n        return target;\n    }\n\n    PathVisitor.visit = function visit(node, methods) {\n        return PathVisitor.fromMethodsObject(methods).visit(node);\n    };\n\n    var PVp = PathVisitor.prototype;\n\n    PVp.visit = function () {\n        if (this._visiting) {\n            throw new Error(\n              \"Recursively calling visitor.visit(path) resets visitor state. \" +\n              \"Try this.visit(path) or this.traverse(path) instead.\"\n            );\n        }\n\n        // Private state that needs to be reset before every traversal.\n        this._visiting = true;\n        this._changeReported = false;\n        this._abortRequested = false;\n\n        var argc = arguments.length;\n        var args = new Array(argc)\n        for (var i = 0; i < argc; ++i) {\n            args[i] = arguments[i];\n        }\n\n        if (!(args[0] instanceof NodePath)) {\n            args[0] = new NodePath({root: args[0]}).get(\"root\");\n        }\n\n        // Called with the same arguments as .visit.\n        this.reset.apply(this, args);\n\n        try {\n            var root = this.visitWithoutReset(args[0]);\n            var didNotThrow = true;\n        } finally {\n            this._visiting = false;\n\n            if (!didNotThrow && this._abortRequested) {\n                // If this.visitWithoutReset threw an exception and\n                // this._abortRequested was set to true, return the root of\n                // the AST instead of letting the exception propagate, so that\n                // client code does not have to provide a try-catch block to\n                // intercept the AbortRequest exception.  Other kinds of\n                // exceptions will propagate without being intercepted and\n                // rethrown by a catch block, so their stacks will accurately\n                // reflect the original throwing context.\n                return args[0].value;\n            }\n        }\n\n        return root;\n    };\n\n    PVp.AbortRequest = function AbortRequest() {};\n    PVp.abort = function () {\n        var visitor = this;\n        visitor._abortRequested = true;\n        var request = new visitor.AbortRequest();\n\n        // If you decide to catch this exception and stop it from propagating,\n        // make sure to call its cancel method to avoid silencing other\n        // exceptions that might be thrown later in the traversal.\n        request.cancel = function () {\n            visitor._abortRequested = false;\n        };\n\n        throw request;\n    };\n\n    PVp.reset = function (path/*, additional arguments */) {\n        // Empty stub; may be reassigned or overridden by subclasses.\n    };\n\n    PVp.visitWithoutReset = function (path) {\n        if (this instanceof this.Context) {\n            // Since this.Context.prototype === this, there's a chance we\n            // might accidentally call context.visitWithoutReset. If that\n            // happens, re-invoke the method against context.visitor.\n            return this.visitor.visitWithoutReset(path);\n        }\n\n        if (!(path instanceof NodePath)) {\n            throw new Error(\"\");\n        }\n\n        var value = path.value;\n\n        var methodName = value &&\n          typeof value === \"object\" &&\n          typeof value.type === \"string\" &&\n          this._methodNameTable[value.type];\n\n        if (methodName) {\n            var context = this.acquireContext(path);\n            try {\n                return context.invokeVisitorMethod(methodName);\n            } finally {\n                this.releaseContext(context);\n            }\n\n        } else {\n            // If there was no visitor method to call, visit the children of\n            // this node generically.\n            return visitChildren(path, this);\n        }\n    };\n\n    function visitChildren(path, visitor) {\n        if (!(path instanceof NodePath)) {\n            throw new Error(\"\");\n        }\n        if (!(visitor instanceof PathVisitor)) {\n            throw new Error(\"\");\n        }\n\n        var value = path.value;\n\n        if (isArray.check(value)) {\n            path.each(visitor.visitWithoutReset, visitor);\n        } else if (!isObject.check(value)) {\n            // No children to visit.\n        } else {\n            var childNames = types.getFieldNames(value);\n\n            // The .comments field of the Node type is hidden, so we only\n            // visit it if the visitor defines visitBlock or visitLine, and\n            // value.comments is defined.\n            if (visitor._shouldVisitComments &&\n              value.comments &&\n              childNames.indexOf(\"comments\") < 0) {\n                childNames.push(\"comments\");\n            }\n\n            var childCount = childNames.length;\n            var childPaths = [];\n\n            for (var i = 0; i < childCount; ++i) {\n                var childName = childNames[i];\n                if (!hasOwn.call(value, childName)) {\n                    value[childName] = types.getFieldValue(value, childName);\n                }\n                childPaths.push(path.get(childName));\n            }\n\n            for (var i = 0; i < childCount; ++i) {\n                visitor.visitWithoutReset(childPaths[i]);\n            }\n        }\n\n        return path.value;\n    }\n\n    PVp.acquireContext = function (path) {\n        if (this._reusableContextStack.length === 0) {\n            return new this.Context(path);\n        }\n        return this._reusableContextStack.pop().reset(path);\n    };\n\n    PVp.releaseContext = function (context) {\n        if (!(context instanceof this.Context)) {\n            throw new Error(\"\");\n        }\n        this._reusableContextStack.push(context);\n        context.currentPath = null;\n    };\n\n    PVp.reportChanged = function () {\n        this._changeReported = true;\n    };\n\n    PVp.wasChangeReported = function () {\n        return this._changeReported;\n    };\n\n    function makeContextConstructor(visitor) {\n        function Context(path) {\n            if (!(this instanceof Context)) {\n                throw new Error(\"\");\n            }\n            if (!(this instanceof PathVisitor)) {\n                throw new Error(\"\");\n            }\n            if (!(path instanceof NodePath)) {\n                throw new Error(\"\");\n            }\n\n            Object.defineProperty(this, \"visitor\", {\n                value: visitor,\n                writable: false,\n                enumerable: true,\n                configurable: false\n            });\n\n            this.currentPath = path;\n            this.needToCallTraverse = true;\n\n            Object.seal(this);\n        }\n\n        if (!(visitor instanceof PathVisitor)) {\n            throw new Error(\"\");\n        }\n\n        // Note that the visitor object is the prototype of Context.prototype,\n        // so all visitor methods are inherited by context objects.\n        var Cp = Context.prototype = Object.create(visitor);\n\n        Cp.constructor = Context;\n        extend(Cp, sharedContextProtoMethods);\n\n        return Context;\n    }\n\n// Every PathVisitor has a different this.Context constructor and\n// this.Context.prototype object, but those prototypes can all use the\n// same reset, invokeVisitorMethod, and traverse function objects.\n    var sharedContextProtoMethods = Object.create(null);\n\n    sharedContextProtoMethods.reset =\n      function reset(path) {\n          if (!(this instanceof this.Context)) {\n              throw new Error(\"\");\n          }\n          if (!(path instanceof NodePath)) {\n              throw new Error(\"\");\n          }\n\n          this.currentPath = path;\n          this.needToCallTraverse = true;\n\n          return this;\n      };\n\n    sharedContextProtoMethods.invokeVisitorMethod =\n      function invokeVisitorMethod(methodName) {\n          if (!(this instanceof this.Context)) {\n              throw new Error(\"\");\n          }\n          if (!(this.currentPath instanceof NodePath)) {\n              throw new Error(\"\");\n          }\n\n          var result = this.visitor[methodName].call(this, this.currentPath);\n\n          if (result === false) {\n              // Visitor methods return false to indicate that they have handled\n              // their own traversal needs, and we should not complain if\n              // this.needToCallTraverse is still true.\n              this.needToCallTraverse = false;\n\n          } else if (result !== undefined) {\n              // Any other non-undefined value returned from the visitor method\n              // is interpreted as a replacement value.\n              this.currentPath = this.currentPath.replace(result)[0];\n\n              if (this.needToCallTraverse) {\n                  // If this.traverse still hasn't been called, visit the\n                  // children of the replacement node.\n                  this.traverse(this.currentPath);\n              }\n          }\n\n          if (this.needToCallTraverse !== false) {\n              throw new Error(\n                \"Must either call this.traverse or return false in \" + methodName\n              );\n          }\n\n          var path = this.currentPath;\n          return path && path.value;\n      };\n\n    sharedContextProtoMethods.traverse =\n      function traverse(path, newVisitor) {\n          if (!(this instanceof this.Context)) {\n              throw new Error(\"\");\n          }\n          if (!(path instanceof NodePath)) {\n              throw new Error(\"\");\n          }\n          if (!(this.currentPath instanceof NodePath)) {\n              throw new Error(\"\");\n          }\n\n          this.needToCallTraverse = false;\n\n          return visitChildren(path, PathVisitor.fromMethodsObject(\n            newVisitor || this.visitor\n          ));\n      };\n\n    sharedContextProtoMethods.visit =\n      function visit(path, newVisitor) {\n          if (!(this instanceof this.Context)) {\n              throw new Error(\"\");\n          }\n          if (!(path instanceof NodePath)) {\n              throw new Error(\"\");\n          }\n          if (!(this.currentPath instanceof NodePath)) {\n              throw new Error(\"\");\n          }\n\n          this.needToCallTraverse = false;\n\n          return PathVisitor.fromMethodsObject(\n            newVisitor || this.visitor\n          ).visitWithoutReset(path);\n      };\n\n    sharedContextProtoMethods.reportChanged = function reportChanged() {\n        this.visitor.reportChanged();\n    };\n\n    sharedContextProtoMethods.abort = function abort() {\n        this.needToCallTraverse = false;\n        this.visitor.abort();\n    };\n\n    return PathVisitor;\n};\n"]}