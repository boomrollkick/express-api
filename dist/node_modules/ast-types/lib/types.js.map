{"version":3,"sources":["../../../../src/node_modules/ast-types/lib/types.js"],"names":["Ap","Array","prototype","slice","map","each","forEach","Op","Object","objToStr","toString","funObjStr","call","strObjStr","hasOwn","hasOwnProperty","module","exports","Type","check","name","self","Error","nameObjStr","defineProperties","value","deep","result","Tp","assert","str","shallowStringify","isObject","keys","key","join","isArray","JSON","stringify","isString","isFunction","builtInCtorFns","builtInCtorTypes","builtInTypes","defBuiltInType","example","objStr","type","constructor","push","isRegExp","isDate","Date","isNumber","isBoolean","isNull","isUndefined","toType","from","Def","fromArray","fromObject","bicfIndex","indexOf","or","types","len","arguments","length","i","arr","arrayOf","elemType","every","elem","obj","fields","Field","field","defaultFn","hidden","properties","Fp","getValue","def","typeName","defCache","create","baseNames","ownFields","allSupertypes","supertypeList","allFields","fieldNames","fromValue","d","finalized","Dp","isSupertypeOf","that","getSupertypeNames","computeSupertypeLookupTable","candidates","table","typeNames","typeNameCount","j","superTypeName","checkAllFields","checkFieldByName","child","vDef","bases","args","baseName","defineProperty","builders","nodePrototype","defineMethod","func","old","enumerable","configurable","isArrayOfString","build","newBuildParams","writable","buildable","String","addParam","built","param","arg","isArgAvailable","all","message","buildParams","builder","argc","getBuilderName","replace","upperCasePrefix","toLowerCase","charAt","getStatementBuilderName","console","error","namedTypes","getFieldNames","object","getFieldValue","fieldName","eachField","callback","context","someField","some","finalize","extend","populateSupertypeList","lastIndexOf","wrapExpressionBuilderWithStatement","wrapperName","wrapped","expressionStatement","apply","list","lastSeen","pos","to","into"],"mappings":"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","file":"types.js","sourcesContent":["var Ap = Array.prototype;\nvar slice = Ap.slice;\nvar map = Ap.map;\nvar each = Ap.forEach;\nvar Op = Object.prototype;\nvar objToStr = Op.toString;\nvar funObjStr = objToStr.call(function(){});\nvar strObjStr = objToStr.call(\"\");\nvar hasOwn = Op.hasOwnProperty;\n\nmodule.exports = function () {\n\n    var exports = {};\n\n    // A type is an object with a .check method that takes a value and returns\n    // true or false according to whether the value matches the type.\n\n    function Type(check, name) {\n        var self = this;\n        if (!(self instanceof Type)) {\n            throw new Error(\"Type constructor cannot be invoked without 'new'\");\n        }\n\n        // Unfortunately we can't elegantly reuse isFunction and isString,\n        // here, because this code is executed while defining those types.\n        if (objToStr.call(check) !== funObjStr) {\n            throw new Error(check + \" is not a function\");\n        }\n\n        // The `name` parameter can be either a function or a string.\n        var nameObjStr = objToStr.call(name);\n        if (!(nameObjStr === funObjStr ||\n          nameObjStr === strObjStr)) {\n            throw new Error(name + \" is neither a function nor a string\");\n        }\n\n        Object.defineProperties(self, {\n            name: {value: name},\n            check: {\n                value: function (value, deep) {\n                    var result = check.call(self, value, deep);\n                    if (!result && deep && objToStr.call(deep) === funObjStr)\n                        deep(self, value);\n                    return result;\n                }\n            }\n        });\n    }\n\n    var Tp = Type.prototype;\n\n    // Throughout this file we use Object.defineProperty to prevent\n    // redefinition of exported properties.\n    exports.Type = Type;\n\n    // Like .check, except that failure triggers an AssertionError.\n    Tp.assert = function (value, deep) {\n        if (!this.check(value, deep)) {\n            var str = shallowStringify(value);\n            throw new Error(str + \" does not match type \" + this);\n        }\n        return true;\n    };\n\n    function shallowStringify(value) {\n        if (isObject.check(value))\n            return \"{\" + Object.keys(value).map(function (key) {\n                  return key + \": \" + value[key];\n              }).join(\", \") + \"}\";\n\n        if (isArray.check(value))\n            return \"[\" + value.map(shallowStringify).join(\", \") + \"]\";\n\n        return JSON.stringify(value);\n    }\n\n    Tp.toString = function () {\n        var name = this.name;\n\n        if (isString.check(name))\n            return name;\n\n        if (isFunction.check(name))\n            return name.call(this) + \"\";\n\n        return name + \" type\";\n    };\n\n    var builtInCtorFns = [];\n    var builtInCtorTypes = [];\n    var builtInTypes = {};\n    exports.builtInTypes = builtInTypes;\n\n    function defBuiltInType(example, name) {\n        var objStr = objToStr.call(example);\n\n        var type = new Type(function (value) {\n            return objToStr.call(value) === objStr;\n        }, name);\n\n        builtInTypes[name] = type;\n\n        if (example && typeof example.constructor === \"function\") {\n            builtInCtorFns.push(example.constructor);\n            builtInCtorTypes.push(type);\n        }\n\n        return type;\n    }\n\n    // These types check the underlying [[Class]] attribute of the given\n    // value, rather than using the problematic typeof operator. Note however\n    // that no subtyping is considered; so, for instance, isObject.check\n    // returns false for [], /./, new Date, and null.\n    var isString = defBuiltInType(\"truthy\", \"string\");\n    var isFunction = defBuiltInType(function () {}, \"function\");\n    var isArray = defBuiltInType([], \"array\");\n    var isObject = defBuiltInType({}, \"object\");\n    var isRegExp = defBuiltInType(/./, \"RegExp\");\n    var isDate = defBuiltInType(new Date, \"Date\");\n    var isNumber = defBuiltInType(3, \"number\");\n    var isBoolean = defBuiltInType(true, \"boolean\");\n    var isNull = defBuiltInType(null, \"null\");\n    var isUndefined = defBuiltInType(void 0, \"undefined\");\n\n    // There are a number of idiomatic ways of expressing types, so this\n    // function serves to coerce them all to actual Type objects. Note that\n    // providing the name argument is not necessary in most cases.\n    function toType(from, name) {\n        // The toType function should of course be idempotent.\n        if (from instanceof Type)\n            return from;\n\n        // The Def type is used as a helper for constructing compound\n        // interface types for AST nodes.\n        if (from instanceof Def)\n            return from.type;\n\n        // Support [ElemType] syntax.\n        if (isArray.check(from))\n            return Type.fromArray(from);\n\n        // Support { someField: FieldType, ... } syntax.\n        if (isObject.check(from))\n            return Type.fromObject(from);\n\n        if (isFunction.check(from)) {\n            var bicfIndex = builtInCtorFns.indexOf(from);\n            if (bicfIndex >= 0) {\n                return builtInCtorTypes[bicfIndex];\n            }\n\n            // If isFunction.check(from), and from is not a built-in\n            // constructor, assume from is a binary predicate function we can\n            // use to define the type.\n            return new Type(from, name);\n        }\n\n        // As a last resort, toType returns a type that matches any value that\n        // is === from. This is primarily useful for literal values like\n        // toType(null), but it has the additional advantage of allowing\n        // toType to be a total function.\n        return new Type(function (value) {\n            return value === from;\n        }, isUndefined.check(name) ? function () {\n            return from + \"\";\n        } : name);\n    }\n\n    // Returns a type that matches the given value iff any of type1, type2,\n    // etc. match the value.\n    Type.or = function (/* type1, type2, ... */) {\n        var types = [];\n        var len = arguments.length;\n        for (var i = 0; i < len; ++i)\n            types.push(toType(arguments[i]));\n\n        return new Type(function (value, deep) {\n            for (var i = 0; i < len; ++i)\n                if (types[i].check(value, deep))\n                    return true;\n            return false;\n        }, function () {\n            return types.join(\" | \");\n        });\n    };\n\n    Type.fromArray = function (arr) {\n        if (!isArray.check(arr)) {\n            throw new Error(\"\");\n        }\n        if (arr.length !== 1) {\n            throw new Error(\"only one element type is permitted for typed arrays\");\n        }\n        return toType(arr[0]).arrayOf();\n    };\n\n    Tp.arrayOf = function () {\n        var elemType = this;\n        return new Type(function (value, deep) {\n            return isArray.check(value) && value.every(function (elem) {\n                  return elemType.check(elem, deep);\n              });\n        }, function () {\n            return \"[\" + elemType + \"]\";\n        });\n    };\n\n    Type.fromObject = function (obj) {\n        var fields = Object.keys(obj).map(function (name) {\n            return new Field(name, obj[name]);\n        });\n\n        return new Type(function (value, deep) {\n            return isObject.check(value) && fields.every(function (field) {\n                  return field.type.check(value[field.name], deep);\n              });\n        }, function () {\n            return \"{ \" + fields.join(\", \") + \" }\";\n        });\n    };\n\n    function Field(name, type, defaultFn, hidden) {\n        var self = this;\n\n        if (!(self instanceof Field)) {\n            throw new Error(\"Field constructor cannot be invoked without 'new'\");\n        }\n        isString.assert(name);\n\n        type = toType(type);\n\n        var properties = {\n            name: {value: name},\n            type: {value: type},\n            hidden: {value: !!hidden}\n        };\n\n        if (isFunction.check(defaultFn)) {\n            properties.defaultFn = {value: defaultFn};\n        }\n\n        Object.defineProperties(self, properties);\n    }\n\n    var Fp = Field.prototype;\n\n    Fp.toString = function () {\n        return JSON.stringify(this.name) + \": \" + this.type;\n    };\n\n    Fp.getValue = function (obj) {\n        var value = obj[this.name];\n\n        if (!isUndefined.check(value))\n            return value;\n\n        if (this.defaultFn)\n            value = this.defaultFn.call(obj);\n\n        return value;\n    };\n\n    // Define a type whose name is registered in a namespace (the defCache) so\n    // that future definitions will return the same type given the same name.\n    // In particular, this system allows for circular and forward definitions.\n    // The Def object d returned from Type.def may be used to configure the\n    // type d.type by calling methods such as d.bases, d.build, and d.field.\n    Type.def = function (typeName) {\n        isString.assert(typeName);\n        return hasOwn.call(defCache, typeName)\n          ? defCache[typeName]\n          : defCache[typeName] = new Def(typeName);\n    };\n\n    // In order to return the same Def instance every time Type.def is called\n    // with a particular name, those instances need to be stored in a cache.\n    var defCache = Object.create(null);\n\n    function Def(typeName) {\n        var self = this;\n        if (!(self instanceof Def)) {\n            throw new Error(\"Def constructor cannot be invoked without 'new'\");\n        }\n\n        Object.defineProperties(self, {\n            typeName: {value: typeName},\n            baseNames: {value: []},\n            ownFields: {value: Object.create(null)},\n\n            // These two are populated during finalization.\n            allSupertypes: {value: Object.create(null)}, // Includes own typeName.\n            supertypeList: {value: []}, // Linear inheritance hierarchy.\n            allFields: {value: Object.create(null)}, // Includes inherited fields.\n            fieldNames: {value: []}, // Non-hidden keys of allFields.\n\n            type: {\n                value: new Type(function (value, deep) {\n                    return self.check(value, deep);\n                }, typeName)\n            }\n        });\n    }\n\n    Def.fromValue = function (value) {\n        if (value && typeof value === \"object\") {\n            var type = value.type;\n            if (typeof type === \"string\" &&\n              hasOwn.call(defCache, type)) {\n                var d = defCache[type];\n                if (d.finalized) {\n                    return d;\n                }\n            }\n        }\n\n        return null;\n    };\n\n    var Dp = Def.prototype;\n\n    Dp.isSupertypeOf = function (that) {\n        if (that instanceof Def) {\n            if (this.finalized !== true ||\n              that.finalized !== true) {\n                throw new Error(\"\");\n            }\n            return hasOwn.call(that.allSupertypes, this.typeName);\n        } else {\n            throw new Error(that + \" is not a Def\");\n        }\n    };\n\n    // Note that the list returned by this function is a copy of the internal\n    // supertypeList, *without* the typeName itself as the first element.\n    exports.getSupertypeNames = function (typeName) {\n        if (!hasOwn.call(defCache, typeName)) {\n            throw new Error(\"\");\n        }\n        var d = defCache[typeName];\n        if (d.finalized !== true) {\n            throw new Error(\"\");\n        }\n        return d.supertypeList.slice(1);\n    };\n\n    // Returns an object mapping from every known type in the defCache to the\n    // most specific supertype whose name is an own property of the candidates\n    // object.\n    exports.computeSupertypeLookupTable = function (candidates) {\n        var table = {};\n        var typeNames = Object.keys(defCache);\n        var typeNameCount = typeNames.length;\n\n        for (var i = 0; i < typeNameCount; ++i) {\n            var typeName = typeNames[i];\n            var d = defCache[typeName];\n            if (d.finalized !== true) {\n                throw new Error(\"\" + typeName);\n            }\n            for (var j = 0; j < d.supertypeList.length; ++j) {\n                var superTypeName = d.supertypeList[j];\n                if (hasOwn.call(candidates, superTypeName)) {\n                    table[typeName] = superTypeName;\n                    break;\n                }\n            }\n        }\n\n        return table;\n    };\n\n    Dp.checkAllFields = function (value, deep) {\n        var allFields = this.allFields;\n        if (this.finalized !== true) {\n            throw new Error(\"\" + this.typeName);\n        }\n\n        function checkFieldByName(name) {\n            var field = allFields[name];\n            var type = field.type;\n            var child = field.getValue(value);\n            return type.check(child, deep);\n        }\n\n        return isObject.check(value)\n          && Object.keys(allFields).every(checkFieldByName);\n    };\n\n    Dp.check = function (value, deep) {\n        if (this.finalized !== true) {\n            throw new Error(\n              \"prematurely checking unfinalized type \" + this.typeName\n            );\n        }\n\n        // A Def type can only match an object value.\n        if (!isObject.check(value))\n            return false;\n\n        var vDef = Def.fromValue(value);\n        if (!vDef) {\n            // If we couldn't infer the Def associated with the given value,\n            // and we expected it to be a SourceLocation or a Position, it was\n            // probably just missing a \"type\" field (because Esprima does not\n            // assign a type property to such nodes). Be optimistic and let\n            // this.checkAllFields make the final decision.\n            if (this.typeName === \"SourceLocation\" ||\n              this.typeName === \"Position\") {\n                return this.checkAllFields(value, deep);\n            }\n\n            // Calling this.checkAllFields for any other type of node is both\n            // bad for performance and way too forgiving.\n            return false;\n        }\n\n        // If checking deeply and vDef === this, then we only need to call\n        // checkAllFields once. Calling checkAllFields is too strict when deep\n        // is false, because then we only care about this.isSupertypeOf(vDef).\n        if (deep && vDef === this)\n            return this.checkAllFields(value, deep);\n\n        // In most cases we rely exclusively on isSupertypeOf to make O(1)\n        // subtyping determinations. This suffices in most situations outside\n        // of unit tests, since interface conformance is checked whenever new\n        // instances are created using builder functions.\n        if (!this.isSupertypeOf(vDef))\n            return false;\n\n        // The exception is when deep is true; then, we recursively check all\n        // fields.\n        if (!deep)\n            return true;\n\n        // Use the more specific Def (vDef) to perform the deep check, but\n        // shallow-check fields defined by the less specific Def (this).\n        return vDef.checkAllFields(value, deep)\n          && this.checkAllFields(value, false);\n    };\n\n    Dp.bases = function () {\n        var args = slice.call(arguments);\n        var bases = this.baseNames;\n\n        if (this.finalized) {\n            if (args.length !== bases.length) {\n                throw new Error(\"\");\n            }\n            for (var i = 0; i < args.length; i++) {\n                if (args[i] !== bases[i]) {\n                    throw new Error(\"\");\n                }\n            }\n            return this;\n        }\n\n        args.forEach(function (baseName) {\n            isString.assert(baseName);\n\n            // This indexOf lookup may be O(n), but the typical number of base\n            // names is very small, and indexOf is a native Array method.\n            if (bases.indexOf(baseName) < 0)\n                bases.push(baseName);\n        });\n\n        return this; // For chaining.\n    };\n\n    // False by default until .build(...) is called on an instance.\n    Object.defineProperty(Dp, \"buildable\", {value: false});\n\n    var builders = {};\n    exports.builders = builders;\n\n    // This object is used as prototype for any node created by a builder.\n    var nodePrototype = {};\n\n    // Call this function to define a new method to be shared by all AST\n     // nodes. The replaced method (if any) is returned for easy wrapping.\n    exports.defineMethod = function (name, func) {\n        var old = nodePrototype[name];\n\n        // Pass undefined as func to delete nodePrototype[name].\n        if (isUndefined.check(func)) {\n            delete nodePrototype[name];\n\n        } else {\n            isFunction.assert(func);\n\n            Object.defineProperty(nodePrototype, name, {\n                enumerable: true, // For discoverability.\n                configurable: true, // For delete proto[name].\n                value: func\n            });\n        }\n\n        return old;\n    };\n\n    var isArrayOfString = isString.arrayOf();\n\n    // Calling the .build method of a Def simultaneously marks the type as\n    // buildable (by defining builders[getBuilderName(typeName)]) and\n    // specifies the order of arguments that should be passed to the builder\n    // function to create an instance of the type.\n    Dp.build = function (/* param1, param2, ... */) {\n        var self = this;\n\n        var newBuildParams = slice.call(arguments);\n        isArrayOfString.assert(newBuildParams);\n\n        // Calling Def.prototype.build multiple times has the effect of merely\n        // redefining this property.\n        Object.defineProperty(self, \"buildParams\", {\n            value: newBuildParams,\n            writable: false,\n            enumerable: false,\n            configurable: true\n        });\n\n        if (self.buildable) {\n            // If this Def is already buildable, update self.buildParams and\n            // continue using the old builder function.\n            return self;\n        }\n\n        // Every buildable type will have its \"type\" field filled in\n        // automatically. This includes types that are not subtypes of Node,\n        // like SourceLocation, but that seems harmless (TODO?).\n        self.field(\"type\", String, function () { return self.typeName });\n\n        // Override Dp.buildable for this Def instance.\n        Object.defineProperty(self, \"buildable\", {value: true});\n\n        function addParam(built, param, arg, isArgAvailable) {\n            if (hasOwn.call(built, param))\n                return;\n\n            var all = self.allFields;\n            if (!hasOwn.call(all, param)) {\n                throw new Error(\"\" + param);\n            }\n\n            var field = all[param];\n            var type = field.type;\n            var value;\n\n            if (isArgAvailable) {\n                value = arg;\n            } else if (field.defaultFn) {\n                // Expose the partially-built object to the default\n                // function as its `this` object.\n                value = field.defaultFn.call(built);\n            } else {\n                var message = \"no value or default function given for field \" +\n                  JSON.stringify(param) + \" of \" + self.typeName + \"(\" +\n                  self.buildParams.map(function (name) {\n                      return all[name];\n                  }).join(\", \") + \")\";\n                throw new Error(message);\n            }\n\n            if (!type.check(value)) {\n                throw new Error(\n                  shallowStringify(value) +\n                  \" does not match field \" + field +\n                  \" of type \" + self.typeName\n                );\n            }\n\n            built[param] = value;\n        }\n\n        // Calling the builder function will construct an instance of the Def,\n        // with positional arguments mapped to the fields original passed to .build.\n        // If not enough arguments are provided, the default value for the remaining fields\n        // will be used.\n        function builder() {\n            var args = arguments;\n            var argc = args.length;\n            \n            if (!self.finalized) {\n                throw new Error(\n                    \"attempting to instantiate unfinalized type \" +\n                    self.typeName\n                );\n            }\n\n            var built = Object.create(nodePrototype);\n\n            self.buildParams.forEach(function (param, i) {\n                if (i < argc) {\n                    addParam(built, param, args[i], true)\n                } else {\n                    addParam(built, param, null, false);\n                }\n            });\n\n            Object.keys(self.allFields).forEach(function (param) {\n                // Use the default value.\n                addParam(built, param, null, false);\n            });\n\n            // Make sure that the \"type\" field was filled automatically.\n            if (built.type !== self.typeName) {\n                throw new Error(\"\");\n            }\n\n            return built;\n        }\n\n        // Calling .from on the builder function will construct an instance of the Def,\n        // using field values from the passed object. For fields missing from the passed object,\n        // their default value will be used.\n        builder.from = function (obj) {\n            if (!self.finalized) {\n                throw new Error(\n                    \"attempting to instantiate unfinalized type \" +\n                    self.typeName\n                );\n            }\n            \n            var built = Object.create(nodePrototype);\n\n            Object.keys(self.allFields).forEach(function (param) {\n                if (hasOwn.call(obj, param)) {\n                    addParam(built, param, obj[param], true);\n                } else {\n                    addParam(built, param, null, false);\n                }\n            });\n\n            // Make sure that the \"type\" field was filled automatically.\n            if (built.type !== self.typeName) {\n                throw new Error(\"\");\n            }\n\n            return built;\n        }\n\n        Object.defineProperty(builders, getBuilderName(self.typeName), {\n            enumerable: true,\n            value: builder\n        });\n\n        return self; // For chaining.\n    };\n\n    function getBuilderName(typeName) {\n        return typeName.replace(/^[A-Z]+/, function (upperCasePrefix) {\n            var len = upperCasePrefix.length;\n            switch (len) {\n                case 0: return \"\";\n                // If there's only one initial capital letter, just lower-case it.\n                case 1: return upperCasePrefix.toLowerCase();\n                default:\n                    // If there's more than one initial capital letter, lower-case\n                    // all but the last one, so that XMLDefaultDeclaration (for\n                    // example) becomes xmlDefaultDeclaration.\n                    return upperCasePrefix.slice(\n                        0, len - 1).toLowerCase() +\n                      upperCasePrefix.charAt(len - 1);\n            }\n        });\n    }\n    exports.getBuilderName = getBuilderName;\n\n    function getStatementBuilderName(typeName) {\n        typeName = getBuilderName(typeName);\n        return typeName.replace(/(Expression)?$/, \"Statement\");\n    }\n    exports.getStatementBuilderName = getStatementBuilderName;\n\n    // The reason fields are specified using .field(...) instead of an object\n    // literal syntax is somewhat subtle: the object literal syntax would\n    // support only one key and one value, but with .field(...) we can pass\n    // any number of arguments to specify the field.\n    Dp.field = function (name, type, defaultFn, hidden) {\n        if (this.finalized) {\n            console.error(\"Ignoring attempt to redefine field \" +\n              JSON.stringify(name) + \" of finalized type \" +\n              JSON.stringify(this.typeName));\n            return this;\n        }\n        this.ownFields[name] = new Field(name, type, defaultFn, hidden);\n        return this; // For chaining.\n    };\n\n    var namedTypes = {};\n    exports.namedTypes = namedTypes;\n\n    // Like Object.keys, but aware of what fields each AST type should have.\n    function getFieldNames(object) {\n        var d = Def.fromValue(object);\n        if (d) {\n            return d.fieldNames.slice(0);\n        }\n\n        if (\"type\" in object) {\n            throw new Error(\n              \"did not recognize object of type \" +\n              JSON.stringify(object.type)\n            );\n        }\n\n        return Object.keys(object);\n    }\n    exports.getFieldNames = getFieldNames;\n\n    // Get the value of an object property, taking object.type and default\n    // functions into account.\n    function getFieldValue(object, fieldName) {\n        var d = Def.fromValue(object);\n        if (d) {\n            var field = d.allFields[fieldName];\n            if (field) {\n                return field.getValue(object);\n            }\n        }\n\n        return object && object[fieldName];\n    }\n    exports.getFieldValue = getFieldValue;\n\n    // Iterate over all defined fields of an object, including those missing\n    // or undefined, passing each field name and effective value (as returned\n    // by getFieldValue) to the callback. If the object has no corresponding\n    // Def, the callback will never be called.\n    exports.eachField = function (object, callback, context) {\n        getFieldNames(object).forEach(function (name) {\n            callback.call(this, name, getFieldValue(object, name));\n        }, context);\n    };\n\n    // Similar to eachField, except that iteration stops as soon as the\n    // callback returns a truthy value. Like Array.prototype.some, the final\n    // result is either true or false to indicates whether the callback\n    // returned true for any element or not.\n    exports.someField = function (object, callback, context) {\n        return getFieldNames(object).some(function (name) {\n            return callback.call(this, name, getFieldValue(object, name));\n        }, context);\n    };\n\n    // This property will be overridden as true by individual Def instances\n    // when they are finalized.\n    Object.defineProperty(Dp, \"finalized\", {value: false});\n\n    Dp.finalize = function () {\n        var self = this;\n\n        // It's not an error to finalize a type more than once, but only the\n        // first call to .finalize does anything.\n        if (!self.finalized) {\n            var allFields = self.allFields;\n            var allSupertypes = self.allSupertypes;\n\n            self.baseNames.forEach(function (name) {\n                var def = defCache[name];\n                if (def instanceof Def) {\n                    def.finalize();\n                    extend(allFields, def.allFields);\n                    extend(allSupertypes, def.allSupertypes);\n                } else {\n                    var message = \"unknown supertype name \" +\n                      JSON.stringify(name) +\n                      \" for subtype \" +\n                      JSON.stringify(self.typeName);\n                    throw new Error(message);\n                }\n            });\n\n            // TODO Warn if fields are overridden with incompatible types.\n            extend(allFields, self.ownFields);\n            allSupertypes[self.typeName] = self;\n\n            self.fieldNames.length = 0;\n            for (var fieldName in allFields) {\n                if (hasOwn.call(allFields, fieldName) &&\n                    !allFields[fieldName].hidden) {\n                        self.fieldNames.push(fieldName);\n                }\n            }\n\n            // Types are exported only once they have been finalized.\n            Object.defineProperty(namedTypes, self.typeName, {\n                enumerable: true,\n                value: self.type\n            });\n\n            Object.defineProperty(self, \"finalized\", {value: true});\n\n            // A linearization of the inheritance hierarchy.\n            populateSupertypeList(self.typeName, self.supertypeList);\n\n            if (self.buildable && self.supertypeList.lastIndexOf(\"Expression\") >= 0) {\n                wrapExpressionBuilderWithStatement(self.typeName);\n            }\n        }\n    };\n\n    // Adds an additional builder for Expression subtypes\n    // that wraps the built Expression in an ExpressionStatements.\n    function wrapExpressionBuilderWithStatement(typeName) {\n        var wrapperName = getStatementBuilderName(typeName);\n\n        // skip if the builder already exists\n        if (builders[wrapperName]) return;\n\n        // the builder function to wrap with builders.ExpressionStatement\n        var wrapped = builders[getBuilderName(typeName)];\n\n        // skip if there is nothing to wrap\n        if (!wrapped) return;\n\n        builders[wrapperName] = function () {\n            return builders.expressionStatement(wrapped.apply(builders, arguments));\n        };\n    }\n\n    function populateSupertypeList(typeName, list) {\n        list.length = 0;\n        list.push(typeName);\n\n        var lastSeen = Object.create(null);\n\n        for (var pos = 0; pos < list.length; ++pos) {\n            typeName = list[pos];\n            var d = defCache[typeName];\n            if (d.finalized !== true) {\n                throw new Error(\"\");\n            }\n\n            // If we saw typeName earlier in the breadth-first traversal,\n            // delete the last-seen occurrence.\n            if (hasOwn.call(lastSeen, typeName)) {\n                delete list[lastSeen[typeName]];\n            }\n\n            // Record the new index of the last-seen occurrence of typeName.\n            lastSeen[typeName] = pos;\n\n            // Enqueue the base names of this type.\n            list.push.apply(list, d.baseNames);\n        }\n\n        // Compaction loop to remove array holes.\n        for (var to = 0, from = to, len = list.length; from < len; ++from) {\n            if (hasOwn.call(list, from)) {\n                list[to++] = list[from];\n            }\n        }\n\n        list.length = to;\n    }\n\n    function extend(into, from) {\n        Object.keys(from).forEach(function (name) {\n            into[name] = from[name];\n        });\n\n        return into;\n    };\n\n    exports.finalize = function () {\n        Object.keys(defCache).forEach(function (name) {\n            defCache[name].finalize();\n        });\n    };\n\n    return exports;\n};\n"]}