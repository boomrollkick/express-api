{"version":3,"sources":["../../../../src/node_modules/ajv-keywords/keywords/range.js"],"names":["module","exports","defFunc","ajv","definition","type","macro","schema","parentSchema","min","max","exclusive","exclusiveRange","validateRangeSchema","minimum","exclusiveMinimum","maximum","exclusiveMaximum","metaSchema","minItems","maxItems","items","addKeyword","undefined","Error"],"mappings":"AAAA;;AAEAA,OAAOC,OAAP,GAAiB,SAASC,OAAT,CAAiBC,GAAjB,EAAsB;AACrCD,UAAQE,UAAR,GAAqB;AACnBC,UAAM,QADa;AAEnBC,WAAO,eAAUC,MAAV,EAAkBC,YAAlB,EAAgC;AACrC,UAAIC,MAAMF,OAAO,CAAP,CAAV;AAAA,UACIG,MAAMH,OAAO,CAAP,CADV;AAAA,UAEII,YAAYH,aAAaI,cAF7B;;AAIAC,0BAAoBJ,GAApB,EAAyBC,GAAzB,EAA8BC,SAA9B;;AAEA,aAAO;AACLG,iBAASL,GADJ;AAELM,0BAAkBJ,SAFb;AAGLK,iBAASN,GAHJ;AAILO,0BAAkBN;AAJb,OAAP;AAMD,KAfkB;AAgBnBO,gBAAY;AACVb,YAAM,OADI;AAEVc,gBAAU,CAFA;AAGVC,gBAAU,CAHA;AAIVC,aAAO,EAAEhB,MAAM,QAAR;AAJG;AAhBO,GAArB;;AAwBAF,MAAImB,UAAJ,CAAe,OAAf,EAAwBpB,QAAQE,UAAhC;AACAD,MAAImB,UAAJ,CAAe,gBAAf;AACA,SAAOnB,GAAP;;AAEA,WAASU,mBAAT,CAA6BJ,GAA7B,EAAkCC,GAAlC,EAAuCC,SAAvC,EAAkD;AAChD,QAAIA,cAAcY,SAAd,IAA2B,OAAOZ,SAAP,IAAoB,SAAnD,EACE,MAAM,IAAIa,KAAJ,CAAU,8DAAV,CAAN;;AAEF,QAAIf,MAAMC,GAAN,IAAcC,aAAaF,OAAOC,GAAtC,EACE,MAAM,IAAIc,KAAJ,CAAU,+BAAV,CAAN;AACH;AACF,CApCD","file":"range.js","sourcesContent":["'use strict';\n\nmodule.exports = function defFunc(ajv) {\n  defFunc.definition = {\n    type: 'number',\n    macro: function (schema, parentSchema) {\n      var min = schema[0]\n        , max = schema[1]\n        , exclusive = parentSchema.exclusiveRange;\n\n      validateRangeSchema(min, max, exclusive);\n\n      return {\n        minimum: min,\n        exclusiveMinimum: exclusive,\n        maximum: max,\n        exclusiveMaximum: exclusive\n      };\n    },\n    metaSchema: {\n      type: 'array',\n      minItems: 2,\n      maxItems: 2,\n      items: { type: 'number' }\n    }\n  };\n\n  ajv.addKeyword('range', defFunc.definition);\n  ajv.addKeyword('exclusiveRange');\n  return ajv;\n\n  function validateRangeSchema(min, max, exclusive) {\n    if (exclusive !== undefined && typeof exclusive != 'boolean')\n      throw new Error('Invalid schema for exclusiveRange keyword, should be boolean');\n\n    if (min > max || (exclusive && min == max))\n      throw new Error('There are no numbers in range');\n  }\n};\n"]}