{"version":3,"sources":["../../../../../../../src/node_modules/@pm2/agent-node/node_modules/ws/lib/websocket.js"],"names":["EventEmitter","require","crypto","https","http","net","tls","url","PerMessageDeflate","EventTarget","extension","constants","Receiver","Sender","readyStates","kWebSocket","protocolVersions","closeTimeout","WebSocket","address","protocols","options","readyState","CONNECTING","protocol","_binaryType","BINARY_TYPES","_closeFrameReceived","_closeFrameSent","_closeMessage","_closeTimer","_closeCode","_extensions","_isServer","_receiver","_sender","_socket","Array","isArray","join","undefined","initAsClient","call","socket","head","maxPayload","receiver","on","receiverOnConclude","receiverOnDrain","receiverOnError","receiverOnMessage","receiverOnPing","receiverOnPong","setTimeout","setNoDelay","length","unshift","socketOnClose","socketOnData","socketOnEnd","socketOnError","OPEN","emit","CLOSED","extensionName","cleanup","removeAllListeners","code","data","msg","abortHandshake","_req","CLOSING","end","close","err","writable","destroy","bind","mask","cb","Error","toString","ping","EMPTY_BUFFER","pong","opts","Object","assign","binary","compress","fin","send","type","indexOf","bufferSize","_bufferedBytes","keys","forEach","i","method","defineProperty","prototype","get","listeners","_listener","set","listener","removeListener","addEventListener","removeEventListener","module","exports","protocolVersion","perMessageDeflate","createConnection","socketPath","hostname","timeout","auth","host","path","port","RangeError","parsedUrl","href","URL","parse","isUnixSocket","pathname","isSecure","key","randomBytes","httpObj","search","tlsConnect","netConnect","startsWith","slice","headers","Connection","Upgrade","format","offer","origin","Origin","username","password","parts","split","req","handshakeTimeout","aborted","emitClose","res","statusCode","digest","createHash","update","GUID","serverProt","protList","protError","extensions","accept","setSocket","connect","servername","websocket","stream","message","captureStackTrace","setHeader","abort","once","reason","resume","kStatusCode","receiverOnFinish","NOOP","read","clearTimeout","_writableState","finished","errorEmitted","chunk","write","pause"],"mappings":"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","file":"websocket.js","sourcesContent":["'use strict';\n\nconst EventEmitter = require('events');\nconst crypto = require('crypto');\nconst https = require('https');\nconst http = require('http');\nconst net = require('net');\nconst tls = require('tls');\nconst url = require('url');\n\nconst PerMessageDeflate = require('./permessage-deflate');\nconst EventTarget = require('./event-target');\nconst extension = require('./extension');\nconst constants = require('./constants');\nconst Receiver = require('./receiver');\nconst Sender = require('./sender');\n\nconst readyStates = ['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'];\nconst kWebSocket = constants.kWebSocket;\nconst protocolVersions = [8, 13];\nconst closeTimeout = 30 * 1000; // Allow 30 seconds to terminate the connection cleanly.\n\n/**\n * Class representing a WebSocket.\n *\n * @extends EventEmitter\n */\nclass WebSocket extends EventEmitter {\n  /**\n   * Create a new `WebSocket`.\n   *\n   * @param {(String|url.Url|url.URL)} address The URL to which to connect\n   * @param {(String|String[])} protocols The subprotocols\n   * @param {Object} options Connection options\n   */\n  constructor(address, protocols, options) {\n    super();\n\n    this.readyState = WebSocket.CONNECTING;\n    this.protocol = '';\n\n    this._binaryType = constants.BINARY_TYPES[0];\n    this._closeFrameReceived = false;\n    this._closeFrameSent = false;\n    this._closeMessage = '';\n    this._closeTimer = null;\n    this._closeCode = 1006;\n    this._extensions = {};\n    this._isServer = true;\n    this._receiver = null;\n    this._sender = null;\n    this._socket = null;\n\n    if (address !== null) {\n      if (Array.isArray(protocols)) {\n        protocols = protocols.join(', ');\n      } else if (typeof protocols === 'object' && protocols !== null) {\n        options = protocols;\n        protocols = undefined;\n      }\n\n      initAsClient.call(this, address, protocols, options);\n    }\n  }\n\n  get CONNECTING() {\n    return WebSocket.CONNECTING;\n  }\n  get CLOSING() {\n    return WebSocket.CLOSING;\n  }\n  get CLOSED() {\n    return WebSocket.CLOSED;\n  }\n  get OPEN() {\n    return WebSocket.OPEN;\n  }\n\n  /**\n   * This deviates from the WHATWG interface since ws doesn't support the required\n   * default \"blob\" type (instead we define a custom \"nodebuffer\" type).\n   *\n   * @type {String}\n   */\n  get binaryType() {\n    return this._binaryType;\n  }\n\n  set binaryType(type) {\n    if (constants.BINARY_TYPES.indexOf(type) < 0) return;\n\n    this._binaryType = type;\n\n    //\n    // Allow to change `binaryType` on the fly.\n    //\n    if (this._receiver) this._receiver._binaryType = type;\n  }\n\n  /**\n   * @type {Number}\n   */\n  get bufferedAmount() {\n    if (!this._socket) return 0;\n\n    //\n    // `socket.bufferSize` is `undefined` if the socket is closed.\n    //\n    return (this._socket.bufferSize || 0) + this._sender._bufferedBytes;\n  }\n\n  /**\n   * @type {String}\n   */\n  get extensions() {\n    return Object.keys(this._extensions).join();\n  }\n\n  /**\n   * Set up the socket and the internal resources.\n   *\n   * @param {net.Socket} socket The network socket between the server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Number} maxPayload The maximum allowed message size\n   * @private\n   */\n  setSocket(socket, head, maxPayload) {\n    const receiver = new Receiver(\n      this._binaryType,\n      this._extensions,\n      maxPayload\n    );\n\n    this._sender = new Sender(socket, this._extensions);\n    this._receiver = receiver;\n    this._socket = socket;\n\n    receiver[kWebSocket] = this;\n    socket[kWebSocket] = this;\n\n    receiver.on('conclude', receiverOnConclude);\n    receiver.on('drain', receiverOnDrain);\n    receiver.on('error', receiverOnError);\n    receiver.on('message', receiverOnMessage);\n    receiver.on('ping', receiverOnPing);\n    receiver.on('pong', receiverOnPong);\n\n    socket.setTimeout(0);\n    socket.setNoDelay();\n\n    if (head.length > 0) socket.unshift(head);\n\n    socket.on('close', socketOnClose);\n    socket.on('data', socketOnData);\n    socket.on('end', socketOnEnd);\n    socket.on('error', socketOnError);\n\n    this.readyState = WebSocket.OPEN;\n    this.emit('open');\n  }\n\n  /**\n   * Emit the `'close'` event.\n   *\n   * @private\n   */\n  emitClose() {\n    this.readyState = WebSocket.CLOSED;\n\n    if (!this._socket) {\n      this.emit('close', this._closeCode, this._closeMessage);\n      return;\n    }\n\n    if (this._extensions[PerMessageDeflate.extensionName]) {\n      this._extensions[PerMessageDeflate.extensionName].cleanup();\n    }\n\n    this._receiver.removeAllListeners();\n    this.emit('close', this._closeCode, this._closeMessage);\n  }\n\n  /**\n   * Start a closing handshake.\n   *\n   *          +----------+   +-----------+   +----------+\n   *     - - -|ws.close()|-->|close frame|-->|ws.close()|- - -\n   *    |     +----------+   +-----------+   +----------+     |\n   *          +----------+   +-----------+         |\n   * CLOSING  |ws.close()|<--|close frame|<--+-----+       CLOSING\n   *          +----------+   +-----------+   |\n   *    |           |                        |   +---+        |\n   *                +------------------------+-->|fin| - - - -\n   *    |         +---+                      |   +---+\n   *     - - - - -|fin|<---------------------+\n   *              +---+\n   *\n   * @param {Number} code Status code explaining why the connection is closing\n   * @param {String} data A string explaining why the connection is closing\n   * @public\n   */\n  close(code, data) {\n    if (this.readyState === WebSocket.CLOSED) return;\n    if (this.readyState === WebSocket.CONNECTING) {\n      const msg = 'WebSocket was closed before the connection was established';\n      return abortHandshake(this, this._req, msg);\n    }\n\n    if (this.readyState === WebSocket.CLOSING) {\n      if (this._closeFrameSent && this._closeFrameReceived) this._socket.end();\n      return;\n    }\n\n    this.readyState = WebSocket.CLOSING;\n    this._sender.close(code, data, !this._isServer, (err) => {\n      //\n      // This error is handled by the `'error'` listener on the socket. We only\n      // want to know if the close frame has been sent here.\n      //\n      if (err) return;\n\n      this._closeFrameSent = true;\n\n      if (this._socket.writable) {\n        if (this._closeFrameReceived) this._socket.end();\n\n        //\n        // Ensure that the connection is closed even if the closing handshake\n        // fails.\n        //\n        this._closeTimer = setTimeout(\n          this._socket.destroy.bind(this._socket),\n          closeTimeout\n        );\n      }\n    });\n  }\n\n  /**\n   * Send a ping.\n   *\n   * @param {*} data The data to send\n   * @param {Boolean} mask Indicates whether or not to mask `data`\n   * @param {Function} cb Callback which is executed when the ping is sent\n   * @public\n   */\n  ping(data, mask, cb) {\n    if (typeof data === 'function') {\n      cb = data;\n      data = mask = undefined;\n    } else if (typeof mask === 'function') {\n      cb = mask;\n      mask = undefined;\n    }\n\n    if (this.readyState !== WebSocket.OPEN) {\n      const err = new Error(\n        `WebSocket is not open: readyState ${this.readyState} ` +\n          `(${readyStates[this.readyState]})`\n      );\n\n      if (cb) return cb(err);\n      throw err;\n    }\n\n    if (typeof data === 'number') data = data.toString();\n    if (mask === undefined) mask = !this._isServer;\n    this._sender.ping(data || constants.EMPTY_BUFFER, mask, cb);\n  }\n\n  /**\n   * Send a pong.\n   *\n   * @param {*} data The data to send\n   * @param {Boolean} mask Indicates whether or not to mask `data`\n   * @param {Function} cb Callback which is executed when the pong is sent\n   * @public\n   */\n  pong(data, mask, cb) {\n    if (typeof data === 'function') {\n      cb = data;\n      data = mask = undefined;\n    } else if (typeof mask === 'function') {\n      cb = mask;\n      mask = undefined;\n    }\n\n    if (this.readyState !== WebSocket.OPEN) {\n      const err = new Error(\n        `WebSocket is not open: readyState ${this.readyState} ` +\n          `(${readyStates[this.readyState]})`\n      );\n\n      if (cb) return cb(err);\n      throw err;\n    }\n\n    if (typeof data === 'number') data = data.toString();\n    if (mask === undefined) mask = !this._isServer;\n    this._sender.pong(data || constants.EMPTY_BUFFER, mask, cb);\n  }\n\n  /**\n   * Send a data message.\n   *\n   * @param {*} data The message to send\n   * @param {Object} options Options object\n   * @param {Boolean} options.compress Specifies whether or not to compress `data`\n   * @param {Boolean} options.binary Specifies whether `data` is binary or text\n   * @param {Boolean} options.fin Specifies whether the fragment is the last one\n   * @param {Boolean} options.mask Specifies whether or not to mask `data`\n   * @param {Function} cb Callback which is executed when data is written out\n   * @public\n   */\n  send(data, options, cb) {\n    if (typeof options === 'function') {\n      cb = options;\n      options = {};\n    }\n\n    if (this.readyState !== WebSocket.OPEN) {\n      const err = new Error(\n        `WebSocket is not open: readyState ${this.readyState} ` +\n          `(${readyStates[this.readyState]})`\n      );\n\n      if (cb) return cb(err);\n      throw err;\n    }\n\n    if (typeof data === 'number') data = data.toString();\n\n    const opts = Object.assign(\n      {\n        binary: typeof data !== 'string',\n        mask: !this._isServer,\n        compress: true,\n        fin: true\n      },\n      options\n    );\n\n    if (!this._extensions[PerMessageDeflate.extensionName]) {\n      opts.compress = false;\n    }\n\n    this._sender.send(data || constants.EMPTY_BUFFER, opts, cb);\n  }\n\n  /**\n   * Forcibly close the connection.\n   *\n   * @public\n   */\n  terminate() {\n    if (this.readyState === WebSocket.CLOSED) return;\n    if (this.readyState === WebSocket.CONNECTING) {\n      const msg = 'WebSocket was closed before the connection was established';\n      return abortHandshake(this, this._req, msg);\n    }\n\n    if (this._socket) {\n      this.readyState = WebSocket.CLOSING;\n      this._socket.destroy();\n    }\n  }\n}\n\nreadyStates.forEach((readyState, i) => {\n  WebSocket[readyStates[i]] = i;\n});\n\n//\n// Add the `onopen`, `onerror`, `onclose`, and `onmessage` attributes.\n// See https://html.spec.whatwg.org/multipage/comms.html#the-websocket-interface\n//\n['open', 'error', 'close', 'message'].forEach((method) => {\n  Object.defineProperty(WebSocket.prototype, `on${method}`, {\n    /**\n     * Return the listener of the event.\n     *\n     * @return {(Function|undefined)} The event listener or `undefined`\n     * @public\n     */\n    get() {\n      const listeners = this.listeners(method);\n      for (var i = 0; i < listeners.length; i++) {\n        if (listeners[i]._listener) return listeners[i]._listener;\n      }\n\n      return undefined;\n    },\n    /**\n     * Add a listener for the event.\n     *\n     * @param {Function} listener The listener to add\n     * @public\n     */\n    set(listener) {\n      const listeners = this.listeners(method);\n      for (var i = 0; i < listeners.length; i++) {\n        //\n        // Remove only the listeners added via `addEventListener`.\n        //\n        if (listeners[i]._listener) this.removeListener(method, listeners[i]);\n      }\n      this.addEventListener(method, listener);\n    }\n  });\n});\n\nWebSocket.prototype.addEventListener = EventTarget.addEventListener;\nWebSocket.prototype.removeEventListener = EventTarget.removeEventListener;\n\nmodule.exports = WebSocket;\n\n/**\n * Initialize a WebSocket client.\n *\n * @param {(String|url.Url|url.URL)} address The URL to which to connect\n * @param {String} protocols The subprotocols\n * @param {Object} options Connection options\n * @param {(Boolean|Object)} options.perMessageDeflate Enable/disable permessage-deflate\n * @param {Number} options.handshakeTimeout Timeout in milliseconds for the handshake request\n * @param {Number} options.protocolVersion Value of the `Sec-WebSocket-Version` header\n * @param {String} options.origin Value of the `Origin` or `Sec-WebSocket-Origin` header\n * @param {Number} options.maxPayload The maximum allowed message size\n * @private\n */\nfunction initAsClient(address, protocols, options) {\n  options = Object.assign(\n    {\n      protocolVersion: protocolVersions[1],\n      perMessageDeflate: true,\n      maxPayload: 100 * 1024 * 1024\n    },\n    options,\n    {\n      createConnection: undefined,\n      socketPath: undefined,\n      hostname: undefined,\n      protocol: undefined,\n      timeout: undefined,\n      method: undefined,\n      auth: undefined,\n      host: undefined,\n      path: undefined,\n      port: undefined\n    }\n  );\n\n  if (protocolVersions.indexOf(options.protocolVersion) === -1) {\n    throw new RangeError(\n      `Unsupported protocol version: ${options.protocolVersion} ` +\n        `(supported versions: ${protocolVersions.join(', ')})`\n    );\n  }\n\n  this._isServer = false;\n\n  var parsedUrl;\n\n  if (typeof address === 'object' && address.href !== undefined) {\n    parsedUrl = address;\n    this.url = address.href;\n  } else {\n    //\n    // The WHATWG URL constructor is not available on Node.js < 6.13.0\n    //\n    parsedUrl = url.URL ? new url.URL(address) : url.parse(address);\n    this.url = address;\n  }\n\n  const isUnixSocket = parsedUrl.protocol === 'ws+unix:';\n\n  if (!parsedUrl.host && (!isUnixSocket || !parsedUrl.pathname)) {\n    throw new Error(`Invalid URL: ${this.url}`);\n  }\n\n  const isSecure =\n    parsedUrl.protocol === 'wss:' || parsedUrl.protocol === 'https:';\n  const key = crypto.randomBytes(16).toString('base64');\n  const httpObj = isSecure ? https : http;\n  const path = parsedUrl.search\n    ? `${parsedUrl.pathname || '/'}${parsedUrl.search}`\n    : parsedUrl.pathname || '/';\n  var perMessageDeflate;\n\n  options.createConnection = isSecure ? tlsConnect : netConnect;\n  options.port = parsedUrl.port || (isSecure ? 443 : 80);\n  options.host = parsedUrl.hostname.startsWith('[')\n    ? parsedUrl.hostname.slice(1, -1)\n    : parsedUrl.hostname;\n  options.headers = Object.assign(\n    {\n      'Sec-WebSocket-Version': options.protocolVersion,\n      'Sec-WebSocket-Key': key,\n      Connection: 'Upgrade',\n      Upgrade: 'websocket'\n    },\n    options.headers\n  );\n  options.path = path;\n\n  if (options.perMessageDeflate) {\n    perMessageDeflate = new PerMessageDeflate(\n      options.perMessageDeflate !== true ? options.perMessageDeflate : {},\n      false,\n      options.maxPayload\n    );\n    options.headers['Sec-WebSocket-Extensions'] = extension.format({\n      [PerMessageDeflate.extensionName]: perMessageDeflate.offer()\n    });\n  }\n  if (protocols) {\n    options.headers['Sec-WebSocket-Protocol'] = protocols;\n  }\n  if (options.origin) {\n    if (options.protocolVersion < 13) {\n      options.headers['Sec-WebSocket-Origin'] = options.origin;\n    } else {\n      options.headers.Origin = options.origin;\n    }\n  }\n  if (parsedUrl.auth) {\n    options.auth = parsedUrl.auth;\n  } else if (parsedUrl.username || parsedUrl.password) {\n    options.auth = `${parsedUrl.username}:${parsedUrl.password}`;\n  }\n\n  if (isUnixSocket) {\n    const parts = path.split(':');\n\n    options.socketPath = parts[0];\n    options.path = parts[1];\n  }\n\n  var req = (this._req = httpObj.get(options));\n\n  if (options.handshakeTimeout) {\n    req.setTimeout(options.handshakeTimeout, () =>\n      abortHandshake(this, req, 'Opening handshake has timed out')\n    );\n  }\n\n  req.on('error', (err) => {\n    if (this._req.aborted) return;\n\n    req = this._req = null;\n    this.readyState = WebSocket.CLOSING;\n    this.emit('error', err);\n    this.emitClose();\n  });\n\n  req.on('response', (res) => {\n    if (this.emit('unexpected-response', req, res)) return;\n\n    abortHandshake(this, req, `Unexpected server response: ${res.statusCode}`);\n  });\n\n  req.on('upgrade', (res, socket, head) => {\n    this.emit('upgrade', res);\n\n    //\n    // The user may have closed the connection from a listener of the `upgrade`\n    // event.\n    //\n    if (this.readyState !== WebSocket.CONNECTING) return;\n\n    req = this._req = null;\n\n    const digest = crypto\n      .createHash('sha1')\n      .update(key + constants.GUID, 'binary')\n      .digest('base64');\n\n    if (res.headers['sec-websocket-accept'] !== digest) {\n      abortHandshake(this, socket, 'Invalid Sec-WebSocket-Accept header');\n      return;\n    }\n\n    const serverProt = res.headers['sec-websocket-protocol'];\n    const protList = (protocols || '').split(/, */);\n    var protError;\n\n    if (!protocols && serverProt) {\n      protError = 'Server sent a subprotocol but none was requested';\n    } else if (protocols && !serverProt) {\n      protError = 'Server sent no subprotocol';\n    } else if (serverProt && protList.indexOf(serverProt) === -1) {\n      protError = 'Server sent an invalid subprotocol';\n    }\n\n    if (protError) {\n      abortHandshake(this, socket, protError);\n      return;\n    }\n\n    if (serverProt) this.protocol = serverProt;\n\n    if (perMessageDeflate) {\n      try {\n        const extensions = extension.parse(\n          res.headers['sec-websocket-extensions']\n        );\n\n        if (extensions[PerMessageDeflate.extensionName]) {\n          perMessageDeflate.accept(extensions[PerMessageDeflate.extensionName]);\n          this._extensions[PerMessageDeflate.extensionName] = perMessageDeflate;\n        }\n      } catch (err) {\n        abortHandshake(this, socket, 'Invalid Sec-WebSocket-Extensions header');\n        return;\n      }\n    }\n\n    this.setSocket(socket, head, options.maxPayload);\n  });\n}\n\n/**\n * Create a `net.Socket` and initiate a connection.\n *\n * @param {Object} options Connection options\n * @return {net.Socket} The newly created socket used to start the connection\n * @private\n */\nfunction netConnect(options) {\n  //\n  // Override `options.path` only if `options` is a copy of the original options\n  // object. This is always true on Node.js >= 8 but not on Node.js 6 where\n  // `options.socketPath` might be `undefined` even if the `socketPath` option\n  // was originally set.\n  //\n  if (options.protocolVersion) options.path = options.socketPath;\n  return net.connect(options);\n}\n\n/**\n * Create a `tls.TLSSocket` and initiate a connection.\n *\n * @param {Object} options Connection options\n * @return {tls.TLSSocket} The newly created socket used to start the connection\n * @private\n */\nfunction tlsConnect(options) {\n  options.path = undefined;\n  options.servername = options.servername || options.host;\n  return tls.connect(options);\n}\n\n/**\n * Abort the handshake and emit an error.\n *\n * @param {WebSocket} websocket The WebSocket instance\n * @param {(http.ClientRequest|net.Socket)} stream The request to abort or the\n *     socket to destroy\n * @param {String} message The error message\n * @private\n */\nfunction abortHandshake(websocket, stream, message) {\n  websocket.readyState = WebSocket.CLOSING;\n\n  const err = new Error(message);\n  Error.captureStackTrace(err, abortHandshake);\n\n  if (stream.setHeader) {\n    stream.abort();\n    stream.once('abort', websocket.emitClose.bind(websocket));\n    websocket.emit('error', err);\n  } else {\n    stream.destroy(err);\n    stream.once('error', websocket.emit.bind(websocket, 'error'));\n    stream.once('close', websocket.emitClose.bind(websocket));\n  }\n}\n\n/**\n * The listener of the `Receiver` `'conclude'` event.\n *\n * @param {Number} code The status code\n * @param {String} reason The reason for closing\n * @private\n */\nfunction receiverOnConclude(code, reason) {\n  const websocket = this[kWebSocket];\n\n  websocket._socket.removeListener('data', socketOnData);\n  websocket._socket.resume();\n\n  websocket._closeFrameReceived = true;\n  websocket._closeMessage = reason;\n  websocket._closeCode = code;\n\n  if (code === 1005) websocket.close();\n  else websocket.close(code, reason);\n}\n\n/**\n * The listener of the `Receiver` `'drain'` event.\n *\n * @private\n */\nfunction receiverOnDrain() {\n  this[kWebSocket]._socket.resume();\n}\n\n/**\n * The listener of the `Receiver` `'error'` event.\n *\n * @param {(RangeError|Error)} err The emitted error\n * @private\n */\nfunction receiverOnError(err) {\n  const websocket = this[kWebSocket];\n\n  websocket._socket.removeListener('data', socketOnData);\n\n  websocket.readyState = WebSocket.CLOSING;\n  websocket._closeCode = err[constants.kStatusCode];\n  websocket.emit('error', err);\n  websocket._socket.destroy();\n}\n\n/**\n * The listener of the `Receiver` `'finish'` event.\n *\n * @private\n */\nfunction receiverOnFinish() {\n  this[kWebSocket].emitClose();\n}\n\n/**\n * The listener of the `Receiver` `'message'` event.\n *\n * @param {(String|Buffer|ArrayBuffer|Buffer[])} data The message\n * @private\n */\nfunction receiverOnMessage(data) {\n  this[kWebSocket].emit('message', data);\n}\n\n/**\n * The listener of the `Receiver` `'ping'` event.\n *\n * @param {Buffer} data The data included in the ping frame\n * @private\n */\nfunction receiverOnPing(data) {\n  const websocket = this[kWebSocket];\n\n  websocket.pong(data, !websocket._isServer, constants.NOOP);\n  websocket.emit('ping', data);\n}\n\n/**\n * The listener of the `Receiver` `'pong'` event.\n *\n * @param {Buffer} data The data included in the pong frame\n * @private\n */\nfunction receiverOnPong(data) {\n  this[kWebSocket].emit('pong', data);\n}\n\n/**\n * The listener of the `net.Socket` `'close'` event.\n *\n * @private\n */\nfunction socketOnClose() {\n  const websocket = this[kWebSocket];\n\n  this.removeListener('close', socketOnClose);\n  this.removeListener('end', socketOnEnd);\n\n  websocket.readyState = WebSocket.CLOSING;\n\n  //\n  // The close frame might not have been received or the `'end'` event emitted,\n  // for example, if the socket was destroyed due to an error. Ensure that the\n  // `receiver` stream is closed after writing any remaining buffered data to\n  // it. If the readable side of the socket is in flowing mode then there is no\n  // buffered data as everything has been already written and `readable.read()`\n  // will return `null`. If instead, the socket is paused, any possible buffered\n  // data will be read as a single chunk and emitted synchronously in a single\n  // `'data'` event.\n  //\n  websocket._socket.read();\n  websocket._receiver.end();\n\n  this.removeListener('data', socketOnData);\n  this[kWebSocket] = undefined;\n\n  clearTimeout(websocket._closeTimer);\n\n  if (\n    websocket._receiver._writableState.finished ||\n    websocket._receiver._writableState.errorEmitted\n  ) {\n    websocket.emitClose();\n  } else {\n    websocket._receiver.on('error', receiverOnFinish);\n    websocket._receiver.on('finish', receiverOnFinish);\n  }\n}\n\n/**\n * The listener of the `net.Socket` `'data'` event.\n *\n * @param {Buffer} chunk A chunk of data\n * @private\n */\nfunction socketOnData(chunk) {\n  if (!this[kWebSocket]._receiver.write(chunk)) {\n    this.pause();\n  }\n}\n\n/**\n * The listener of the `net.Socket` `'end'` event.\n *\n * @private\n */\nfunction socketOnEnd() {\n  const websocket = this[kWebSocket];\n\n  websocket.readyState = WebSocket.CLOSING;\n  websocket._receiver.end();\n  this.end();\n}\n\n/**\n * The listener of the `net.Socket` `'error'` event.\n *\n * @private\n */\nfunction socketOnError() {\n  const websocket = this[kWebSocket];\n\n  this.removeListener('error', socketOnError);\n  this.on('error', constants.NOOP);\n\n  if (websocket) {\n    websocket.readyState = WebSocket.CLOSING;\n    this.destroy();\n  }\n}\n"]}