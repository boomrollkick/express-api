{"version":3,"sources":["../../../../../../../src/node_modules/@pm2/agent-node/node_modules/ws/lib/event-target.js"],"names":["Event","type","target","MessageEvent","data","CloseEvent","code","reason","wasClean","_closeFrameReceived","_closeFrameSent","OpenEvent","ErrorEvent","error","message","EventTarget","addEventListener","method","listener","onMessage","call","onClose","onError","onOpen","_listener","on","removeEventListener","listeners","i","length","removeListener","module","exports"],"mappings":"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","file":"event-target.js","sourcesContent":["'use strict';\n\n/**\n * Class representing an event.\n *\n * @private\n */\nclass Event {\n  /**\n   * Create a new `Event`.\n   *\n   * @param {String} type The name of the event\n   * @param {Object} target A reference to the target to which the event was dispatched\n   */\n  constructor(type, target) {\n    this.target = target;\n    this.type = type;\n  }\n}\n\n/**\n * Class representing a message event.\n *\n * @extends Event\n * @private\n */\nclass MessageEvent extends Event {\n  /**\n   * Create a new `MessageEvent`.\n   *\n   * @param {(String|Buffer|ArrayBuffer|Buffer[])} data The received data\n   * @param {WebSocket} target A reference to the target to which the event was dispatched\n   */\n  constructor(data, target) {\n    super('message', target);\n\n    this.data = data;\n  }\n}\n\n/**\n * Class representing a close event.\n *\n * @extends Event\n * @private\n */\nclass CloseEvent extends Event {\n  /**\n   * Create a new `CloseEvent`.\n   *\n   * @param {Number} code The status code explaining why the connection is being closed\n   * @param {String} reason A human-readable string explaining why the connection is closing\n   * @param {WebSocket} target A reference to the target to which the event was dispatched\n   */\n  constructor(code, reason, target) {\n    super('close', target);\n\n    this.wasClean = target._closeFrameReceived && target._closeFrameSent;\n    this.reason = reason;\n    this.code = code;\n  }\n}\n\n/**\n * Class representing an open event.\n *\n * @extends Event\n * @private\n */\nclass OpenEvent extends Event {\n  /**\n   * Create a new `OpenEvent`.\n   *\n   * @param {WebSocket} target A reference to the target to which the event was dispatched\n   */\n  constructor(target) {\n    super('open', target);\n  }\n}\n\n/**\n * Class representing an error event.\n *\n * @extends Event\n * @private\n */\nclass ErrorEvent extends Event {\n  /**\n   * Create a new `ErrorEvent`.\n   *\n   * @param {Object} error The error that generated this event\n   * @param {WebSocket} target A reference to the target to which the event was dispatched\n   */\n  constructor(error, target) {\n    super('error', target);\n\n    this.message = error.message;\n    this.error = error;\n  }\n}\n\n/**\n * This provides methods for emulating the `EventTarget` interface. It's not\n * meant to be used directly.\n *\n * @mixin\n */\nconst EventTarget = {\n  /**\n   * Register an event listener.\n   *\n   * @param {String} method A string representing the event type to listen for\n   * @param {Function} listener The listener to add\n   * @public\n   */\n  addEventListener(method, listener) {\n    if (typeof listener !== 'function') return;\n\n    function onMessage(data) {\n      listener.call(this, new MessageEvent(data, this));\n    }\n\n    function onClose(code, message) {\n      listener.call(this, new CloseEvent(code, message, this));\n    }\n\n    function onError(error) {\n      listener.call(this, new ErrorEvent(error, this));\n    }\n\n    function onOpen() {\n      listener.call(this, new OpenEvent(this));\n    }\n\n    if (method === 'message') {\n      onMessage._listener = listener;\n      this.on(method, onMessage);\n    } else if (method === 'close') {\n      onClose._listener = listener;\n      this.on(method, onClose);\n    } else if (method === 'error') {\n      onError._listener = listener;\n      this.on(method, onError);\n    } else if (method === 'open') {\n      onOpen._listener = listener;\n      this.on(method, onOpen);\n    } else {\n      this.on(method, listener);\n    }\n  },\n\n  /**\n   * Remove an event listener.\n   *\n   * @param {String} method A string representing the event type to remove\n   * @param {Function} listener The listener to remove\n   * @public\n   */\n  removeEventListener(method, listener) {\n    const listeners = this.listeners(method);\n\n    for (var i = 0; i < listeners.length; i++) {\n      if (listeners[i] === listener || listeners[i]._listener === listener) {\n        this.removeListener(method, listeners[i]);\n      }\n    }\n  }\n};\n\nmodule.exports = EventTarget;\n"]}