{"version":3,"sources":["../../../../../../../src/node_modules/@pm2/agent-node/node_modules/ws/lib/websocket-server.js"],"names":["EventEmitter","require","crypto","http","PerMessageDeflate","extension","constants","WebSocket","WebSocketServer","options","callback","Object","assign","maxPayload","perMessageDeflate","handleProtocols","clientTracking","verifyClient","noServer","backlog","server","host","path","port","TypeError","_server","createServer","req","res","body","STATUS_CODES","writeHead","length","end","listen","_removeListeners","addListeners","listening","emit","bind","error","upgrade","socket","head","handleUpgrade","ws","clients","Set","Error","address","cb","once","client","terminate","close","process","nextTick","emitClose","index","url","indexOf","pathname","slice","on","socketOnError","version","headers","extensions","method","toLowerCase","shouldHandle","abortHandshake","offers","parse","extensionName","accept","err","info","origin","secure","connection","authorized","encrypted","verified","code","message","completeUpgrade","readable","writable","destroy","key","createHash","update","GUID","digest","protocol","trim","split","push","params","value","format","_extensions","write","concat","join","removeListener","setSocket","add","delete","module","exports","map","keys","event","removeListeners","Connection","Buffer","byteLength","h"],"mappings":"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","file":"websocket-server.js","sourcesContent":["'use strict';\n\nconst EventEmitter = require('events');\nconst crypto = require('crypto');\nconst http = require('http');\n\nconst PerMessageDeflate = require('./permessage-deflate');\nconst extension = require('./extension');\nconst constants = require('./constants');\nconst WebSocket = require('./websocket');\n\n/**\n * Class representing a WebSocket server.\n *\n * @extends EventEmitter\n */\nclass WebSocketServer extends EventEmitter {\n  /**\n   * Create a `WebSocketServer` instance.\n   *\n   * @param {Object} options Configuration options\n   * @param {String} options.host The hostname where to bind the server\n   * @param {Number} options.port The port where to bind the server\n   * @param {http.Server} options.server A pre-created HTTP/S server to use\n   * @param {Function} options.verifyClient An hook to reject connections\n   * @param {Function} options.handleProtocols An hook to handle protocols\n   * @param {String} options.path Accept only connections matching this path\n   * @param {Boolean} options.noServer Enable no server mode\n   * @param {Boolean} options.clientTracking Specifies whether or not to track clients\n   * @param {(Boolean|Object)} options.perMessageDeflate Enable/disable permessage-deflate\n   * @param {Number} options.maxPayload The maximum allowed message size\n   * @param {Function} callback A listener for the `listening` event\n   */\n  constructor(options, callback) {\n    super();\n\n    options = Object.assign(\n      {\n        maxPayload: 100 * 1024 * 1024,\n        perMessageDeflate: false,\n        handleProtocols: null,\n        clientTracking: true,\n        verifyClient: null,\n        noServer: false,\n        backlog: null, // use default (511 as implemented in net.js)\n        server: null,\n        host: null,\n        path: null,\n        port: null\n      },\n      options\n    );\n\n    if (options.port == null && !options.server && !options.noServer) {\n      throw new TypeError(\n        'One of the \"port\", \"server\", or \"noServer\" options must be specified'\n      );\n    }\n\n    if (options.port != null) {\n      this._server = http.createServer((req, res) => {\n        const body = http.STATUS_CODES[426];\n\n        res.writeHead(426, {\n          'Content-Length': body.length,\n          'Content-Type': 'text/plain'\n        });\n        res.end(body);\n      });\n      this._server.listen(\n        options.port,\n        options.host,\n        options.backlog,\n        callback\n      );\n    } else if (options.server) {\n      this._server = options.server;\n    }\n\n    if (this._server) {\n      this._removeListeners = addListeners(this._server, {\n        listening: this.emit.bind(this, 'listening'),\n        error: this.emit.bind(this, 'error'),\n        upgrade: (req, socket, head) => {\n          this.handleUpgrade(req, socket, head, (ws) => {\n            this.emit('connection', ws, req);\n          });\n        }\n      });\n    }\n\n    if (options.perMessageDeflate === true) options.perMessageDeflate = {};\n    if (options.clientTracking) this.clients = new Set();\n    this.options = options;\n  }\n\n  /**\n   * Returns the bound address, the address family name, and port of the server\n   * as reported by the operating system if listening on an IP socket.\n   * If the server is listening on a pipe or UNIX domain socket, the name is\n   * returned as a string.\n   *\n   * @return {(Object|String|null)} The address of the server\n   * @public\n   */\n  address() {\n    if (this.options.noServer) {\n      throw new Error('The server is operating in \"noServer\" mode');\n    }\n\n    if (!this._server) return null;\n    return this._server.address();\n  }\n\n  /**\n   * Close the server.\n   *\n   * @param {Function} cb Callback\n   * @public\n   */\n  close(cb) {\n    if (cb) this.once('close', cb);\n\n    //\n    // Terminate all associated clients.\n    //\n    if (this.clients) {\n      for (const client of this.clients) client.terminate();\n    }\n\n    const server = this._server;\n\n    if (server) {\n      this._removeListeners();\n      this._removeListeners = this._server = null;\n\n      //\n      // Close the http server if it was internally created.\n      //\n      if (this.options.port != null) {\n        server.close(() => this.emit('close'));\n        return;\n      }\n    }\n\n    process.nextTick(emitClose, this);\n  }\n\n  /**\n   * See if a given request should be handled by this server instance.\n   *\n   * @param {http.IncomingMessage} req Request object to inspect\n   * @return {Boolean} `true` if the request is valid, else `false`\n   * @public\n   */\n  shouldHandle(req) {\n    if (this.options.path) {\n      const index = req.url.indexOf('?');\n      const pathname = index !== -1 ? req.url.slice(0, index) : req.url;\n\n      if (pathname !== this.options.path) return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Handle a HTTP Upgrade request.\n   *\n   * @param {http.IncomingMessage} req The request object\n   * @param {net.Socket} socket The network socket between the server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Function} cb Callback\n   * @public\n   */\n  handleUpgrade(req, socket, head, cb) {\n    socket.on('error', socketOnError);\n\n    const version = +req.headers['sec-websocket-version'];\n    const extensions = {};\n\n    if (\n      req.method !== 'GET' ||\n      req.headers.upgrade.toLowerCase() !== 'websocket' ||\n      !req.headers['sec-websocket-key'] ||\n      (version !== 8 && version !== 13) ||\n      !this.shouldHandle(req)\n    ) {\n      return abortHandshake(socket, 400);\n    }\n\n    if (this.options.perMessageDeflate) {\n      const perMessageDeflate = new PerMessageDeflate(\n        this.options.perMessageDeflate,\n        true,\n        this.options.maxPayload\n      );\n\n      try {\n        const offers = extension.parse(req.headers['sec-websocket-extensions']);\n\n        if (offers[PerMessageDeflate.extensionName]) {\n          perMessageDeflate.accept(offers[PerMessageDeflate.extensionName]);\n          extensions[PerMessageDeflate.extensionName] = perMessageDeflate;\n        }\n      } catch (err) {\n        return abortHandshake(socket, 400);\n      }\n    }\n\n    //\n    // Optionally call external client verification handler.\n    //\n    if (this.options.verifyClient) {\n      const info = {\n        origin:\n          req.headers[`${version === 8 ? 'sec-websocket-origin' : 'origin'}`],\n        secure: !!(req.connection.authorized || req.connection.encrypted),\n        req\n      };\n\n      if (this.options.verifyClient.length === 2) {\n        this.options.verifyClient(info, (verified, code, message, headers) => {\n          if (!verified) {\n            return abortHandshake(socket, code || 401, message, headers);\n          }\n\n          this.completeUpgrade(extensions, req, socket, head, cb);\n        });\n        return;\n      }\n\n      if (!this.options.verifyClient(info)) return abortHandshake(socket, 401);\n    }\n\n    this.completeUpgrade(extensions, req, socket, head, cb);\n  }\n\n  /**\n   * Upgrade the connection to WebSocket.\n   *\n   * @param {Object} extensions The accepted extensions\n   * @param {http.IncomingMessage} req The request object\n   * @param {net.Socket} socket The network socket between the server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Function} cb Callback\n   * @private\n   */\n  completeUpgrade(extensions, req, socket, head, cb) {\n    //\n    // Destroy the socket if the client has already sent a FIN packet.\n    //\n    if (!socket.readable || !socket.writable) return socket.destroy();\n\n    const key = crypto\n      .createHash('sha1')\n      .update(req.headers['sec-websocket-key'] + constants.GUID, 'binary')\n      .digest('base64');\n\n    const headers = [\n      'HTTP/1.1 101 Switching Protocols',\n      'Upgrade: websocket',\n      'Connection: Upgrade',\n      `Sec-WebSocket-Accept: ${key}`\n    ];\n\n    const ws = new WebSocket(null);\n    var protocol = req.headers['sec-websocket-protocol'];\n\n    if (protocol) {\n      protocol = protocol.trim().split(/ *, */);\n\n      //\n      // Optionally call external protocol selection handler.\n      //\n      if (this.options.handleProtocols) {\n        protocol = this.options.handleProtocols(protocol, req);\n      } else {\n        protocol = protocol[0];\n      }\n\n      if (protocol) {\n        headers.push(`Sec-WebSocket-Protocol: ${protocol}`);\n        ws.protocol = protocol;\n      }\n    }\n\n    if (extensions[PerMessageDeflate.extensionName]) {\n      const params = extensions[PerMessageDeflate.extensionName].params;\n      const value = extension.format({\n        [PerMessageDeflate.extensionName]: [params]\n      });\n      headers.push(`Sec-WebSocket-Extensions: ${value}`);\n      ws._extensions = extensions;\n    }\n\n    //\n    // Allow external modification/inspection of handshake headers.\n    //\n    this.emit('headers', headers, req);\n\n    socket.write(headers.concat('\\r\\n').join('\\r\\n'));\n    socket.removeListener('error', socketOnError);\n\n    ws.setSocket(socket, head, this.options.maxPayload);\n\n    if (this.clients) {\n      this.clients.add(ws);\n      ws.on('close', () => this.clients.delete(ws));\n    }\n\n    cb(ws);\n  }\n}\n\nmodule.exports = WebSocketServer;\n\n/**\n * Add event listeners on an `EventEmitter` using a map of <event, listener>\n * pairs.\n *\n * @param {EventEmitter} server The event emitter\n * @param {Object.<String, Function>} map The listeners to add\n * @return {Function} A function that will remove the added listeners when called\n * @private\n */\nfunction addListeners(server, map) {\n  for (const event of Object.keys(map)) server.on(event, map[event]);\n\n  return function removeListeners() {\n    for (const event of Object.keys(map)) {\n      server.removeListener(event, map[event]);\n    }\n  };\n}\n\n/**\n * Emit a `'close'` event on an `EventEmitter`.\n *\n * @param {EventEmitter} server The event emitter\n * @private\n */\nfunction emitClose(server) {\n  server.emit('close');\n}\n\n/**\n * Handle premature socket errors.\n *\n * @private\n */\nfunction socketOnError() {\n  this.destroy();\n}\n\n/**\n * Close the connection when preconditions are not fulfilled.\n *\n * @param {net.Socket} socket The socket of the upgrade request\n * @param {Number} code The HTTP response status code\n * @param {String} [message] The HTTP response body\n * @param {Object} [headers] Additional HTTP response headers\n * @private\n */\nfunction abortHandshake(socket, code, message, headers) {\n  if (socket.writable) {\n    message = message || http.STATUS_CODES[code];\n    headers = Object.assign(\n      {\n        Connection: 'close',\n        'Content-type': 'text/html',\n        'Content-Length': Buffer.byteLength(message)\n      },\n      headers\n    );\n\n    socket.write(\n      `HTTP/1.1 ${code} ${http.STATUS_CODES[code]}\\r\\n` +\n        Object.keys(headers)\n          .map((h) => `${h}: ${headers[h]}`)\n          .join('\\r\\n') +\n        '\\r\\n\\r\\n' +\n        message\n    );\n  }\n\n  socket.removeListener('error', socketOnError);\n  socket.destroy();\n}\n"]}