'use strict';

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

process.env.DEBUG = '*';

var Agent = require('..');
var proc = {
  axm_actions: [{ action_name: 'test', action_type: 'pm2' }]
};
var agent = new Agent({ // eslint-disable-line
  publicKey: 'zftc3kf0ehy12bo',
  secretKey: 'ptcsyi1n6chf9qs',
  appName: 'agent-node'
}, proc);

var init = function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_) {
    var listener;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return agent.start();

          case 2:
            // Add some custom actions
            setTimeout(function (_) {
              return proc.axm_actions.push({ action_name: 'lol', action_type: 'pm2' });
            }, 10000);
            // Listen

            listener = function listener(payload) {
              return console.log(payload);
            };

            agent.transport.on('trigger:pm2:action', listener);
            // Stop listening
            setTimeout(function (_) {
              return agent.transport.removeListener('trigger:pm2:action', listener);
            }, 10000);
            // Send packet
            agent.transport.send('exception', { key: 'value' });
            console.log('done.');

          case 8:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  }));

  return function init(_x) {
    return _ref.apply(this, arguments);
  };
}();
init();
//# sourceMappingURL=test.js.map