/* eslint-env mocha */

'use strict';

process.env.NODE_ENV = 'test';

var assert = require('assert');
var ws = require('ws');
var socks = require('simple-socks');

var Transport = require('../src/transport');

describe('Transporter', function (_) {
  var wss = null;
  var conn = null;

  var transporter = null;

  before(function () {
    wss = new ws.Server({ port: 64000 });
  });

  describe('Without proxy', function (_) {
    it('construct without error', function () {
      transporter = new Transport();
    });

    it('should set config correctly', function () {
      transporter.setConfig('ws://localhost:64000', { 'X-Test': true });
    });

    it('should connect correctly', function (done) {
      transporter.connect(function (err) {
        assert(err === null);
      });
      wss.once('connection', function (connection) {
        conn = connection;
        // TODO: check header
        done();
      });
    });

    it('must return false if message not formatted correctly', function () {
      assert(transporter.send('test') === false);
      assert(transporter.send({}) === false);
      assert(transporter.send({ channel: 'test' }) === false);
      assert(transporter.send({ payload: 'test' }) === false);
    });

    it('should send message correctly', function (done) {
      transporter.send({
        channel: 'test',
        payload: true
      });
      conn.once('message', function (msg) {
        msg = JSON.parse(msg);
        assert(msg.channel === 'test');
        assert(msg.payload === true);
        done();
      });
    });

    it('should receive message correctly', function (done) {
      transporter.once('test-2', function (p) {
        assert(p === true);
        done();
      });
      conn.send(JSON.stringify({ channel: 'test-2', payload: true }));
    });

    it('should disconnect correctly', function () {
      transporter.disconnect();
      // TODO: check disconnection on WSS
    });
  });

  describe('With proxy', function (_) {
    var proxyServer = null;
    var proxyClients = 0;
    var proxyTotalClients = 0;
    var proxyLastConn = null;

    before(function () {
      proxyServer = socks.createServer().listen(1080);

      proxyServer.on('proxyConnect', function (info) {
        proxyLastConn = info;
        proxyClients++;
        proxyTotalClients++;
      });
      proxyServer.on('proxyEnd', function (_) {
        proxyClients--;
      });
    });

    it('should set proxy conf correctly', function () {
      transporter.setConfig('ws://localhost:64000', { 'X-Test': true }, 'socks5://127.0.0.1:1080');
    });

    it('should connect correctly', function (done) {
      wss.once('connection', function (connection) {
        conn = connection;
        assert(proxyClients === 1);
        done();
      });
      transporter.connect(function (_) {});
    });

    it('should send message correctly', function (done) {
      transporter.send({
        channel: 'test',
        payload: true
      });
      conn.once('message', function (msg) {
        msg = JSON.parse(msg);
        assert(msg.channel === 'test');
        assert(msg.payload === true);
        done();
      });
    });

    it('should receive message correctly', function (done) {
      transporter.once('test-2', function (p) {
        assert(p === true);
        done();
      });
      conn.send(JSON.stringify({ channel: 'test-2', payload: true }));
    });

    after(function () {
      proxyServer.close();
    });
  });

  after(function () {
    transporter.disconnect();
    wss.close();
  });
});
//# sourceMappingURL=transport.js.map