/* eslint-env mocha */

'use strict';

process.env.NODE_ENV = 'test';

var assert = require('assert');
var async = require('async');
var http = require('http');
var socks = require('simple-socks');
var httpWrapper = require('../../src/utils/http');

describe('HTTP wrapper', function () {
  describe('open', function (_) {
    it('should fail with an error', function (done) {
      httpWrapper.open({ url: 'invalid-url' }, function (err) {
        assert(err instanceof Error);
        return done();
      });
    });
    it('should return json content', function (done) {
      var server = null;
      async.series([function (next) {
        server = http.createServer(function (req, res) {
          res.write(JSON.stringify({ response: 'json' }));
          res.end();
        }).listen(8080, next);
      }, function (next) {
        return httpWrapper.open({ url: 'http://localhost:8080' }, function (err, data) {
          assert(err === null);
          assert(data.response === 'json');
          return next();
        });
      }], function (err) {
        if (err) return done(err);
        return server.close(done);
      });
    });
    it('should return json content with proxy', function (done) {
      var server = null;
      var proxyServer = socks.createServer().listen(1080);
      var proxyTotalClients = 0;
      proxyServer.on('proxyConnect', function (_) {
        proxyTotalClients++;
      });
      async.series([function (next) {
        server = http.createServer(function (req, res) {
          res.write(JSON.stringify({ response: 'json' }));
          res.end();
        }).listen(8080, next);
      }, function (next) {
        return httpWrapper.open({ url: 'http://localhost:8080', proxy: 'socks5://127.0.0.1:1080' }, function (err, data) {
          assert(err === null);
          assert(data.response === 'json');
          assert(proxyTotalClients === 1);
          return next();
        });
      }], function (err) {
        if (err) return done(err);
        proxyServer.close();
        return server.close(done);
      });
    });
  });
  describe('getModule', function (_) {
    it('should return http module', function (done) {
      assert(httpWrapper.getModule('http://google.fr') === require('http'));
      assert(httpWrapper.getModule('http://google.fr/https://') === require('http'));
      return done();
    });
    it('should return https module', function (done) {
      assert(httpWrapper.getModule('https://google.fr') === require('https'));
      assert(httpWrapper.getModule('https://google.fr/http://') === require('https'));
      return done();
    });
  });
});
//# sourceMappingURL=http.js.map