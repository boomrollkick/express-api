{"version":3,"sources":["../../../../../../src/node_modules/@pm2/agent-node/tests/utils/http.js"],"names":["process","env","NODE_ENV","assert","require","async","http","socks","httpWrapper","describe","it","done","open","url","err","Error","server","series","next","createServer","req","res","write","JSON","stringify","response","end","listen","data","close","proxyServer","proxyTotalClients","on","proxy","getModule"],"mappings":"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","file":"http.js","sourcesContent":["/* eslint-env mocha */\n\n'use strict'\n\nprocess.env.NODE_ENV = 'test'\n\nconst assert = require('assert')\nconst async = require('async')\nconst http = require('http')\nconst socks = require('simple-socks')\nconst httpWrapper = require('../../src/utils/http')\n\ndescribe('HTTP wrapper', () => {\n  describe('open', _ => {\n    it('should fail with an error', (done) => {\n      httpWrapper.open({url: 'invalid-url'}, (err) => {\n        assert(err instanceof Error)\n        return done()\n      })\n    })\n    it('should return json content', (done) => {\n      let server = null\n      async.series([\n        (next) => {\n          server = http.createServer((req, res) => {\n            res.write(JSON.stringify({response: 'json'}))\n            res.end()\n          }).listen(8080, next)\n        },\n        (next) => httpWrapper.open({url: 'http://localhost:8080'}, (err, data) => {\n          assert(err === null)\n          assert(data.response === 'json')\n          return next()\n        })\n      ], (err) => {\n        if (err) return done(err)\n        return server.close(done)\n      })\n    })\n    it('should return json content with proxy', done => {\n      let server = null\n      let proxyServer = socks.createServer().listen(1080)\n      let proxyTotalClients = 0\n      proxyServer.on('proxyConnect', _ => {\n        proxyTotalClients++\n      })\n      async.series([\n        (next) => {\n          server = http.createServer((req, res) => {\n            res.write(JSON.stringify({response: 'json'}))\n            res.end()\n          }).listen(8080, next)\n        },\n        (next) => httpWrapper.open({url: 'http://localhost:8080', proxy: 'socks5://127.0.0.1:1080'}, (err, data) => {\n          assert(err === null)\n          assert(data.response === 'json')\n          assert(proxyTotalClients === 1)\n          return next()\n        })\n      ], (err) => {\n        if (err) return done(err)\n        proxyServer.close()\n        return server.close(done)\n      })\n    })\n  })\n  describe('getModule', _ => {\n    it('should return http module', (done) => {\n      assert(httpWrapper.getModule('http://google.fr') === require('http'))\n      assert(httpWrapper.getModule('http://google.fr/https://') === require('http'))\n      return done()\n    })\n    it('should return https module', (done) => {\n      assert(httpWrapper.getModule('https://google.fr') === require('https'))\n      assert(httpWrapper.getModule('https://google.fr/http://') === require('https'))\n      return done()\n    })\n  })\n})\n"]}