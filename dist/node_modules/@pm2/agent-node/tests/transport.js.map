{"version":3,"sources":["../../../../../src/node_modules/@pm2/agent-node/tests/transport.js"],"names":["process","env","NODE_ENV","assert","require","ws","socks","Transport","describe","wss","conn","transporter","before","Server","port","it","setConfig","connect","err","once","connection","done","send","channel","payload","msg","JSON","parse","p","stringify","disconnect","proxyServer","proxyClients","proxyTotalClients","proxyLastConn","createServer","listen","on","info","after","close"],"mappings":"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","file":"transport.js","sourcesContent":["/* eslint-env mocha */\n\n'use strict'\n\nprocess.env.NODE_ENV = 'test'\n\nconst assert = require('assert')\nconst ws = require('ws')\nconst socks = require('simple-socks')\n\nconst Transport = require('../src/transport')\n\ndescribe('Transporter', _ => {\n  let wss = null\n  let conn = null\n\n  let transporter = null\n\n  before(() => {\n    wss = new ws.Server({ port: 64000 })\n  })\n\n  describe('Without proxy', _ => {\n    it('construct without error', () => {\n      transporter = new Transport()\n    })\n\n    it('should set config correctly', () => {\n      transporter.setConfig('ws://localhost:64000', { 'X-Test': true })\n    })\n\n    it('should connect correctly', done => {\n      transporter.connect(err => {\n        assert(err === null)\n      })\n      wss.once('connection', connection => {\n        conn = connection\n        // TODO: check header\n        done()\n      })\n    })\n\n    it('must return false if message not formatted correctly', () => {\n      assert(transporter.send('test') === false)\n      assert(transporter.send({}) === false)\n      assert(transporter.send({ channel: 'test' }) === false)\n      assert(transporter.send({ payload: 'test' }) === false)\n    })\n\n    it('should send message correctly', done => {\n      transporter.send({\n        channel: 'test',\n        payload: true\n      })\n      conn.once('message', msg => {\n        msg = JSON.parse(msg)\n        assert(msg.channel === 'test')\n        assert(msg.payload === true)\n        done()\n      })\n    })\n\n    it('should receive message correctly', done => {\n      transporter.once('test-2', p => {\n        assert(p === true)\n        done()\n      })\n      conn.send(JSON.stringify({ channel: 'test-2', payload: true }))\n    })\n\n    it('should disconnect correctly', () => {\n      transporter.disconnect()\n      // TODO: check disconnection on WSS\n    })\n  })\n\n  describe('With proxy', _ => {\n    let proxyServer = null\n    let proxyClients = 0\n    let proxyTotalClients = 0\n    let proxyLastConn = null\n\n    before(() => {\n      proxyServer = socks.createServer().listen(1080)\n\n      proxyServer.on('proxyConnect', (info) => {\n        proxyLastConn = info\n        proxyClients++\n        proxyTotalClients++\n      })\n      proxyServer.on('proxyEnd', _ => {\n        proxyClients--\n      })\n    })\n\n    it('should set proxy conf correctly', () => {\n      transporter.setConfig('ws://localhost:64000', { 'X-Test': true }, 'socks5://127.0.0.1:1080')\n    })\n\n    it('should connect correctly', done => {\n      wss.once('connection', connection => {\n        conn = connection\n        assert(proxyClients === 1)\n        done()\n      })\n      transporter.connect(_ => {})\n    })\n\n    it('should send message correctly', done => {\n      transporter.send({\n        channel: 'test',\n        payload: true\n      })\n      conn.once('message', msg => {\n        msg = JSON.parse(msg)\n        assert(msg.channel === 'test')\n        assert(msg.payload === true)\n        done()\n      })\n    })\n\n    it('should receive message correctly', done => {\n      transporter.once('test-2', p => {\n        assert(p === true)\n        done()\n      })\n      conn.send(JSON.stringify({ channel: 'test-2', payload: true }))\n    })\n\n    after(() => {\n      proxyServer.close()\n    })\n  })\n\n  after(() => {\n    transporter.disconnect()\n    wss.close()\n  })\n})\n"]}