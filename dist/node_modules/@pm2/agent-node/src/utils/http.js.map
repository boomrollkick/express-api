{"version":3,"sources":["../../../../../../src/node_modules/@pm2/agent-node/src/utils/http.js"],"names":["url","require","ProxyAgent","module","exports","indexOf","opts","cb","http","getModule","parsedUrl","parse","data","options","hostname","path","port","method","agent","proxy","undefined","headers","JSON","stringify","length","req","request","res","body","setEncoding","on","chunk","toString","json","e","write","end"],"mappings":"AAAA;;;;;;AAEA,IAAMA,MAAMC,QAAQ,KAAR,CAAZ;AACA,IAAMC,aAAaD,QAAQ,aAAR,CAAnB;;AAEA;;;AAGAE,OAAOC,OAAP;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACE;;;;AADF,8BAKoBJ,GALpB,EAKyB;AACrB,aAAOA,IAAIK,OAAJ,CAAY,UAAZ,MAA4B,CAA5B,GAAgCJ,QAAQ,OAAR,CAAhC,GAAmDA,QAAQ,MAAR,CAA1D;AACD;AACD;;;;;;;;;;AARF;AAAA;AAAA,yBAiBeK,IAjBf,EAiBqBC,EAjBrB,EAiByB;AACrB,UAAMC,OAAO,KAAKC,SAAL,CAAeH,KAAKN,GAApB,CAAb;AACA,UAAMU,YAAYV,IAAIW,KAAJ,CAAUL,KAAKN,GAAf,CAAlB;AACA,UAAIY,OAAO,IAAX;AACA,UAAMC,UAAU;AACdC,kBAAUJ,UAAUI,QADN;AAEdC,cAAML,UAAUK,IAFF;AAGdC,cAAMN,UAAUM,IAHF;AAIdC,gBAAQX,KAAKW,MAJC;AAKdC,eAAOZ,KAAKa,KAAL,KAAeC,SAAf,GAA2B,IAAIlB,UAAJ,CAAeI,KAAKa,KAApB,CAA3B,GAAwDC,SALjD;AAMdC,iBAASf,KAAKe;AANA,OAAhB;AAQA,UAAIf,KAAKM,IAAT,EAAe;AACbA,eAAOU,KAAKC,SAAL,CAAejB,KAAKM,IAApB,CAAP;AACAC,gBAAQQ,OAAR,GAAkB;AAChB,0BAAgB,kBADA;AAEhB,4BAAkBT,KAAKY;AAFP,SAAlB;AAID;AACD,UAAMC,MAAMjB,KAAKkB,OAAL,CAAab,OAAb,EAAsB,UAACc,GAAD,EAAS;AACzC,YAAIC,OAAO,EAAX;AACAD,YAAIE,WAAJ,CAAgB,MAAhB;AACAF,YAAIG,EAAJ,CAAO,MAAP,EAAe,UAACC,KAAD,EAAW;AACxBH,kBAAQG,MAAMC,QAAN,EAAR;AACD,SAFD;AAGAL,YAAIG,EAAJ,CAAO,KAAP,EAAc,YAAM;AAClB,cAAIG,OAAO,IAAX;AACA,cAAI;AACFA,mBAAOX,KAAKX,KAAL,CAAWiB,IAAX,CAAP;AACD,WAFD,CAEE,OAAOM,CAAP,EAAU;AACV,mBAAO3B,GAAG2B,CAAH,CAAP;AACD;AACD,iBAAO3B,GAAG,IAAH,EAAS0B,IAAT,CAAP;AACD,SARD;AASD,OAfW,CAAZ;AAgBAR,UAAIK,EAAJ,CAAO,OAAP,EAAgBvB,EAAhB;AACA,UAAIK,IAAJ,EAAU;AACRa,YAAIU,KAAJ,CAAUvB,IAAV;AACD;AACDa,UAAIW,GAAJ;AACD;AAzDH;;AAAA;AAAA","file":"http.js","sourcesContent":["'use strict'\n\nconst url = require('url')\nconst ProxyAgent = require('proxy-agent')\n\n/**\n * HTTP wrapper\n */\nmodule.exports = class HTTPClient {\n  /**\n   * Return native module (HTTP/HTTPS)\n   * @param {String} url\n   */\n  static getModule (url) {\n    return url.indexOf('https://') === 0 ? require('https') : require('http')\n  }\n  /**\n   * Send an HTTP request and return data or error if status > 200\n   * @param {Object} opts\n   * @param {String} opts.url\n   * @param {String} opts.method\n   * @param {Object} [opts.data]\n   * @param {Object} [opts.headers]\n   * @param {Function} cb invoked with <err, body>\n   */\n  static open (opts, cb) {\n    const http = this.getModule(opts.url)\n    const parsedUrl = url.parse(opts.url)\n    let data = null\n    const options = {\n      hostname: parsedUrl.hostname,\n      path: parsedUrl.path,\n      port: parsedUrl.port,\n      method: opts.method,\n      agent: opts.proxy !== undefined ? new ProxyAgent(opts.proxy) : undefined,\n      headers: opts.headers\n    }\n    if (opts.data) {\n      data = JSON.stringify(opts.data)\n      options.headers = {\n        'Content-Type': 'application/json',\n        'Content-Length': data.length\n      }\n    }\n    const req = http.request(options, (res) => {\n      let body = ''\n      res.setEncoding('utf8')\n      res.on('data', (chunk) => {\n        body += chunk.toString()\n      })\n      res.on('end', () => {\n        let json = null\n        try {\n          json = JSON.parse(body)\n        } catch (e) {\n          return cb(e)\n        }\n        return cb(null, json)\n      })\n    })\n    req.on('error', cb)\n    if (data) {\n      req.write(data)\n    }\n    req.end()\n  }\n}\n"]}