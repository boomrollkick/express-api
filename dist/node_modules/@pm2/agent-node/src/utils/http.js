'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var url = require('url');
var ProxyAgent = require('proxy-agent');

/**
 * HTTP wrapper
 */
module.exports = function () {
  function HTTPClient() {
    _classCallCheck(this, HTTPClient);
  }

  _createClass(HTTPClient, null, [{
    key: 'getModule',

    /**
     * Return native module (HTTP/HTTPS)
     * @param {String} url
     */
    value: function getModule(url) {
      return url.indexOf('https://') === 0 ? require('https') : require('http');
    }
    /**
     * Send an HTTP request and return data or error if status > 200
     * @param {Object} opts
     * @param {String} opts.url
     * @param {String} opts.method
     * @param {Object} [opts.data]
     * @param {Object} [opts.headers]
     * @param {Function} cb invoked with <err, body>
     */

  }, {
    key: 'open',
    value: function open(opts, cb) {
      var http = this.getModule(opts.url);
      var parsedUrl = url.parse(opts.url);
      var data = null;
      var options = {
        hostname: parsedUrl.hostname,
        path: parsedUrl.path,
        port: parsedUrl.port,
        method: opts.method,
        agent: opts.proxy !== undefined ? new ProxyAgent(opts.proxy) : undefined,
        headers: opts.headers
      };
      if (opts.data) {
        data = JSON.stringify(opts.data);
        options.headers = {
          'Content-Type': 'application/json',
          'Content-Length': data.length
        };
      }
      var req = http.request(options, function (res) {
        var body = '';
        res.setEncoding('utf8');
        res.on('data', function (chunk) {
          body += chunk.toString();
        });
        res.on('end', function () {
          var json = null;
          try {
            json = JSON.parse(body);
          } catch (e) {
            return cb(e);
          }
          return cb(null, json);
        });
      });
      req.on('error', cb);
      if (data) {
        req.write(data);
      }
      req.end();
    }
  }]);

  return HTTPClient;
}();
//# sourceMappingURL=http.js.map