{"version":3,"sources":["../../../../../src/node_modules/@pm2/agent-node/src/transport.js"],"names":["WebSocket","require","EventEmitter2","ProxyAgent","debug","module","exports","wildcard","delimiter","endpoint","headers","ws","pingInterval","buffer","maxBufferLength","proxy","Object","keys","map","header","join","cb","perMessageDeflate","handshakeTimeout","agent","undefined","e","onError","err","removeAllListeners","once","removeListener","on","onClose","bind","message","clearInterval","setInterval","ping","clearBuffer","pong","onMessage","terminate","connect","rawData","data","JSON","parse","channel","payload","emit","isConnected","noResponse","clearTimeout","timeout","setTimeout","removeEventListener","packet","bufferPacket","send","stringify","console","log","length","pop","push","forEach","close","readyState"],"mappings":"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","file":"transport.js","sourcesContent":["'use strict'\n\nconst WebSocket = require('ws')\nconst EventEmitter2 = require('eventemitter2').EventEmitter2\nconst ProxyAgent = require('proxy-agent')\nconst debug = require('debug')('agent:transport')\n\nmodule.exports = class WebsocketTransport extends EventEmitter2 {\n  /**\n   * Construct new websocket instance for specific endpoint\n   */\n  constructor () {\n    super({\n      wildcard: true,\n      delimiter: ':'\n    })\n    this.endpoint = null\n    this.headers = null\n    this.ws = null\n    this.pingInterval = null\n    this.buffer = []\n    this.maxBufferLength = 100000\n  }\n\n  /**\n   * Set config for instance\n   * @param {Object} headers Key-value with upgrade headers\n   * @param {String} endpoint Websocket endpoint\n   * @param {String} proxy Proxy\n   */\n  setConfig (endpoint, headers, proxy) {\n    debug(`Init new websocket transport with endpoint: ${endpoint} and headers: [${Object.keys(headers).map(header => `${header}: ${headers[header]}`).join(',')}]`)\n    this.endpoint = endpoint\n    this.headers = headers\n    this.proxy = proxy\n  }\n\n  /**\n   * Connect to websocket server\n   * @param {Function} cb Invoked with <err, ws>\n   */\n  connect (cb) {\n    debug('Connect transporter to websocket server')\n\n    try {\n      this.ws = new WebSocket(this.endpoint, {\n        perMessageDeflate: false,\n        handshakeTimeout: 5 * 1000, // 5 seconds\n        headers: this.headers,\n        agent: typeof this.proxy !== 'undefined' ? new ProxyAgent(this.proxy) : undefined\n      })\n    } catch (e) {\n      return cb(e)\n    }\n\n    const onError = (err) => {\n      this.ws.removeAllListeners()\n      return cb(err)\n    }\n    this.ws.once('error', onError)\n    this.ws.once('open', _ => {\n      debug('Websocket connected')\n      this.ws.removeListener('error', onError)\n      this.ws.on('close', this.onClose.bind(this))\n      // We don't handle errors (DNS issues...), ping will close/reopen if any error is found\n      this.ws.on('error', err => debug(`Got an error with websocket connection: ${err.message}`))\n      if (this.pingInterval) clearInterval(this.pingInterval)\n      this.pingInterval = setInterval(this.ping.bind(this), 30 * 1000) // 30 seconds\n      this.clearBuffer()\n      return cb(null, this.ws)\n    })\n    this.ws.on('ping', _ => {\n      debug('Received ping! Pong sended!')\n      this.ws.pong()\n    })\n    this.ws.on('message', this.onMessage.bind(this))\n  }\n\n  /**\n   * When websocket connection is closed, try to reconnect\n   */\n  onClose () {\n    debug(`Websocket connection is closed, try to reconnect`)\n    this.ws.terminate()\n    this.ws.removeAllListeners()\n    return this.connect(err => debug(err ? `Got an error on websocket connection: ${err.message}` : 'Websocket connection successfuly reconnected'))\n  }\n\n  /**\n   * Send to listeners\n   * @param {String} rawData\n   */\n  onMessage (rawData) {\n    let data = null\n    try {\n      data = JSON.parse(rawData)\n    } catch (e) {\n      return debug(`Get non-JSON data from websocket server: ${rawData}`)\n    }\n    if (!data.channel || !data.payload) return debug(`Get bad message from websocket server: ${rawData}`)\n    return this.emit(data.channel, data.payload)\n  }\n\n  /**\n   * Try to ping server, if we get no response, disconnect and try to reconnect\n   */\n  ping () {\n    if (!this.isConnected()) return\n    const noResponse = _ => {\n      clearTimeout(timeout)\n      debug('We can\\'t get any response to ping from websocket server, trying to reconnect')\n      this.ws.terminate()\n      return this.connect(err => debug(err ? `Got an error on websocket connection: ${err.message}` : 'Websocket connection successfuly reconnected'))\n    }\n    const timeout = setTimeout(noResponse.bind(this), 5 * 1000) // 5 seconds timeout\n\n    this.ws.ping((err) => {\n      if (err) return noResponse()\n      return debug('Successfuly sended a ping!')\n    })\n    this.ws.on('pong', _ => {\n      clearTimeout(timeout)\n      this.ws.removeEventListener('pong')\n      return debug('Websocket server has replied to ping!')\n    })\n  }\n\n  /**\n   * Send data to websocket server\n   * @param {Object} packet Packet to send (send with JSON)\n   * @return {Boolean} success\n   */\n  send (packet) {\n    if (!packet.channel || !packet.payload) return false\n    if (!this.isConnected()) {\n      this.bufferPacket(packet)\n      return false\n    }\n    try {\n      this.ws.send(JSON.stringify(packet))\n    } catch (err) {\n      debug(`Failed to send packet: ${err.message}`)\n      console.log(err)\n      this.bufferPacket(packet)\n      return false\n    }\n    return true\n  }\n\n  /**\n   * Packet couldn't be send, so buffer it into an array\n   * @param {Object} packet Packet to send (send with JSON)\n   */\n  bufferPacket (packet) {\n    if (this.buffer.length > this.maxBufferLength) this.buffer.pop()\n    this.buffer.push(packet)\n  }\n\n  /**\n   * Send every packet stored in buffer\n   */\n  clearBuffer () {\n    this.buffer.forEach(this.send.bind(this))\n  }\n\n  /**\n   * Disconnect from websocket server\n   */\n  disconnect () {\n    debug('Disconnect from websocket server')\n    if (this.pingInterval) clearInterval(this.pingInterval)\n    if (this.ws) {\n      this.ws.removeAllListeners('close')\n      this.ws.removeAllListeners('error')\n      return this.ws.close()\n    }\n  }\n\n  /**\n   * Return if websocket is connected or not\n   */\n  isConnected () {\n    return this.ws && this.ws.readyState < 2 // Connected or connecting\n  }\n}\n"]}