{"version":3,"sources":["../../../../../src/node_modules/@pm2/agent-node/src/index.js"],"names":["debug","require","os","http","cst","meta","version","Transport","module","exports","config","proc","publicKey","secretKey","appName","proxy","err","Error","serverName","hostname","toLowerCase","logFilter","RegExp","unique_id","generateUniqueId","process","sendLogs","methods","processOutWrite","stdout","write","processErrWrite","stderr","transport","stop","Promise","resolve","reject","isStopping","checkCredentials","endpoints","restartOnError","setConfig","ws","PM2_VERSION","PROTOCOL_VERSION","connect","endpoint","internalIp","computeInternalIp","statusInterval","setInterval","sendStatus","bind","listenForLogs","endpointUpdateInterval","listenEndpointUpdate","message","setTimeout","start","catch","s","hexDigits","i","substr","Math","floor","random","join","createdAt","Date","getTime","pid","name","interpreter","restart_time","created_at","exec_mode","watching","pm_uptime","status","pm_id","cpu","getCpuUsage","memory","getMemoryUsage","versioning","node_env","env","NODE_ENV","axm_actions","axm_monitor","axm_options","axm_dynamic","dynamic","disconnect","cb","open","url","ROOT_URL","method","data","public_id","private_id","headers","disabled","pending","active","JSON","stringify","channel","payload","send","Object","assign","server","rev","reply","ret","method_name","app_name","machine_name","public_key","on","includes","self","args","apply","test","at","generateProcess","getServerMeta","server_name","internal_ip","rev_con","clearInterval"],"mappings":"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","file":"index.js","sourcesContent":["'use strict'\n\nconst debug = require('debug')('agent:main')\nconst os = require('os')\nconst http = require('./utils/http')\nconst cst = require('../constants')\nconst meta = require('./utils/meta')\nconst version = require('../package.json').version\nconst Transport = require('./transport')\n\nmodule.exports = class Agent {\n  /**\n   * Init new agent\n   * @param {Object} config Configuration\n   * @param {String} config.publicKey\n   * @param {String} config.secretKey\n   * @param {String} config.appName\n   * @param {String} [config.serverName] Will be hostname if not provided\n   * @param {String} [config.logFilter] RegExp used to filter logs\n   * @param {Object} process Process to send\n   */\n  constructor (config, proc) {\n    // Valid config\n    if (!config ||\n      typeof config.publicKey !== 'string' ||\n      typeof config.secretKey !== 'string' ||\n      typeof config.appName !== 'string' ||\n      (typeof config.proxy !== 'undefined' && config.proxy !== 'string') ||\n      typeof proc !== 'object') {\n      const err = new Error('You need to provide a valid configuration and process!')\n      return err\n    }\n    debug(`New agent constructed with: [public: ${config.publicKey}, secret: ${config.secretKey}, app: ${config.appName}]`)\n    if (!config.serverName) config.serverName = os.hostname().toLowerCase()\n    this.config = config\n    if (this.config.logFilter && !(this.config.logFilter instanceof RegExp)) {\n      this.config.logFilter = new RegExp(this.config.logFilter)\n    }\n    proc.unique_id = this.generateUniqueId()\n    this.process = proc\n    this.sendLogs = false // Options to override startLogging and stopLogging\n    this.methods = { // Used to destruct\n      processOutWrite: process.stdout.write,\n      processErrWrite: process.stderr.write\n    }\n    // Init transport (listen event emitter even if an error occur)\n    this.transport = new Transport()\n  }\n\n  /**\n   * Used to destruct agent\n   */\n  destruct () {\n    this.stop()\n    process.stdout.write = this.methods.processOutWrite\n    process.stderr.write = this.methods.processErrWrite\n  }\n\n  /**\n   * Check credentials and start agent\n   */\n  start () {\n    return new Promise((resolve, reject) => {\n      if (this.isStopping) return reject(new Error('Agent is stopping'))\n\n      // Trying to check infos\n      this.checkCredentials(this.config, (err, endpoints) => {\n        if (err) {\n          this.restartOnError(err)\n          return reject(err)\n        }\n\n        // Connect to websocket\n        this.transport.setConfig(endpoints.ws, {\n          'X-KM-PUBLIC': this.config.publicKey,\n          'X-KM-SECRET': this.config.secretKey,\n          'X-KM-SERVER': this.config.serverName,\n          'X-PM2-VERSION': cst.PM2_VERSION,\n          'X-PROTOCOL-VERSION': cst.PROTOCOL_VERSION,\n          'User-Agent': `PM2 Agent Node v${version}`\n        }, this.config.proxy)\n        return this.transport.connect((err) => {\n          if (err) {\n            this.restartOnError(err)\n            return reject(err)\n          }\n\n          // Store config\n          this.config.endpoint = endpoints.ws\n          this.config.internalIp = meta.computeInternalIp()\n\n          // Start sending status\n          this.statusInterval = setInterval(this.sendStatus.bind(this), 1 * 1000) // each second\n          this.listenForLogs()\n\n          // Listening for endpoint update\n          this.endpointUpdateInterval = setInterval(this.listenEndpointUpdate.bind(this), 5 * 60 * 1000) // each 5 min\n\n          return resolve()\n        })\n      })\n    })\n  }\n\n  /**\n   * Restart agent because of an error\n   */\n  restartOnError (err) {\n    if (this.isStopping) return\n\n    debug(`Got an error on start pm2-agent-node: ${err.message}, retrying in 5sec...`)\n    return setTimeout(() => {\n      // Error already handled in start function\n      this.start().catch(_ => {})\n    }, 5 * 1000)\n  }\n\n  /**\n   * Generate an unique ID\n   */\n  generateUniqueId () {\n    var s = []\n    var hexDigits = '0123456789abcdef'\n    for (var i = 0; i < 36; i++) {\n      s[i] = hexDigits.substr(Math.floor(Math.random() * 0x10), 1)\n    }\n    s[14] = '4'\n    s[19] = hexDigits.substr((s[19] & 0x3) | 0x8, 1)\n    s[8] = s[13] = s[18] = s[23] = '-'\n    return s.join('')\n  }\n\n  /**\n   * Used to generate valid a process\n   * @param {Object} process\n   * @return {Object} process Valid process with default value\n   */\n  generateProcess (proc) {\n    if (!proc.createdAt) proc.createdAt = new Date().getTime()\n    return {\n      pid: process.pid,\n      name: this.config.appName,\n      interpreter: proc.interpreter || 'node',\n      restart_time: 0,\n      created_at: proc.createdAt,\n      exec_mode: 'fork_mode',\n      watching: false,\n      pm_uptime: proc.createdAt,\n      status: 'online',\n      pm_id: 0,\n      unique_id: proc.unique_id,\n\n      cpu: meta.getCpuUsage(),\n      memory: meta.getMemoryUsage(),\n\n      versioning: proc.versioning || null,\n\n      node_env: process.env.NODE_ENV || null,\n\n      axm_actions: proc.axm_actions || [],\n      axm_monitor: proc.axm_monitor || {},\n      axm_options: proc.axm_options || {},\n      axm_dynamic: proc.dynamic || {}\n    }\n  }\n\n  /**\n   * Ping root.keymetrics.io, compare current endpoint, and reconnect agent if needed\n   */\n  listenEndpointUpdate () {\n    debug(`Check if endpoint was updated`)\n    this.checkCredentials(this.config, (err, endpoints) => {\n      if (err) return debug(`Got an error on check credentials: ${err.message}`)\n      if (endpoints.ws === this.config.endpoint) return debug(`Endpoint wasn't updated`)\n\n      // Update transport endpoint\n      this.config.endpoint = endpoints.ws\n      this.transport.endpoint = endpoints.ws\n      this.transport.disconnect()\n      this.transport.connect((err) => {\n        if (err) return debug(`Got an error on websocket connection while endpoint update: ${err.message}`)\n        return debug(`Websocket endpoint updated!`)\n      })\n    })\n  }\n\n  /**\n   * Check credentials with API\n   * @param {Object} config Configuration\n   * @param {String} config.publicKey\n   * @param {String} config.secretKey\n   * @param {String} config.appName\n   * @param {Function} cb Invoked with <err, endpoints>\n   */\n  checkCredentials (config, cb) {\n    http.open({\n      url: cst.ROOT_URL + '/api/node/verifyPM2',\n      method: 'POST',\n      data: {\n        public_id: config.publicKey,\n        private_id: config.secretKey,\n        data: meta(config.publicKey, config.serverName)\n      },\n      proxy: config.proxy,\n      headers: {\n        'User-Agent': `PM2 Agent Node v${version}`\n      }\n    }, (err, data) => {\n      if (err) return cb(err)\n      if (data.disabled === true || data.pending === true) return cb(new Error('Interactor disabled.'))\n      if (data.active === false) return cb(new Error('Interactor not active.'))\n      if (!data.endpoints) return cb(new Error(`Endpoints field not present (${JSON.stringify(data)}).`))\n      return cb(null, data.endpoints)\n    })\n  }\n\n  /**\n   * Send status\n   * @param {String} channel\n   * @param {Object} payload\n   */\n  send (channel, payload) {\n    return this.transport.send({\n      channel,\n      payload: Object.assign(payload, {\n        process: {\n          pm_id: 0,\n          name: this.config.appName,\n          server: this.config.serverName,\n          rev: null\n        }\n      })\n    })\n  }\n\n  /**\n   * Listen stdout and stderr to send logs\n   */\n  listenForLogs () {\n    const send = this.send.bind(this, 'logs')\n    let sendLogs = false // used for startLogging and stopLogging\n\n    // Listen actions\n    const reply = method => {\n      this.transport.send({\n        channel: 'trigger:pm2:result',\n        payload: {\n          ret: { err: null, data: `Log streaming ${sendLogs ? 'enabled' : 'disabled'}` },\n          meta: {\n            method_name: method,\n            app_name: this.config.appName,\n            machine_name: this.config.serverName,\n            public_key: this.config.publicKey\n          }\n        }\n      })\n    }\n    this.transport.on('trigger:pm2:action', (data) => {\n      const method = data.method_name\n      if (!['startLogging', 'stopLogging'].includes(method)) return // Don't listen that\n      sendLogs = method === 'startLogging'\n      debug(`${method} triggered`)\n      return reply(method)\n    })\n\n    // Listen logs\n    const self = this\n    process.stdout.write = (function (write) {\n      return function (...args) {\n        write.apply(process.stdout, args)\n        if (!self.sendLogs && !sendLogs) return // Don't send logs\n        if (self.config.logFilter && !self.config.logFilter.test(args[0])) return\n        send({\n          at: new Date().getTime(),\n          data: args[0]\n        })\n      }\n    }(process.stdout.write))\n\n    process.stderr.write = (function (write) {\n      return function (...args) {\n        write.apply(process.stderr, args)\n        if (!self.sendLogs && !sendLogs) return // Don't send logs\n        if (self.config.logFilter && !self.config.logFilter.test(args[0])) return\n        send({\n          at: new Date().getTime(),\n          data: args[0]\n        })\n      }\n    }(process.stderr.write))\n  }\n\n  /**\n   * Send status\n   */\n  sendStatus () {\n    return this.transport.send({\n      channel: 'status',\n      payload: {\n        data: {\n          process: [this.generateProcess(this.process)],\n          server: meta.getServerMeta()\n        },\n        server_name: this.config.serverName,\n        internal_ip: this.config.internalIp,\n        rev_con: true\n      }\n    })\n  }\n\n  /**\n   * Stop agent\n   */\n  stop () {\n    debug('Stopping agent')\n    this.isStopping = true\n    this.transport.disconnect()\n    clearInterval(this.statusInterval)\n    clearInterval(this.endpointUpdateInterval)\n  }\n}\n"]}