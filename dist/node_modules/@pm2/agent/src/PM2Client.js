'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var axon = require('pm2-axon');
var cst = require('../constants.js');
var rpc = require('pm2-axon-rpc');
var log = require('debug')('interactor:pm2:client');
var EventEmitter = require('events').EventEmitter;
var PM2Interface = require('./PM2Interface');

/**
 * PM2 API Wrapper used to setup connection with the daemon
 * @param {Object} opts options
 * @param {String} opts.sub_port socket file of the PM2 bus [optionnal]
 * @param {String} opts.rpc_port socket file of the PM2 RPC server [optionnal]
 */
module.exports = function (_EventEmitter) {
  _inherits(PM2Client, _EventEmitter);

  function PM2Client(opts) {
    _classCallCheck(this, PM2Client);

    var _this = _possibleConstructorReturn(this, (PM2Client.__proto__ || Object.getPrototypeOf(PM2Client)).call(this));

    var subSocket = opts && opts.sub_port || cst.DAEMON_PUB_PORT;
    var rpcSocket = opts && opts.rpc_port || cst.DAEMON_RPC_PORT;

    var sub = axon.socket('sub-emitter');
    _this.sub_sock = sub.connect(subSocket);
    _this.bus = sub;

    var req = axon.socket('req');
    _this.rpc_sock = req.connect(rpcSocket);
    _this.rpc_client = new rpc.Client(req);

    _this.rpc = {};

    _this.rpc_sock.on('connect', function (_) {
      log('PM2 API Wrapper connected to PM2 Daemon via RPC');
      _this.generateMethods(function (_) {
        _this.pm2Interface = new PM2Interface(_this.rpc);
        _this.emit('ready');
      });
    });

    _this.rpc_sock.on('close', function (_) {
      log('pm2 rpc closed');
      _this.emit('closed');
    });

    _this.rpc_sock.on('reconnect attempt', function (_) {
      log('pm2 rpc reconnecting');
      _this.emit('reconnecting');
    });

    _this.sub_sock.on('connect', function (_) {
      log('bus ready');
      _this.emit('bus:ready');
    });

    _this.sub_sock.on('close', function (_) {
      log('bus closed');
      _this.emit('bus:closed');
    });

    _this.sub_sock.on('reconnect attempt', function (_) {
      log('bus reconnecting');
      _this.emit('bus:reconnecting');
    });
    return _this;
  }

  /**
   * Disconnect socket connections. This will allow Node to exit automatically.
   * Further calls to PM2 from this object will throw an error.
   */


  _createClass(PM2Client, [{
    key: 'disconnect',
    value: function disconnect() {
      this.sub_sock.close();
      this.rpc_sock.close();
    }

    /**
     * Generate method by requesting exposed methods by PM2
     * You can now control/interact with PM2
     */

  }, {
    key: 'generateMethods',
    value: function generateMethods(cb) {
      var _this2 = this;

      log('Requesting and generating RPC methods');
      this.rpc_client.methods(function (err, methods) {
        if (err) return cb(err);
        Object.keys(methods).forEach(function (key) {
          var method = methods[key];

          log('+-- Creating %s method', method.name);

          (function (name) {
            var self = _this2;
            _this2.rpc[name] = function () {
              var args = Array.prototype.slice.call(arguments);
              args.unshift(name);
              self.rpc_client.call.apply(self.rpc_client, args);
            };
          })(method.name);
        });
        return cb();
      });
    }
  }, {
    key: 'remote',
    value: function remote(method, parameters, cb) {
      log('remote send %s', method, parameters);
      if (this.pm2Interface[method] === 'undefined') {
        return cb(new Error('Deprecated or invalid method'));
      }
      this.pm2Interface[method](parameters, cb);
    }
  }, {
    key: 'msgProcess',
    value: function msgProcess(data, cb) {
      this.rpc.msgProcess(data, cb);
    }
  }]);

  return PM2Client;
}(EventEmitter);
//# sourceMappingURL=PM2Client.js.map