{"version":3,"sources":["../../../../../../../src/node_modules/@pm2/agent/src/utils/probes/Histogram.js"],"names":["EDS","require","Histogram","opts","_measurement","measurement","_call_fn","methods","min","getMin","max","getMax","sum","getSum","count","getCount","variance","_calculateVariance","mean","_calculateMean","stddev","_calculateStddev","ema","getEma","percentiles","medians","median","p75","p95","p99","p999","_sample","_min","_max","_count","_sum","_varianceM","_varianceS","_ema","prototype","update","value","_updateMin","_updateMax","_updateVariance","_updateEma","values","toArray","sort","a","b","results","i","length","percentile","pos","lower","Math","floor","upper","ceil","reset","constructor","call","val","fullResults","oldM","alpha","sqrt","module","exports"],"mappings":"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","file":"Histogram.js","sourcesContent":["'use strict'\n\n// Hacked from https://github.com/felixge/node-measured\n\nvar EDS = require('../EDS.js')\n\nfunction Histogram (opts) {\n  opts = opts || {}\n\n  this._measurement = opts.measurement\n  this._call_fn = null\n\n  var methods = {\n    min: this.getMin,\n    max: this.getMax,\n    sum: this.getSum,\n    count: this.getCount,\n    variance: this._calculateVariance,\n    mean: this._calculateMean,\n    stddev: this._calculateStddev,\n    ema: this.getEma()\n  }\n\n  if (methods[this._measurement]) {\n    this._call_fn = methods[this._measurement]\n  } else {\n    this._call_fn = function () {\n      var percentiles = this.percentiles([0.5, 0.75, 0.95, 0.99, 0.999])\n\n      var medians = {\n        median: percentiles[0.5],\n        p75: percentiles[0.75],\n        p95: percentiles[0.95],\n        p99: percentiles[0.99],\n        p999: percentiles[0.999]\n      }\n\n      return medians[this._measurement]\n    }\n  }\n  this._sample = new EDS()\n  this._min = null\n  this._max = null\n  this._count = 0\n  this._sum = 0\n\n  // These are for the Welford algorithm for calculating running variance\n  // without floating-point doom.\n  this._varianceM = 0\n  this._varianceS = 0\n  this._ema = 0\n}\n\nHistogram.prototype.update = function (value) {\n  this._count++\n  this._sum += value\n\n  this._sample.update(value)\n  this._updateMin(value)\n  this._updateMax(value)\n  this._updateVariance(value)\n  this._updateEma(value)\n}\n\nHistogram.prototype.percentiles = function (percentiles) {\n  var values = this._sample\n    .toArray()\n    .sort(function (a, b) {\n      return (a === b)\n        ? 0\n        : a - b\n    })\n\n  var results = {}\n\n  for (var i = 0; i < percentiles.length; i++) {\n    var percentile = percentiles[i]\n    if (!values.length) {\n      results[percentile] = null\n      continue\n    }\n\n    var pos = percentile * (values.length + 1)\n\n    if (pos < 1) {\n      results[percentile] = values[0]\n    } else if (pos >= values.length) {\n      results[percentile] = values[values.length - 1]\n    } else {\n      var lower = values[Math.floor(pos) - 1]\n      var upper = values[Math.ceil(pos) - 1]\n\n      results[percentile] = lower + (pos - Math.floor(pos)) * (upper - lower)\n    }\n  }\n\n  return results\n}\n\nHistogram.prototype.reset = function () {\n  this.constructor.call(this) // eslint-disable-line\n}\n\nHistogram.prototype.val = function () {\n  if (typeof (this._call_fn) === 'function') {\n    return this._call_fn()\n  } else {\n    return this._call_fn\n  }\n}\n\nHistogram.prototype.getMin = function () {\n  return this._min\n}\n\nHistogram.prototype.getMax = function () {\n  return this._max\n}\n\nHistogram.prototype.getSum = function () {\n  return this._sum\n}\n\nHistogram.prototype.getCount = function () {\n  return this._count\n}\n\nHistogram.prototype.getEma = function () {\n  return this._ema\n}\n\nHistogram.prototype.fullResults = function () {\n  var percentiles = this.percentiles([0.5, 0.75, 0.95, 0.99, 0.999])\n\n  return {\n    min: this._min,\n    max: this._max,\n    sum: this._sum,\n    variance: this._calculateVariance(),\n    mean: this._calculateMean(),\n    stddev: this._calculateStddev(),\n    count: this._count,\n    median: percentiles[0.5],\n    p75: percentiles[0.75],\n    p95: percentiles[0.95],\n    p99: percentiles[0.99],\n    p999: percentiles[0.999],\n    ema: this._ema\n  }\n}\n\nHistogram.prototype._updateMin = function (value) {\n  if (this._min === null || value < this._min) {\n    this._min = value\n    // console.log(value);\n  }\n}\n\nHistogram.prototype._updateMax = function (value) {\n  if (this._max === null || value > this._max) {\n    this._max = value\n  }\n}\n\nHistogram.prototype._updateVariance = function (value) {\n  if (this._count === 1) {\n    this._varianceM = value\n    return this._varianceM\n  }\n\n  var oldM = this._varianceM\n\n  this._varianceM += ((value - oldM) / this._count)\n  this._varianceS += ((value - oldM) * (value - this._varianceM))\n}\n\nHistogram.prototype._updateEma = function (value) {\n  if (this._count <= 1) {\n    this._ema = this._calculateMean()\n    return this._ema\n  }\n  var alpha = 2 / (1 + this._count)\n  this._ema = value * alpha + this._ema * (1 - alpha)\n}\n\nHistogram.prototype._calculateMean = function () {\n  return (this._count === 0)\n    ? 0\n    : this._sum / this._count\n}\n\nHistogram.prototype._calculateVariance = function () {\n  return (this._count <= 1)\n    ? null\n    : this._varianceS / (this._count - 1)\n}\n\nHistogram.prototype._calculateStddev = function () {\n  return (this._count < 1)\n    ? null\n    : Math.sqrt(this._calculateVariance())\n}\n\nmodule.exports = Histogram\n"]}