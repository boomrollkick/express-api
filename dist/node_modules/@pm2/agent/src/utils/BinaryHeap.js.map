{"version":3,"sources":["../../../../../../src/node_modules/@pm2/agent/src/utils/BinaryHeap.js"],"names":["module","exports","BinaryHeap","options","_elements","elements","_score","score","prototype","add","i","arguments","length","element","push","_bubble","first","removeFirst","root","last","pop","_sink","clone","toArray","toSortedArray","array","undefined","concat","size","bubbleIndex","bubbleElement","bubbleScore","parentIndex","_parentIndex","parentElement","parentScore","sinkIndex","sinkElement","sinkScore","swapIndex","swapScore","swapElement","childIndexes","_childIndexes","childIndex","childElement","childScore","index","Math","floor","valueOf"],"mappings":"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","file":"BinaryHeap.js","sourcesContent":["'use strict'\n\n// Hacked https://github.com/felixge/node-measured\n\n// Based on http://en.wikipedia.org/wiki/Binary_Heap\n// as well as http://eloquentjavascript.net/appendix2.html\nmodule.exports = BinaryHeap\nfunction BinaryHeap (options) {\n  options = options || {}\n\n  this._elements = options.elements || []\n  this._score = options.score || this._score\n}\n\nBinaryHeap.prototype.add = function (/* elements */) {\n  for (var i = 0; i < arguments.length; i++) {\n    var element = arguments[i]\n\n    this._elements.push(element)\n    this._bubble(this._elements.length - 1)\n  }\n}\n\nBinaryHeap.prototype.first = function () {\n  return this._elements[0]\n}\n\nBinaryHeap.prototype.removeFirst = function () {\n  var root = this._elements[0]\n  var last = this._elements.pop()\n\n  if (this._elements.length > 0) {\n    this._elements[0] = last\n    this._sink(0)\n  }\n\n  return root\n}\n\nBinaryHeap.prototype.clone = function () {\n  return new BinaryHeap({\n    elements: this.toArray(),\n    score: this._score\n  })\n}\n\nBinaryHeap.prototype.toSortedArray = function () {\n  var array = []\n  var clone = this.clone()\n\n  while (true) {\n    var element = clone.removeFirst()\n    if (element === undefined) break\n\n    array.push(element)\n  }\n\n  return array\n}\n\nBinaryHeap.prototype.toArray = function () {\n  return [].concat(this._elements)\n}\n\nBinaryHeap.prototype.size = function () {\n  return this._elements.length\n}\n\nBinaryHeap.prototype._bubble = function (bubbleIndex) {\n  var bubbleElement = this._elements[bubbleIndex]\n  var bubbleScore = this._score(bubbleElement)\n\n  while (bubbleIndex > 0) {\n    var parentIndex = this._parentIndex(bubbleIndex)\n    var parentElement = this._elements[parentIndex]\n    var parentScore = this._score(parentElement)\n\n    if (bubbleScore <= parentScore) break\n\n    this._elements[parentIndex] = bubbleElement\n    this._elements[bubbleIndex] = parentElement\n    bubbleIndex = parentIndex\n  }\n}\n\nBinaryHeap.prototype._sink = function (sinkIndex) {\n  var sinkElement = this._elements[sinkIndex]\n  var sinkScore = this._score(sinkElement)\n  var length = this._elements.length\n\n  while (true) {\n    var swapIndex = null\n    var swapScore = null\n    var swapElement = null\n    var childIndexes = this._childIndexes(sinkIndex)\n\n    for (var i = 0; i < childIndexes.length; i++) {\n      var childIndex = childIndexes[i]\n\n      if (childIndex >= length) break\n\n      var childElement = this._elements[childIndex]\n      var childScore = this._score(childElement)\n\n      if (childScore > sinkScore) {\n        if (swapScore === null || swapScore < childScore) {\n          swapIndex = childIndex\n          swapScore = childScore\n          swapElement = childElement\n        }\n      }\n    }\n\n    if (swapIndex === null) break\n\n    this._elements[swapIndex] = sinkElement\n    this._elements[sinkIndex] = swapElement\n    sinkIndex = swapIndex\n  }\n}\n\nBinaryHeap.prototype._parentIndex = function (index) {\n  return Math.floor((index - 1) / 2)\n}\n\nBinaryHeap.prototype._childIndexes = function (index) {\n  return [\n    2 * index + 1,\n    2 * index + 2\n  ]\n}\n\nBinaryHeap.prototype._score = function (element) {\n  return element.valueOf()\n}\n"]}