'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var log = require('debug')('interactor:pm2:interface');
var path = require('path');
var async = require('async');
var fs = require('fs');
var cst = require('../constants');

module.exports = function () {
  function PM2Interface(rpc) {
    _classCallCheck(this, PM2Interface);

    log('PM2Interface instantiate');
    this.rpc = rpc;
  }

  _createClass(PM2Interface, [{
    key: 'getProcessByName',
    value: function getProcessByName(name, cb) {
      var foundProc = [];

      this.rpc.getMonitorData({}, function (err, list) {
        if (err) {
          log('Error retrieving process list: ' + err);
          return cb(err);
        }

        list.forEach(function (proc) {
          if (proc.pm2_env.name === name || proc.pm2_env.pm_exec_path === path.resolve(name.toString())) {
            foundProc.push(proc);
          }
        });

        return cb(null, foundProc);
      });
    }

    /**
     * Scale up/down a process
     * @method scale
     */

  }, {
    key: 'scale',
    value: function scale(opts, cb) {
      var self = this;
      var appName = opts.name;
      var number = opts.number;

      function addProcs(proc, value, cb) {
        (function ex(proc, number) {
          if (number-- === 0) return cb();
          log('Scaling up application');
          self.rpc.duplicateProcessId(proc.pm2_env.pm_id, ex.bind(this, proc, number));
        })(proc, number);
      }

      function rmProcs(procs, value, cb) {
        var i = 0;

        (function ex(procs, number) {
          if (number++ === 0) return cb();
          self.rpc.deleteProcessId(procs[i++].pm2_env.pm_id, ex.bind(this, procs, number));
        })(procs, number);
      }

      var end = function end() {
        return cb ? cb(null, { success: true }) : log('Successfuly scale');
      };

      this.getProcessByName(appName, function (err, procs) {
        if (err) {
          return cb ? cb(err) : log(err);
        }

        if (!procs || procs.length === 0) {
          log('Application %s not found', appName);
          return cb ? cb(new Error('App not found')) : log('App not found');
        }

        var procNumber = procs.length;

        if (typeof number === 'string' && number.indexOf('+') >= 0) {
          number = parseInt(number, 10);
          return addProcs(procs[0], number, end);
        } else if (typeof number === 'string' && number.indexOf('-') >= 0) {
          number = parseInt(number, 10);
          return rmProcs(procs, number, end);
        } else {
          number = parseInt(number, 10);
          number = number - procNumber;

          if (number < 0) {
            return rmProcs(procs, number, end);
          } else if (number > 0) {
            return addProcs(procs[0], number, end);
          } else {
            log('Nothing to do');
            return cb ? cb(new Error('Same process number')) : log('Same process number');
          }
        }
      });
    }

    /**
     * Dump current processes managed by pm2 into DUMP_FILE_PATH file
     * @method dump
     * @param {} cb
     * @return
     */

  }, {
    key: 'dump',
    value: function dump(cb) {
      var envArr = [];

      this.rpc.getMonitorData({}, function (err, list) {
        if (err) {
          return typeof cb === 'function' ? cb(err) : false;
        }

        /**
         * Description
         * @method end
         * @param {} err
         * @return
         */
        var end = function end() {
          // Overwrite dump file, delete if broken and exit
          try {
            fs.writeFileSync(cst.DUMP_FILE_PATH, JSON.stringify(envArr, '', 2));
          } catch (e) {
            log('Dump error', e.stack || e);
            return cb(e);
          }
          return cb ? cb(null, { success: true }) : true;
        };

        async.each(list, function (app, done) {
          delete app.pm2_env.instances;
          delete app.pm2_env.pm_id;
          if (!app.pm2_env.pmx_module) {
            envArr.push(app.pm2_env);
          }
          done();
        }, end);
      });
    }
  }, {
    key: '_callWithProcessId',
    value: function _callWithProcessId(fn, params, cb) {
      if (params.id === undefined) {
        this.getProcessByName(params.name, function (err, processes) {
          if (err) return cb(err);

          // in case we don't find the process ourselves
          // we believe pm2 will find it
          if (processes.length === 0) {
            return fn(Object.assign({ id: params.name }, params), cb);
          }

          async.eachOf(processes, function (process, _key, localCb) {
            params.id = process.pm_id;
            fn(params, localCb);
          }, cb);
        });
      } else {
        fn(params, cb);
      }
    }
  }, {
    key: 'restart',
    value: function restart(params, cb) {
      this._callWithProcessId(this.rpc.restartProcessId, params, cb);
    }
  }, {
    key: 'reload',
    value: function reload(params, cb) {
      this._callWithProcessId(this.rpc.reloadProcessId, params, cb);
    }
  }, {
    key: 'reset',
    value: function reset(params, cb) {
      var _this = this;

      this._callWithProcessId(function (newParams, cb) {
        return _this.rpc.resetMetaProcessId(newParams.id, cb);
      }, params, cb);
    }
  }, {
    key: 'ping',
    value: function ping(params, cb) {
      this._callWithProcessId(this.rpc.ping, params, cb);
    }
  }]);

  return PM2Interface;
}();
//# sourceMappingURL=PM2Interface.js.map