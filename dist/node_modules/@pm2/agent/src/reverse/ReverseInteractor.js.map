{"version":3,"sources":["../../../../../../src/node_modules/@pm2/agent/src/reverse/ReverseInteractor.js"],"names":["debug","require","module","exports","opts","ipm2","transport","remoteMethodAlloweds","PM2_REMOTE_METHOD_ALLOWED","on","_onCustomAction","bind","_onPM2Action","removeAllListeners","data","type","uuid","process_id","undefined","process","pm_id","action_name","msgProcess","name","app_name","id","msg","options","err","res","send","success","message","callback","method_name","ret","meta","parameters","machine_name","MACHINE_NAME","public_key","PUBLIC_KEY","indexOf","Error","method","JSON","parse","stringify","console","error","global","_logs","clearTimeout","_loggingTimeoutId","setTimeout","env","NODE_ENV","remote"],"mappings":"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","file":"ReverseInteractor.js","sourcesContent":["\n'use strict'\n\nconst debug = require('debug')('interactor:reverse')\n\n/**\n * ReverseInteractor is the class that handle receiving event from KM\n * @param {Object} opts interactor options\n * @param {PM2} pm2 pm2 api\n * @param {WebsocketTransport} transport websocket transport used to receive data to KM\n */\nmodule.exports = class ReverseInteractor {\n  constructor (opts, ipm2, transport) {\n    this.ipm2 = ipm2\n    this.transport = transport\n    this.opts = opts\n    this.remoteMethodAlloweds = this.opts.PM2_REMOTE_METHOD_ALLOWED\n  }\n\n  start () {\n    debug('Reverse interactor is listening')\n    // action that trigger custom actions inside the code\n    this.transport.on('trigger:action', this._onCustomAction.bind(this))\n    this.transport.on('trigger:scoped_action', this._onCustomAction.bind(this))\n    // action that call pm2 api\n    this.transport.on('trigger:pm2:action', this._onPM2Action.bind(this))\n  }\n\n  stop () {\n    debug('Reverse interactor is no longer listening')\n    this.transport.removeAllListeners('trigger:action')\n    this.transport.removeAllListeners('trigger:scoped_action')\n    this.transport.removeAllListeners('trigger:pm2:action')\n  }\n\n  /**\n   * Listener for custom actions that can be triggered by KM, either scoped or normal\n   * @param {Object} data\n   * @param {Object} data.action_name name of the action triggered\n   * @param {Object} [data.app_name] name of the process where the action need to be run\n   * @param {Object} [data.process_id] id of the process where the action need to be run\n   * @param {Object} [data.opts] parameters used to call the method\n   * @param {Object} [data.uuid] uuid used to recognized the scoped action (scoped action only)\n   */\n  _onCustomAction (data) {\n    const type = data.uuid ? 'SCOPED' : 'REMOTE'\n\n    data.process_id = data.process_id !== undefined ? data.process_id : data.process.pm_id\n    debug('New %s action %s triggered for process %s', type, data.action_name, data.process_id)\n    // send the request to pmx via IPC\n    this.ipm2.msgProcess({\n      name: data.app_name,\n      id: data.process_id,\n      msg: data.action_name,\n      opts: data.opts || data.options || null,\n      action_name: data.action_name,\n      uuid: data.uuid\n    }, (err, res) => {\n      if (err) {\n        return this.transport.send('trigger:action:failure', {\n          success: false,\n          err: err.message || err,\n          id: data.process_id,\n          action_name: data.action_name\n        })\n      }\n      debug('Message received from AXM for proc_id : %s and action name %s', data.process_id, data.action_name)\n      return this.transport.send('trigger:action:success', {\n        success: true,\n        id: data.process_id,\n        action_name: data.action_name\n      })\n    })\n  }\n\n  /**\n   * Handle when KM call a pm2 action\n   * @param {Object} data\n   * @param {Object} data.method_name the name of the pm2 method\n   * @param {Object} data.parameters optional parameters used to call the method\n   */\n  _onPM2Action (data) {\n    // callback when the action has been executed\n    let callback = (err, res) => {\n      debug('PM2 action ended : pm2 %s (%s)', data.method_name, !err ? 'no error' : (err.message || err))\n      this.transport.send('trigger:pm2:result', {\n        ret: { err: err, data: res },\n        meta: {\n          method_name: data.method_name,\n          app_name: data.parameters.name,\n          machine_name: this.opts.MACHINE_NAME,\n          public_key: this.opts.PUBLIC_KEY\n        }\n      })\n    }\n    if (typeof data.method_name !== 'string') {\n      return debug('New PM2 action triggered with invalid method name: ', data.method_name)\n    }\n    if (this.remoteMethodAlloweds.indexOf(data.method_name) === -1) {\n      return callback(new Error('Method not allowed'))\n    }\n\n    debug('New PM2 action triggered : pm2 %s %j', data.method_name, data.parameters)\n\n    const method = data.method_name\n    let parameters = data.parameters\n    try {\n      parameters = JSON.parse(JSON.stringify(data.parameters))\n    } catch (err) {\n      console.error(err)\n    }\n\n    if (method === 'startLogging') {\n      global._logs = true\n      // Stop streaming logs automatically after timeout\n      clearTimeout(this._loggingTimeoutId)\n      this._loggingTimeoutId = setTimeout(function () {\n        global._logs = false\n      }, process.env.NODE_ENV === 'test' ? 10 : 120000)\n      return callback(null, 'Log streaming enabled')\n    } else if (method === 'stopLogging') {\n      global._logs = false\n      return callback(null, 'Log streaming disabled')\n    }\n\n    return this.ipm2.remote(method, parameters, callback)\n  }\n}\n"]}