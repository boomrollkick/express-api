'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var EventEmitter2 = require('eventemitter2').EventEmitter2;
var async = require('async');
var log = require('debug')('interactor:interface');
var path = require('path');
var config = require(path.join(__dirname, '../config')).transporters;

module.exports = function (_EventEmitter) {
  _inherits(TransporterInterface, _EventEmitter);

  /**
   * Construct new transporter interface with default options and daemon
   * @param {Object} opts [optionnal] Default options
   * @param {InteractorDaemon} Daemon needed by transports
   */
  function TransporterInterface(opts, daemon) {
    var _ret;

    _classCallCheck(this, TransporterInterface);

    log('New transporter interface');

    var _this = _possibleConstructorReturn(this, (TransporterInterface.__proto__ || Object.getPrototypeOf(TransporterInterface)).call(this, {
      delimiter: ':',
      wildcard: true
    }));

    _this.opts = opts || {};
    _this.daemon = daemon;
    _this.transporters = new Map();
    _this.transportersEndpoints = new Map();
    _this.endpoints = new Map();
    _this.config = config;
    return _ret = _this, _possibleConstructorReturn(_this, _ret);
  }

  /**
   * Add transporter
   * @param {String} name of the transporter (in ./transporters/)
   * @param {Object} opts [optionnal] custom options
   */


  _createClass(TransporterInterface, [{
    key: 'bind',
    value: function bind(name, opts) {
      if (!opts) opts = {};
      if (!this.config[name] || !this.config[name].enabled) return this;
      log('Bind [%s] transport to transporter interface', name);
      var Transport = this._loadTransporter(name);
      this.transporters.set(name, new Transport(Object.assign(opts, this.opts), this.daemon));
      this.transportersEndpoints.set(name, this.config[name].endpoints || {});
      this._bindEvents(name);
      return this;
    }

    /**
     * Disconnect each transporters
     */

  }, {
    key: 'disconnect',
    value: function disconnect() {
      log('Disconnect all transporters');
      this.transporters.forEach(function (transporter) {
        transporter.disconnect();
      });
    }

    /**
     * Connect each transporters with new endpoints
     * @param {Object} endpoints
     * @param {Function} callback
     */

  }, {
    key: 'connect',
    value: function connect(endpoints, cb) {
      var _this2 = this;

      async.each(this.transporters, function (data, next) {
        var name = data[0];
        var transport = data[1];
        // Isn't connected, connect it
        if (!transport.isConnected()) {
          log('Transporters are not connected, connect them with: ' + JSON.stringify(endpoints));
          transport.connect(_this2._buildConnectParamsFromEndpoints(name, endpoints), next);
          // Endpoints have changed, reconnect
        } else if (JSON.stringify(endpoints) !== JSON.stringify(_this2.endpoints)) {
          log('Received new endpoints to connect transporters: ' + JSON.stringify(endpoints));
          transport.reconnect(_this2._buildConnectParamsFromEndpoints(name, endpoints), next);
          // No changes
        } else {
          return next(null);
        }
      }, function (err) {
        // Save endpoints
        _this2.endpoints = endpoints;
        cb(err);
      });
    }

    /**
     * Send to each transporters
     */

  }, {
    key: 'send',
    value: function send(channel, data) {
      this.transporters.forEach(function (transporter) {
        transporter.send(channel, data);
      });
    }

    /**
     * Require transporter
     * @param {String} name of the transporter (in ./transporters/)
     * @private
     */

  }, {
    key: '_loadTransporter',
    value: function _loadTransporter(name) {
      return require('./transporters/' + this._getTransportName(name));
    }

    /**
     * Resolve transporter name
     * @param {String} name of the transporter (in ./transporters/)
     * @private
     */

  }, {
    key: '_getTransportName',
    value: function _getTransportName(name) {
      name = name.toLowerCase();
      name = name.charAt(0).toUpperCase() + name.slice(1);
      return name + 'Transport';
    }

    /**
     * Emit event on transporter event
     * @param {String} name of the transporter
     * @private
     */

  }, {
    key: '_bindEvents',
    value: function _bindEvents(name) {
      var self = this;
      this.transporters.get(name).on('**', function (data) {
        log('Received event from %s transporter', name);
        self.emit(this.event, data);
      });
    }

    /**
     * Return an object used to connect() transport
     * based on transporter endpoints options
     * @param {String} transporter's name
     * @param {Object} endpoints
     * @private
     */

  }, {
    key: '_buildConnectParamsFromEndpoints',
    value: function _buildConnectParamsFromEndpoints(name, endpoints) {
      if (!endpoints) endpoints = {};
      var opts = this.transportersEndpoints.get(name);
      if (typeof opts === 'string') {
        return endpoints[opts] || opts;
      }
      var params = {};
      for (var key in opts) {
        params[key] = endpoints[opts[key]] || opts[key];
      }
      return params;
    }

    /**
     * Is at least one transporter connected
     * @return {Boolean}
     */

  }, {
    key: 'isConnected',
    value: function isConnected() {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this.transporters.values()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var transporter = _step.value;

          if (transporter.isConnected()) return true;
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return false;
    }

    /**
     * Get active transporters that are pushing data
     * @return {String[]}
     */

  }, {
    key: 'getActiveTransporters',
    value: function getActiveTransporters() {
      var connected = [];
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = this.transporters.values()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var entry = _step2.value;

          if (entry.isConnected()) {
            connected.push(entry.constructor.name);
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      return connected;
    }
  }]);

  return TransporterInterface;
}(EventEmitter2);
//# sourceMappingURL=TransporterInterface.js.map