{"version":3,"sources":["../../../../../../src/node_modules/@pm2/agent/src/push/PushInteractor.js"],"names":["debug","require","fs","path","cst","DataRetriever","Utility","Aggregator","module","exports","opts","ipm2","transport","_ipm2","log_buffer","processes","Map","broadcast_logs","_cacheFS","Cache","miss","key","content","readFileSync","resolve","toString","split","err","message","ttl","_stackParser","StackTraceParser","cache","context","CONTEXT_ON_ERROR","aggregator","_worker_executor","undefined","stop","setInterval","_worker","bind","STATUS_INTERVAL","bus","on","_onPM2Event","clearInterval","event","packet","process","pm_id","indexOf","get","name","_km_monitored","match","length","LOGS_BUFFER","shift","push","data","global","_logs","ENABLE_CONTEXT_ON_ERROR","last_logs","attachContext","return","heapdump","cpuprofile","heapprofile","_sendFile","__name","rev","versioning","revision","server","MACHINE_NAME","aggregate","log_type","send","rpc","getMonitorData","forEach","set","pm2_env","filter","status","server_name","internal_ip","rev_con","filePath","JSON","parse","stringify","dump_file","type","public_key","PUBLIC_KEY","readFile","unlink"],"mappings":"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","file":"PushInteractor.js","sourcesContent":["\n'use strict'\n\nconst debug = require('debug')('interactor:push')\nconst fs = require('fs')\nconst path = require('path')\nconst cst = require('../../constants.js')\nconst DataRetriever = require('./DataRetriever.js')\nconst Utility = require('../Utility.js')\nconst Aggregator = require('./TransactionAggregator.js')\n\n/**\n * PushInteractor is the class that handle pushing data to KM\n * @param {Object} opts interactor options\n * @param {PM2Client} ipm2 pm2 daemon client used to listen on bus\n * @param {WebsocketTransport} transport websocket transport used to send data to KM\n */\nmodule.exports = class PushInteractor {\n  constructor (opts, ipm2, transport) {\n    this._ipm2 = ipm2\n    this.transport = transport\n    this.opts = opts\n    this.log_buffer = {}\n    this.processes = new Map() // Key is process name, value is pm2 env\n    this.broadcast_logs = new Map() // key is process name, value is true or false\n\n    debug('Push interactor constructed')\n    this._cacheFS = new Utility.Cache({\n      miss: function (key) {\n        try {\n          const content = fs.readFileSync(path.resolve(key))\n          return content.toString().split(/\\r?\\n/)\n        } catch (err) {\n          return debug('Error while trying to get file from FS : %s', err.message || err)\n        }\n      },\n      ttl: 60 * 30\n    })\n    this._stackParser = new Utility.StackTraceParser({ cache: this._cacheFS, context: cst.CONTEXT_ON_ERROR })\n    // // start transaction aggregator\n    this.aggregator = new Aggregator(this)\n  }\n\n  /**\n   * Start the interactor by starting all workers and listeners\n   */\n  start () {\n    // stop old running task\n    if (this._worker_executor !== undefined) {\n      this.stop()\n    }\n    debug('Push interactor started')\n    this._worker_executor = setInterval(this._worker.bind(this), cst.STATUS_INTERVAL)\n    this._ipm2.bus.on('*', this._onPM2Event.bind(this))\n  }\n\n  /**\n   * Stop the interactor by removing all running worker and listeners\n   */\n  stop () {\n    debug('Push interactor stopped')\n    if (this._worker_executor !== undefined) {\n      clearInterval(this._worker_executor)\n      this._worker_executor = null\n    }\n    if (this._cacheFS._worker !== undefined) {\n      clearInterval(this._cacheFS._worker)\n      this._cacheFS._worker = null\n    }\n  }\n\n  /**\n   * Listener of pm2 bus\n   * @param {String} event channel\n   * @param {Object} packet data\n   */\n  _onPM2Event (event, packet) {\n    debug('New PM2 event %s', event)\n    if (event === 'axm:action') return false\n    if (!packet.process) return debug('No process field [%s]', event)\n\n    // Drop transitional state processes (_old_*)\n    if (packet && packet.process && packet.process.pm_id && typeof packet.process.pm_id === 'string' &&\n        packet.process.pm_id.indexOf('_old') > -1) return false\n    if (this.processes.get(packet.process.name) && this.processes.get(packet.process.name)._km_monitored === false) return false\n\n    // bufferize logs\n    if (event.match(/^log:/)) {\n      if (!this.log_buffer[packet.process.name]) {\n        this.log_buffer[packet.process.name] = []\n      }\n      // delete the last one if too long\n      if (this.log_buffer[packet.process.name].length >= cst.LOGS_BUFFER) {\n        this.log_buffer[packet.process.name].shift()\n      }\n      // push the log data\n      this.log_buffer[packet.process.name].push(packet.data)\n\n      // don't send logs if not enabled\n      if (!global._logs && !this.broadcast_logs.get(packet.process.pm_id)) return false\n    }\n\n    // attach additional info for exception\n    if (event === 'process:exception' && cst.ENABLE_CONTEXT_ON_ERROR === true) {\n      packet.data.last_logs = this.log_buffer[packet.process.name]\n      packet.data = this._stackParser.attachContext(packet.data)\n    }\n\n    if (event === 'axm:reply' && packet.data && packet.data.return && (packet.data.return.heapdump || packet.data.return.cpuprofile || packet.data.return.heapprofile)) {\n      return this._sendFile(packet)\n    }\n\n    if (event === 'human:event') {\n      packet.name = packet.data.__name\n      delete packet.data.__name\n    }\n\n    // Normalize data\n    packet.process = {\n      pm_id: packet.process.pm_id,\n      name: packet.process.name,\n      rev: packet.process.rev || ((packet.process.versioning && packet.process.versioning.revision) ? packet.process.versioning.revision : null),\n      server: this.opts.MACHINE_NAME\n    }\n\n    // agregate transaction data before sending them\n    if (event.indexOf('axm:trace') > -1) return this.aggregator.aggregate(packet)\n\n    if (event.match(/^log:/)) {\n      packet.log_type = event.split(':')[1]\n      event = 'logs'\n    }\n\n    return this.transport.send(event, packet)\n  }\n\n  /**\n   * Worker function that will retrieve process metadata and send them to KM\n   */\n  _worker () {\n    if (!this._ipm2.rpc || !this._ipm2.rpc.getMonitorData) return debug('Cant access to getMonitorData RPC PM2 method')\n    this._ipm2.rpc.getMonitorData({}, (err, processes) => {\n      if (err) {\n        return debug(err || 'Cant access to getMonitorData RPC PM2 method')\n      }\n      // set broadcast logs\n      processes.forEach((process) => {\n        this.processes.set(process.name, process.pm2_env)\n        this.broadcast_logs.set(process.pm_id, process.pm2_env.broadcast_logs == 1 || process.pm2_env.broadcast_logs == 'true') // eslint-disable-line\n      })\n      processes = processes.filter(process => process.pm2_env._km_monitored !== false)\n      // send data\n      this.transport.send('status', {\n        data: DataRetriever.status(processes, this.opts),\n        server_name: this.opts.MACHINE_NAME,\n        internal_ip: this.opts.internal_ip,\n        rev_con: true\n      })\n    })\n  }\n\n  /**\n   * Handle packet containing file metadata to send to KM\n   */\n  _sendFile (packet) {\n    const filePath = JSON.parse(JSON.stringify(packet.data.return.dump_file))\n    let type = null\n    if (packet.data.return.heapdump) {\n      type = 'heapdump'\n    } else if (packet.data.return.heapprofile) {\n      type = 'heapprofile'\n    } else if (packet.data.return.cpuprofile) {\n      type = 'cpuprofile'\n    } else {\n      return debug(`Invalid profiling packet: ${JSON.stringify(packet)}`)\n    }\n    debug('Send file for %s', type)\n\n    packet = {\n      pm_id: packet.process.pm_id,\n      name: packet.process.name,\n      server_name: this.opts.MACHINE_NAME,\n      public_key: this.opts.PUBLIC_KEY,\n      type: type\n    }\n    packet[type] = true\n\n    fs.readFile(filePath, (err, data) => {\n      if (err) return debug(err)\n      fs.unlink(filePath, debug)\n      packet.data = data.toString('utf-8')\n      return this.transport.send('profiling', packet)\n    })\n  }\n}\n"]}