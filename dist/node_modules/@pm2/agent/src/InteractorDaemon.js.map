{"version":3,"sources":["../../../../../src/node_modules/@pm2/agent/src/InteractorDaemon.js"],"names":["fs","require","rpc","axon","log","os","cst","ReverseInteractor","PushInteractor","Utility","PM2Client","TransporterInterface","domain","WatchDog","InteractorClient","semver","path","pkg","global","_logs","InteractorDaemon","module","exports","opts","retrieveConf","MACHINE_NAME","PUBLIC_KEY","process","env","AGENT_TRANSPORT_WEBSOCKET","AGENT_TRANSPORT_AXON","KEYMETRICS_ROOT_URL","DAEMON_ACTIVE","transport","bind","on","err","console","error","message","httpClient","HTTPClient","_online","_internalDebugger","data","connected","send","e","trace","_ipm2","cb","_workerEndpoint","clearInterval","reverse","stop","push","disconnect","watchDog","unlinkSync","INTERACTOR_RPC_PORT","INTERACTOR_PID_PATH","_rpc","sock","exit","ERROR_EXIT","setTimeout","close","SUCCESS_EXIT","rep","socket","rpcServer","Server","self","expose","kill","getInfos","machine_name","public_key","secret_key","SECRET_KEY","remote_host","km_data","endpoints","web","isConnected","transporters","getActiveTransporters","socket_path","pm2_home_monitored","PM2_HOME","satisfies","version","inspector","state","heap","cpu","session","commands","start","handleSignal","Session","connect","isAlreadyEnabled","type","debuggerCommands","profilerDomain","fileExt","toUpperCase","post","profile","randomId","Math","random","toString","profilePath","resolve","tmpdir","writeFileSync","JSON","stringify","RECYCLE","PM2_VERSION","MEMORY","totalmem","HOSTNAME","hostname","CPUS","cpus","getSystemMetadata","open","url","ROOT_URL","method","public_id","private_id","headers","_pingRoot","disabled","pending","Error","active","msg","PM2_MACHINE_NAME","PM2_PUBLIC_KEY","PM2_SECRET_KEY","KM_RECYCLE","parse","internal_ip","network","v4","PM2_REMOTE_METHOD_ALLOWED","retries","startRPC","verifyEndpointCallback","result","NODE_ENV","_verifyEndpoint","sendToParent","online","pid","reverse_interaction","REVERSE_INTERACT","setInterval","conf","ipm2","getPM2Client","main","d","create","daemon","Date","stack","getOrSetConf","infos","info_node","timeout","daemonize","clearTimeout","run","title"],"mappings":"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","file":"InteractorDaemon.js","sourcesContent":["'use strict'\n\nconst fs = require('fs')\nconst rpc = require('pm2-axon-rpc')\nconst axon = require('pm2-axon')\nconst log = require('debug')('interactor:daemon')\nconst os = require('os')\nconst cst = require('../constants.js')\nconst ReverseInteractor = require('./reverse/ReverseInteractor.js')\nconst PushInteractor = require('./push/PushInteractor.js')\nconst Utility = require('./Utility.js')\nconst PM2Client = require('./PM2Client.js')\nconst TransporterInterface = require('./TransporterInterface.js')\nconst domain = require('domain') // eslint-disable-line\nconst WatchDog = require('./WatchDog')\nconst InteractorClient = require('./InteractorClient')\nconst semver = require('semver')\nconst path = require('path')\nconst pkg = require('../package.json')\n\nglobal._logs = false\n\nconst InteractorDaemon = module.exports = class InteractorDaemon {\n  constructor () {\n    this.opts = this.retrieveConf()\n\n    log(`MACHINE_NAME=${this.opts.MACHINE_NAME}`)\n    log(`PUBLIC_KEY=${this.opts.PUBLIC_KEY}`)\n    log(`WEBSOCKET_ENABLED=${process.env.AGENT_TRANSPORT_WEBSOCKET}`)\n    log(`AXON_ENABLED=${process.env.AGENT_TRANSPORT_AXON}`)\n    log(`ROOT_URL=${cst.KEYMETRICS_ROOT_URL}`)\n\n    this.DAEMON_ACTIVE = false\n    this.transport = new TransporterInterface(this.opts, this)\n      .bind('axon')\n      .bind('websocket')\n    this.transport.on('error', (err) => {\n      return console.error('[NETWORK] Error : ' + err.message || err)\n    })\n    this.httpClient = new Utility.HTTPClient()\n    this._online = true\n\n    this._internalDebugger()\n  }\n\n  /**\n   * Use process.send() if connected\n   * @param {Object} data\n   */\n  sendToParent (data) {\n    if (!process.connected || !process.send) return console.log('Could not send data to parent')\n\n    try {\n      process.send(data)\n    } catch (e) {\n      console.trace('Parent process disconnected')\n    }\n  }\n\n  /**\n   * Get an interface for communicating with PM2 daemon\n   * @private\n   * @return {PM2Client}\n   */\n  getPM2Client () {\n    if (!this._ipm2) {\n      this._ipm2 = new PM2Client()\n    }\n    return this._ipm2\n  }\n\n  /**\n   * Terminate aconnections and exit\n   * @param {cb} callback called at the end\n   */\n  exit (err, cb) {\n    log('Exiting Interactor')\n    // clear workers\n    if (this._workerEndpoint) clearInterval(this._workerEndpoint)\n\n    // stop interactors\n    if (this.reverse) this.reverse.stop()\n    if (this.push) this.push.stop()\n\n    if (this._ipm2) this._ipm2.disconnect()\n    if (this.watchDog) this.watchDog.stop()\n    // stop transport\n    if (this.transport) this.transport.disconnect()\n\n    if (!err) {\n      try {\n        fs.unlinkSync(cst.INTERACTOR_RPC_PORT)\n        fs.unlinkSync(cst.INTERACTOR_PID_PATH)\n      } catch (err) {}\n    }\n\n    if (!this._rpc || !this._rpc.sock) {\n      return process.exit(cst.ERROR_EXIT)\n    }\n\n    if (typeof cb === 'function') {\n      cb()\n    }\n\n    setTimeout(() => {\n      this._rpc.sock.close(() => {\n        log('RPC server closed')\n        process.exit(err ? cst.ERROR_EXIT : cst.SUCCESS_EXIT)\n      })\n    }, 10)\n  }\n\n  /**\n   * Start a RPC server and expose it throught a socket file\n   */\n  startRPC (opts) {\n    log('Launching Interactor RPC server (bind to %s)', cst.INTERACTOR_RPC_PORT)\n    const rep = axon.socket('rep')\n    const rpcServer = new rpc.Server(rep)\n    const self = this\n    rep.bind(cst.INTERACTOR_RPC_PORT)\n\n    rpcServer.expose({\n      kill: function (cb) {\n        log('Shutdown request received via RPC')\n        return self.exit(null, cb)\n      },\n      getInfos: function (cb) {\n        if (self.opts && self.DAEMON_ACTIVE === true) {\n          return cb(null, {\n            machine_name: self.opts.MACHINE_NAME,\n            public_key: self.opts.PUBLIC_KEY,\n            secret_key: self.opts.SECRET_KEY,\n            remote_host: self.km_data.endpoints.web,\n            connected: self.transport.isConnected(),\n            transporters: self.transport.getActiveTransporters(),\n            socket_path: cst.INTERACTOR_RPC_PORT,\n            pm2_home_monitored: cst.PM2_HOME\n          })\n        } else {\n          return cb(null)\n        }\n      }\n    })\n    return rpcServer\n  }\n\n  /**\n   * Handle specific signals to launch memory / cpu profiling\n   * if available in node\n   */\n  _internalDebugger () {\n    // inspector isn't available under node 8\n    if (semver.satisfies(process.version, '<8')) return\n\n    const inspector = require('inspector')\n    const state = {\n      heap: false,\n      cpu: false,\n      session: null\n    }\n    const commands = {\n      heap: {\n        start: 'HeapProfiler.startSampling',\n        stop: 'HeapProfiler.stopSampling'\n      },\n      cpu: {\n        start: 'Profiler.start',\n        stop: 'Profiler.stop'\n      }\n    }\n\n    const handleSignal = type => {\n      return _ => {\n        if (state.session === null) {\n          state.session = new inspector.Session()\n          state.session.connect()\n        }\n\n        const isAlreadyEnabled = state[type]\n        const debuggerCommands = commands[type]\n        const profilerDomain = type === 'cpu' ? 'Profiler' : 'HeapProfiler'\n        const fileExt = type === 'heap' ? '.heapprofile' : '.cpuprofile'\n\n        if (isAlreadyEnabled) {\n          // stopping the profiling and writting it to disk if its running\n          console.log(`[DEBUG] Stopping ${type.toUpperCase()} Profiling`)\n          state.session.post(debuggerCommands.stop, (err, data) => {\n            const profile = data.profile\n            if (err) return console.error(err)\n            const randomId = Math.random().toString(36)\n            const profilePath = path.resolve(os.tmpdir(), `${type}-${randomId}${fileExt}`)\n\n            fs.writeFileSync(profilePath, JSON.stringify(profile))\n            console.log(`[DEBUG] Writing file in ${profilePath}`)\n            state[type] = false\n            state.session.post(`${profilerDomain}.disable`)\n          })\n        } else {\n          // start the profiling otherwise\n          console.log(`[DEBUG] Starting ${type.toUpperCase()} Profiling`)\n          state.session.post(`${profilerDomain}.enable`, _ => {\n            state.session.post(debuggerCommands.start)\n            state[type] = true\n          })\n        }\n      }\n    }\n\n    // use hook\n    process.on('SIGUSR1', handleSignal('cpu'))\n    process.on('SIGUSR2', handleSignal('heap'))\n  }\n\n  /**\n   * Retrieve metadata about the system\n   */\n  getSystemMetadata () {\n    return {\n      MACHINE_NAME: this.opts.MACHINE_NAME,\n      PUBLIC_KEY: this.opts.PUBLIC_KEY,\n      RECYCLE: this.opts.RECYCLE || false,\n      PM2_VERSION: process.env.PM2_VERSION,\n      MEMORY: os.totalmem() / 1000 / 1000,\n      HOSTNAME: os.hostname(),\n      CPUS: os.cpus()\n    }\n  }\n\n  /**\n   * Ping root url to retrieve node info\n   * @private\n   * @param {Function} cb invoked with <Error, Object> where Object is the response sended by the server\n   */\n  _pingRoot (cb) {\n    const data = this.getSystemMetadata()\n\n    this.httpClient.open({\n      url: this.opts.ROOT_URL + '/api/node/verifyPM2',\n      method: 'POST',\n      data: {\n        public_id: this.opts.PUBLIC_KEY,\n        private_id: this.opts.SECRET_KEY,\n        data: data\n      },\n      headers: {\n        'User-Agent': `PM2 Agent v${pkg.version}`\n      }\n    }, cb)\n  }\n\n  /**\n   * Ping root to verify retrieve and connect to the km endpoint\n   * @private\n   * @param {Function} cb invoked with <Error, Boolean>\n   */\n  _verifyEndpoint (cb) {\n    if (typeof cb !== 'function') cb = function () {}\n\n    this._pingRoot((err, data) => {\n      if (err) {\n        log('Got an a error on ping root', err)\n        return cb(err)\n      }\n\n      this.km_data = data\n\n      // Verify data integrity\n      if (data.disabled === true || data.pending === true) {\n        log('Interactor is disabled by admins')\n        return cb(new Error('Connection refused, you might have hit the limit of agents you can connect (send email at contact@keymetrics.io for more infos)'))\n      }\n      if (data.active === false) {\n        log('Interactor not active: %s', data.msg || 'no message')\n        return cb(null, data)\n      }\n      if (!data.endpoints) {\n        return cb(new Error(`Endpoints field not present (${JSON.stringify(data)})`))\n      }\n\n      this.DAEMON_ACTIVE = true\n      this.transport.connect(data.endpoints, cb)\n    })\n  }\n\n  /**\n   * Retrieve configuration from environnement\n   */\n  retrieveConf () {\n    let opts = {}\n\n    opts.MACHINE_NAME = process.env.PM2_MACHINE_NAME\n    opts.PUBLIC_KEY = process.env.PM2_PUBLIC_KEY\n    opts.SECRET_KEY = process.env.PM2_SECRET_KEY\n    opts.RECYCLE = process.env.KM_RECYCLE ? JSON.parse(process.env.KM_RECYCLE) : false\n    opts.PM2_VERSION = process.env.PM2_VERSION || '0.0.0'\n    opts.AGENT_TRANSPORT_AXON = process.env.AGENT_TRANSPORT_AXON\n    opts.AGENT_TRANSPORT_WEBSOCKET = process.env.AGENT_TRANSPORT_WEBSOCKET\n    opts.internal_ip = Utility.network.v4\n\n    opts.PM2_REMOTE_METHOD_ALLOWED = [\n      'restart',\n      'reload',\n      'gracefulReload',\n      'reset',\n      'scale',\n      'startLogging',\n      'stopLogging',\n      'ping'\n    ]\n\n    if (!opts.MACHINE_NAME) {\n      console.error('You must provide a PM2_MACHINE_NAME environment variable')\n      process.exit(cst.ERROR_EXIT)\n    } else if (!opts.PUBLIC_KEY) {\n      console.error('You must provide a PM2_PUBLIC_KEY environment variable')\n      process.exit(cst.ERROR_EXIT)\n    } else if (!opts.SECRET_KEY) {\n      console.error('You must provide a PM2_SECRET_KEY environment variable')\n      process.exit(cst.ERROR_EXIT)\n    }\n    return opts\n  }\n\n  /**\n   * Ping root url to retrieve node info\n   * @private\n   * @param {Function} cb invoked with <Error> [optional]\n   */\n  start (cb) {\n    let retries = 0\n    this._rpc = this.startRPC()\n    this.opts.ROOT_URL = cst.KEYMETRICS_ROOT_URL\n\n    const verifyEndpointCallback = (err, result) => {\n      if (err) {\n        log('Error while trying to retrieve endpoints : ' + (err.message || err))\n        if (retries++ < 30 && process.env.NODE_ENV !== 'test') {\n          log('Retrying to retrieve endpoints...')\n          return setTimeout(_ => {\n            return this._verifyEndpoint(verifyEndpointCallback)\n          }, 200 * retries)\n        }\n        this.sendToParent({ error: true, msg: err.message || err })\n        return this.exit(new Error('Error retrieving endpoints'))\n      }\n      if (result === false) {\n        log('False returned while trying to retrieve endpoints')\n        return this.exit(new Error('Error retrieving endpoints'))\n      }\n\n      // send data over IPC for CLI feedback\n      this.sendToParent({\n        error: false,\n        km_data: this.km_data,\n        online: true,\n        pid: process.pid,\n        machine_name: this.opts.MACHINE_NAME,\n        public_key: this.opts.PUBLIC_KEY,\n        secret_key: this.opts.SECRET_KEY,\n        reverse_interaction: this.opts.REVERSE_INTERACT\n      })\n\n      if (result && typeof result === 'object' &&\n          result.error === true && result.active === false) {\n        log(`Error when connecting: ${result.msg}`)\n        return this.exit(new Error(`Error when connecting: ${result.msg}`))\n      }\n\n      // start workers\n      this._workerEndpoint = setInterval(this._verifyEndpoint.bind(this), 60000)\n      // start interactors\n      this.watchDog = WatchDog\n\n      setTimeout(() => {\n        log('PM2 Watchdog started')\n        this.watchDog.start({\n          conf: {\n            ipm2: this.getPM2Client()\n          }\n        })\n      }, 1000 * 60 * 3)\n\n      this.push = new PushInteractor(this.opts, this.getPM2Client(), this.transport)\n      this.reverse = new ReverseInteractor(this.opts, this.getPM2Client(), this.transport)\n      this.push.start()\n      this.reverse.start()\n      log('Interactor daemon started')\n      if (cb) {\n        setTimeout(cb, 20)\n      }\n    }\n    return this._verifyEndpoint(verifyEndpointCallback)\n  }\n}\n\n// If its the entry file launch the daemon\n// otherwise we just required it to use a function\nif (require.main === module) {\n  const d = domain.create()\n  let daemon = null\n\n  d.on('error', function (err) {\n    console.error('-- FATAL EXCEPTION happened --')\n    console.error(new Date())\n    console.error(err.stack)\n    console.log('Re-initiating Agent')\n\n    InteractorClient.getOrSetConf(cst, null, (err, infos) => {\n      if (err || !infos) {\n        if (err) {\n          console.error('[PM2 Agent] Failed to rescue agent :')\n          console.error(err || new Error(`Cannot find configuration to connect to backend`))\n          return process.exit(1)\n        }\n      }\n      console.log(`[PM2 Agent] Using (Public key: ${infos.public_key}) (Private key: ${infos.secret_key}) (Info node: ${infos.info_node})`)\n\n      // Exit anyway the errored agent\n      var timeout = setTimeout(_ => {\n        console.error('Daemonization of failsafe agent did not worked')\n        daemon.exit(err)\n      }, 2000)\n\n      InteractorClient.daemonize(cst, infos, (err) => {\n        if (err) {\n          log('[PM2 Agent] Failed to rescue agent :')\n          log(err)\n        } else {\n          log(`Succesfully launched new agent`)\n        }\n        clearTimeout(timeout)\n        daemon.exit(err)\n      })\n    })\n  })\n\n  d.run(_ => {\n    daemon = new InteractorDaemon()\n\n    process.title = `PM2 Agent v${pkg.version}: (${cst.PM2_HOME})`\n\n    log('[PM2 Agent] Launching agent')\n    daemon.start()\n  })\n}\n"]}