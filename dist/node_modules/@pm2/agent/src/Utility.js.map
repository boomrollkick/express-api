{"version":3,"sources":["../../../../../src/node_modules/@pm2/agent/src/Utility.js"],"names":["os","require","crypto","moment","url","interfaceType","v4","default","family","v6","retrieveAddress","type","interfce","ret","interfaces","networkInterfaces","Object","keys","forEach","el","el2","internal","address","Cache","opts","_cache","_miss","miss","_ttl_time","ttl","_ttl","_worker","setInterval","worker","bind","i","length","key","value","isAfter","set","add","StackTraceParser","cache","_context_size","context","path","process","platform","splitDeviceRe","result","exec","device","isUnc","Boolean","charAt","stack","len","callsite","file_name","line_number","isAbsolute","indexOf","get","source","preLine","pre","slice","line","push","replace","postLine","post","join","error","stackframes","parse","__error_callsites","siteRegex","tmp","map","substr","location","split","parseInt","finalCallsite","EWMA","_timePeriod","_tickInterval","_alpha","Math","exp","_count","_rate","_interval","tick","unref","n","instantRate","timeUnit","Cipher","msg","decipher","createDecipher","CIPHER_ALGORITHM","decipheredMessage","update","final","JSON","err","console","data","stringify","cipher","createCipher","cipheredData","HTTPClient","match","cb","http","getModule","parsedUrl","options","hostname","port","method","headers","assign","req","request","res","body","setEncoding","on","chunk","toString","jsonData","write","end","module","exports","serialize","network","clone"],"mappings":"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","file":"Utility.js","sourcesContent":["'use strict'\n\nconst os = require('os')\nconst crypto = require('crypto')\nconst moment = require('moment')\nconst url = require('url')\n\nconst interfaceType = {\n  v4: {\n    default: '127.0.0.1',\n    family: 'IPv4'\n  },\n  v6: {\n    default: '::1',\n    family: 'IPv6'\n  }\n}\n\n/**\n * Search for public network adress\n * @param {String} type the type of network interface, can be either 'v4' or 'v6'\n */\nconst retrieveAddress = (type) => {\n  let interfce = interfaceType[type]\n  let ret = interfce.default\n  let interfaces = os.networkInterfaces()\n\n  Object.keys(interfaces).forEach(function (el) {\n    interfaces[el].forEach(function (el2) {\n      if (!el2.internal && el2.family === interfce.family) {\n        ret = el2.address\n      }\n    })\n  })\n  return ret\n}\n\n/**\n * Simple cache implementation\n *\n * @param {Object} opts cache options\n * @param {Function} opts.miss function called when a key isn't found in the cache\n */\nclass Cache {\n  constructor (opts) {\n    this._cache = {}\n    this._miss = opts.miss\n    this._ttl_time = opts.ttl\n    this._ttl = {}\n\n    if (opts.ttl) {\n      this._worker = setInterval(this.worker.bind(this), 1000)\n    }\n  }\n\n  worker () {\n    let keys = Object.keys(this._ttl)\n    for (let i = 0; i < keys.length; i++) {\n      let key = keys[i]\n      let value = this._ttl[key]\n      if (moment().isAfter(value)) {\n        delete this._cache[key]\n        delete this._ttl[key]\n      }\n    }\n  }\n\n  /**\n   * Get a value from the cache\n   *\n   * @param {String} key\n   */\n  get (key) {\n    if (!key) return null\n    let value = this._cache[key]\n    if (value) return value\n\n    value = this._miss(key)\n\n    if (value) {\n      this.set(key, value)\n    }\n    return value\n  }\n\n  /**\n   * Set a value in the cache\n   *\n   * @param {String} key\n   * @param {Mixed} value\n   */\n  set (key, value) {\n    if (!key || !value) return false\n    this._cache[key] = value\n    if (this._ttl_time) {\n      this._ttl[key] = moment().add(this._ttl_time, 'seconds')\n    }\n    return true\n  }\n\n  reset () {\n    this._cache = null\n    this._cache = {}\n    this._ttl = null\n    this._ttl = {}\n  }\n}\n\n/**\n * StackTraceParser is used to parse callsite from stacktrace\n * and get from FS the context of the error (if available)\n *\n * @param {Cache} cache cache implementation used to query file from FS and get context\n */\nclass StackTraceParser {\n  constructor (opts) {\n    this._cache = opts.cache\n    this._context_size = opts.context\n  }\n\n  isAbsolute (path) {\n    if (process.platform === 'win32') {\n      // https://github.com/nodejs/node/blob/b3fcc245fb25539909ef1d5eaa01dbf92e168633/lib/path.js#L56\n      let splitDeviceRe = /^([a-zA-Z]:|[\\\\/]{2}[^\\\\/]+[\\\\/]+[^\\\\/]+)?([\\\\/])?([\\s\\S]*?)$/\n      let result = splitDeviceRe.exec(path)\n      let device = result[1] || ''\n      let isUnc = Boolean(device && device.charAt(1) !== ':')\n      // UNC paths are always absolute\n      return Boolean(result[2] || isUnc)\n    } else {\n      return path.charAt(0) === '/'\n    }\n  }\n\n  parse (stack) {\n    if (!stack || stack.length === 0) return false\n\n    for (var i = 0, len = stack.length; i < len; i++) {\n      var callsite = stack[i]\n\n      // avoid null values\n      if (typeof callsite !== 'object') continue\n      if (!callsite.file_name || !callsite.line_number) continue\n\n      var type = this.isAbsolute(callsite.file_name) || callsite.file_name[0] === '.' ? 'user' : 'core'\n\n      // only use the callsite if its inside user space\n      if (!callsite || type === 'core' || callsite.file_name.indexOf('node_modules') > -1 ||\n          callsite.file_name.indexOf('vxx') > -1) {\n        continue\n      }\n\n      // get the whole context (all lines) and cache them if necessary\n      var context = this._cache.get(callsite.file_name)\n      var source = []\n      if (context && context.length > 0) {\n        // get line before the call\n        var preLine = callsite.line_number - this._context_size - 1\n        var pre = context.slice(preLine > 0 ? preLine : 0, callsite.line_number - 1)\n        if (pre && pre.length > 0) {\n          pre.forEach(function (line) {\n            source.push(line.replace(/\\t/g, '  '))\n          })\n        }\n        // get the line where the call has been made\n        if (context[callsite.line_number - 1]) {\n          source.push(context[callsite.line_number - 1].replace(/\\t/g, '  ').replace('  ', '>>'))\n        }\n        // and get the line after the call\n        var postLine = callsite.line_number + this._context_size\n        var post = context.slice(callsite.line_number, postLine)\n        if (post && post.length > 0) {\n          post.forEach(function (line) {\n            source.push(line.replace(/\\t/g, '  '))\n          })\n        }\n      }\n      return {\n        context: source.length > 0 ? source.join('\\n') : 'cannot retrieve source context',\n        callsite: [ callsite.file_name, callsite.line_number ].join(':')\n      }\n    }\n    return false\n  }\n\n  attachContext (error) {\n    if (!error) return error\n\n    // if pmx attached callsites we can parse them to retrieve the context\n    if (typeof (error.stackframes) === 'object') {\n      let result = this.parse(error.stackframes)\n      // no need to send it since there is already the stacktrace\n      delete error.stackframes\n      delete error.__error_callsites\n\n      if (result) {\n        error.callsite = result.callsite\n        error.context = result.context\n      }\n    }\n    // if the stack is here we can parse it directly from the stack string\n    // only if the context has been retrieved from elsewhere\n    if (typeof error.stack === 'string' && !error.callsite) {\n      let siteRegex = /(\\/[^\\\\\\n]*)/g\n      let tmp\n      let stack = []\n\n      // find matching groups\n      while ((tmp = siteRegex.exec(error.stack))) {\n        stack.push(tmp[1])\n      }\n\n      // parse each callsite to match the format used by the stackParser\n      stack = stack.map((callsite) => {\n        // remove the trailing ) if present\n        if (callsite[callsite.length - 1] === ')') {\n          callsite = callsite.substr(0, callsite.length - 1)\n        }\n        let location = callsite.split(':')\n\n        return location.length < 3 ? callsite : {\n          file_name: location[0],\n          line_number: parseInt(location[1])\n        }\n      })\n\n      let finalCallsite = this.parse(stack)\n      if (finalCallsite) {\n        error.callsite = finalCallsite.callsite\n        error.context = finalCallsite.context\n      }\n    }\n    return error\n  }\n}\n\n// EWMA = ExponentiallyWeightedMovingAverage from\n// https://github.com/felixge/node-measured/blob/master/lib/util/ExponentiallyMovingWeightedAverage.js\n// Copyright Felix Geisendörfer <felix@debuggable.com> under MIT license\nclass EWMA {\n  constructor () {\n    this._timePeriod = 60000\n    this._tickInterval = 5000\n    this._alpha = 1 - Math.exp(-this._tickInterval / this._timePeriod)\n    this._count = 0\n    this._rate = 0\n    this._interval = setInterval(_ => {\n      this.tick()\n    }, this._tickInterval)\n    this._interval.unref()\n  }\n\n  update (n) {\n    this._count += n || 1\n  }\n\n  tick () {\n    let instantRate = this._count / this._tickInterval\n    this._count = 0\n    this._rate += (this._alpha * (instantRate - this._rate))\n  }\n\n  rate (timeUnit) {\n    return (this._rate || 0) * timeUnit\n  }\n}\n\nclass Cipher {\n  static get CIPHER_ALGORITHM () {\n    return 'aes256'\n  }\n\n  /**\n   * Decipher data using 256 bits key (AES)\n   * @param {Hex} data input data\n   * @param {String} key 256 bits key\n   * @return {Object} deciphered data parsed as json object\n   */\n  static decipherMessage (msg, key) {\n    try {\n      let decipher = crypto.createDecipher(Cipher.CIPHER_ALGORITHM, key)\n      let decipheredMessage = decipher.update(msg, 'hex', 'utf8')\n      decipheredMessage += decipher.final('utf8')\n      return JSON.parse(decipheredMessage)\n    } catch (err) {\n      console.error(err)\n      return null\n    }\n  }\n\n  /**\n   * Cipher data using 256 bits key (AES)\n   * @param {String} data input data\n   * @param {String} key 256 bits key\n   * @return {Hex} ciphered data\n   */\n  static cipherMessage (data, key) {\n    try {\n      // stringify if not already done (fail safe)\n      if (typeof data !== 'string') {\n        data = JSON.stringify(data)\n      }\n\n      let cipher = crypto.createCipher(Cipher.CIPHER_ALGORITHM, key)\n      let cipheredData = cipher.update(data, 'utf8', 'hex')\n      cipheredData += cipher.final('hex')\n      return cipheredData\n    } catch (err) {\n      console.error(err)\n    }\n  }\n}\n\n/**\n * HTTP wrapper\n */\nclass HTTPClient {\n  /**\n   * Return native module (HTTP/HTTPS)\n   * @param {String} url\n   */\n  getModule (url) {\n    return url.match(/https:\\/\\//) ? require('https') : require('http')\n  }\n  /**\n   * Send an HTTP request and return data or error if status > 200\n   * @param {Object} opts\n   * @param {String} opts.url\n   * @param {String} opts.method\n   * @param {Object} [opts.data]\n   * @param {Object} [opts.headers]\n   * @param {Function} cb invoked with <err, body>\n   */\n  open (opts, cb) {\n    const http = this.getModule(opts.url)\n    const parsedUrl = url.parse(opts.url)\n    let data = null\n    const options = {\n      hostname: parsedUrl.hostname,\n      path: parsedUrl.path,\n      port: parsedUrl.port,\n      method: opts.method,\n      headers: opts.headers\n    }\n\n    if (opts.data) {\n      data = JSON.stringify(opts.data)\n      options.headers = Object.assign({\n        'Content-Type': 'application/json',\n        'Content-Length': data.length\n      }, opts.headers)\n    }\n\n    const req = http.request(options, (res) => {\n      let body = ''\n\n      res.setEncoding('utf8')\n      res.on('data', (chunk) => {\n        body += chunk.toString()\n      })\n      res.on('end', () => {\n        try {\n          let jsonData = JSON.parse(body)\n          return cb(null, jsonData)\n        } catch (err) {\n          return cb(err)\n        }\n      })\n    })\n    req.on('error', cb)\n\n    if (data) {\n      req.write(data)\n    }\n    req.end()\n  }\n}\n\nmodule.exports = {\n  EWMA: EWMA,\n  Cache: Cache,\n  StackTraceParser: StackTraceParser,\n  serialize: require('fclone'),\n  network: {\n    v4: retrieveAddress('v4'),\n    v6: retrieveAddress('v6')\n  },\n  HTTPClient: HTTPClient,\n  Cipher: Cipher,\n  clone: require('fclone')\n}\n"]}