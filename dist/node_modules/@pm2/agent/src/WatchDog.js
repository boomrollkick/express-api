'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var debug = require('debug')('interactor:watchdog');
var child = require('child_process');
var path = require('path');

process.env.PM2_AGENT_ONLINE = true;

module.exports = function () {
  function WatchDog() {
    _classCallCheck(this, WatchDog);
  }

  _createClass(WatchDog, null, [{
    key: 'start',
    value: function start(p) {
      var _this = this;

      this.ipm2 = p.conf.ipm2;
      this.relaunching = false;
      this.autoDumpTime = 5 * 60 * 1000;

      /**
       * Handle PM2 connection state changes
       */
      this.ipm2.on('ready', function (_) {
        debug('Connected to PM2');
        _this.relaunching = false;
        _this.autoDump();
      });

      debug('Launching');

      this.ipm2.on('reconnecting', function (_) {
        debug('PM2 is disconnected - Relaunching PM2');

        if (_this.relaunching === true) return debug('Already relaunching PM2');
        _this.relaunching = true;

        if (_this.dump_interval) {
          clearInterval(_this.dump_interval);
        }

        return _this.resurrect();
      });
    }
  }, {
    key: 'stop',
    value: function stop() {
      clearInterval(this.dump_interval);
    }
  }, {
    key: 'resurrect',
    value: function resurrect() {
      var _this2 = this;

      debug('Trying to launch PM2: ' + path.resolve(__dirname, '../../../../bin/pm2'));
      child.exec('node ' + path.resolve(__dirname, '../../../../bin/pm2') + ' resurrect', function (_) {
        setTimeout(function (_) {
          _this2.relaunching = false;
        }, 2500);
      });
    }
  }, {
    key: 'autoDump',
    value: function autoDump() {
      var _this3 = this;

      this.dump_interval = setInterval(function (_) {
        if (_this3.relaunching === true) return;

        _this3.ipm2.pm2Interface.dump(function (err) {
          return err ? debug('Error when dumping', err) : debug('PM2 process list dumped');
        });
      }, this.autoDumpTime);
    }
  }]);

  return WatchDog;
}();
//# sourceMappingURL=WatchDog.js.map