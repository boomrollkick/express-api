{"version":3,"sources":["../../../../../src/node_modules/@pm2/agent/src/InteractorClient.js"],"names":["log","require","fs","path","rpc","axon","chalk","os","constants","childProcess","printError","msg","process","env","PM2_SILENT","PM2_PROGRAMMATIC","Error","console","error","message","apply","arguments","printOut","module","exports","opts","cb","INTERACTOR_RPC_PORT","req","socket","client","Client","sock","once","close","e","code","stat","stats","uid","exit","connect","conf","PM2_INTERACTOR_PROCESSING","ping","err","online","launchRPC","data","setTimeout","disconnectRPC","kill","generateMethods","methods","Object","keys","forEach","key","method","name","self","args","Array","prototype","slice","call","unshift","removeAllListeners","success","client_sock","cst","InteractorJS","resolve","dirname","filename","testEnv","TRAVIS","NODE_ENV","match","out","openSync","INTERACTOR_LOG_FILE_PATH","child","spawn","NODEJS_EXECUTABLE","silent","detached","cwd","assign","PM2_HOME","PM2_MACHINE_NAME","machine_name","PM2_SECRET_KEY","secret_key","PM2_PUBLIC_KEY","public_key","PM2_REVERSE_INTERACT","reverse_interact","KEYMETRICS_NODE","info_node","AGENT_TRANSPORT_AXON","agent_transport_axon","AGENT_TRANSPORT_WEBSOCKET","agent_transport_websocket","PM2_VERSION","pm2_version","DEBUG","stdio","prevPid","readFileSync","INTERACTOR_PID_PATH","parseInt","writeFileSync","pid","on","status","ERROR_EXIT","unref","timeout","yellow","disconnect","clearTimeout","km_data","red","cyan","disabled","active","pending","infos","ignoredErr","daemonize","launchAndInteract","configuration","version_management","confFS","fileContent","INTERACTION_CONF","toString","replace","JSON","parse","KEYMETRICS_PUBLIC","KEYMETRICS_SECRET","INSTANCE_NAME","hostname","KEYMETRICS_ROOT_URL","stringify","indexOf","closing","timer","destroy","PM2_AGENT_ONLINE","getOrSetConf","launchOrAttach","PM2_NO_INTERACTION","getInfos"],"mappings":"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","file":"InteractorClient.js","sourcesContent":["'use strict'\n\nconst log = require('debug')('interactor:client')\nconst fs = require('fs')\nconst path = require('path')\nconst rpc = require('pm2-axon-rpc')\nconst axon = require('pm2-axon')\nconst chalk = require('chalk')\nconst os = require('os')\nconst constants = require('../constants')\nconst childProcess = require('child_process')\n\nconst printError = function (msg) {\n  if (process.env.PM2_SILENT || process.env.PM2_PROGRAMMATIC) return false\n  if (msg instanceof Error) return console.error(msg.message)\n  return console.error.apply(console, arguments)\n}\nconst printOut = function (msg) {\n  if (process.env.PM2_SILENT || process.env.PM2_PROGRAMMATIC) return false\n  return console.log.apply(console, arguments)\n}\n\nmodule.exports = class InteractorDaemonizer {\n  /**\n   * Ping the Interactor to see if its online\n   * @param {Object} opts global constants\n   * @param {String} opts.INTERACTOR_RPC_PORT path used to connect to the interactor\n   * @param {Function} cb invoked with <err, result>\n   */\n  static ping (opts, cb) {\n    if (typeof cb !== 'function') {\n      throw new Error('Missing parameters')\n    } else if (typeof opts !== 'object' || !opts || !opts.INTERACTOR_RPC_PORT) {\n      return cb(new Error('Missing parameters'))\n    }\n    const req = axon.socket('req')\n    const client = new rpc.Client(req)\n\n    log('[PING INTERACTOR] Trying to connect to Interactor daemon')\n\n    client.sock.once('reconnect attempt', _ => {\n      client.sock.close()\n      log('Interactor Daemon not launched')\n      return cb(null, false)\n    })\n\n    client.sock.once('connect', _ => {\n      client.sock.once('close', _ => {\n        return cb(null, true)\n      })\n      client.sock.close()\n      log('Interactor Daemon alive')\n    })\n\n    client.sock.once('error', (e) => {\n      if (e.code === 'EACCES') {\n        fs.stat(opts.INTERACTOR_RPC_PORT, (e, stats) => {\n          if (stats.uid === 0) {\n            console.error('Permission denied, activate current user')\n            return process.exit(1)\n          }\n        })\n      } else {\n        console.error('unexpected error')\n        console.error(e)\n      }\n    })\n\n    req.connect(opts.INTERACTOR_RPC_PORT)\n  }\n\n  /**\n   * Try to kill the interactor daemon via RPC\n   * @param {Object} conf global constants\n   * @param {String} conf.INTERACTOR_RPC_PORT path used to connect to the interactor\n   * @param {Function} cb invoked with <err>\n   */\n  static killInteractorDaemon (conf, cb) {\n    process.env.PM2_INTERACTOR_PROCESSING = true\n\n    log('Killing interactor #1 ping')\n    this.ping(conf, (err, online) => {\n      log(`Interactor is ${!online || err ? 'offline' : 'online'}`)\n\n      if (!online || err) {\n        return cb ? err ? cb(err) : cb(new Error('Interactor not launched')) : printError('Interactor not launched')\n      }\n\n      this.launchRPC(conf, (err, data) => {\n        if (err) {\n          setTimeout(_ => {\n            this.disconnectRPC(cb)\n          }, 100)\n          return false\n        }\n        this.rpc.kill((err) => {\n          if (err) printError(err)\n          setTimeout(_ => {\n            this.disconnectRPC(cb)\n          }, 100)\n        })\n        return false\n      })\n      return false\n    })\n  }\n\n  /**\n   * Start a RPC client that connect to the InteractorDaemon\n   * @param {Object} conf global constants\n   * @param {Function} cb invoked with <err>\n   */\n  static launchRPC (conf, cb) {\n    const req = axon.socket('req')\n    this.rpc = {}\n    this.client = new rpc.Client(req)\n\n    log('Generating Interactor methods of RPC client')\n\n    // attach known methods to RPC client\n    const generateMethods = (cb) => {\n      this.client.methods((err, methods) => {\n        if (err) return cb(err)\n        Object.keys(methods).forEach((key) => {\n          let method = methods[key]\n          log('+ Adding %s method to interactor RPC client', method.name);\n          ((name) => {\n            let self = this\n            this.rpc[name] = function () {\n              let args = Array.prototype.slice.call(arguments)\n              args.unshift(name)\n              self.client.call.apply(self.client, args)\n            }\n          })(method.name)\n        })\n        return cb()\n      })\n    }\n\n    this.client.sock.once('reconnect attempt', (err) => {\n      this.client.sock.removeAllListeners()\n      return cb(err, { success: false, msg: 'reconnect attempt' })\n    })\n\n    this.client.sock.once('error', (err) => {\n      log('-- Error in error catch all on Interactor --', err)\n      return cb(err, { success: false, msg: 'reconnect attempt' })\n    })\n\n    this.client.sock.once('connect', () => {\n      this.client.sock.removeAllListeners()\n      generateMethods(_ => {\n        log('Methods of RPC client for Interaction ready.')\n        return cb(null, { success: true })\n      })\n    })\n\n    this.client_sock = req.connect(conf.INTERACTOR_RPC_PORT)\n  }\n\n  /**\n   * Start or Restart the Interaction Daemon depending if its online or not\n   * @private\n   * @param {Object} conf global constants\n   * @param {Object} infos data used to start the interactor [can be recovered from FS]\n   * @param {String} infos.secret_key the secret key used to cipher data\n   * @param {String} infos.public_key the public key used identify the user\n   * @param {String} infos.machine_name [optional] override name of the machine\n   * @param {Function} cb invoked with <err, msg, process>\n   */\n  static daemonize (cst, conf, cb) {\n    const InteractorJS = path.resolve(path.dirname(module.filename), 'InteractorDaemon.js')\n\n    // Redirect PM2 internal err and out\n    // to STDERR STDOUT when running with Travis\n    const testEnv = process.env.TRAVIS || (process.env.NODE_ENV && process.env.NODE_ENV.match(/test/))\n    const out = testEnv ? 1 : fs.openSync(constants.INTERACTOR_LOG_FILE_PATH, 'a')\n    const err = testEnv ? 2 : fs.openSync(constants.INTERACTOR_LOG_FILE_PATH, 'a')\n\n    const child = childProcess.spawn(process.env.NODEJS_EXECUTABLE || 'node', [InteractorJS], {\n      silent: false,\n      detached: true,\n      cwd: process.cwd(),\n      env: Object.assign({\n        PM2_HOME: cst.PM2_HOME,\n        PM2_MACHINE_NAME: conf.machine_name,\n        PM2_SECRET_KEY: conf.secret_key,\n        PM2_PUBLIC_KEY: conf.public_key,\n        PM2_REVERSE_INTERACT: conf.reverse_interact,\n        KEYMETRICS_NODE: conf.info_node,\n        AGENT_TRANSPORT_AXON: conf.agent_transport_axon,\n        AGENT_TRANSPORT_WEBSOCKET: conf.agent_transport_websocket,\n        PM2_VERSION: conf.pm2_version,\n        DEBUG: process.env.DEBUG || 'interactor:*,-interactor:axon,-interactor:websocket,-interactor:pm2:client,-interactor:push'\n      }, process.env),\n      stdio: ['ipc', out, err]\n    })\n\n    try {\n      let prevPid = fs.readFileSync(constants.INTERACTOR_PID_PATH)\n      prevPid = parseInt(prevPid)\n      process.kill(prevPid)\n    } catch (e) {\n    }\n\n    fs.writeFileSync(cst.INTERACTOR_PID_PATH, child.pid)\n\n    child.on('close', (status) => {\n      if (status === constants.ERROR_EXIT) {\n        return cb(new Error('Agent has shutdown for unknown reason'))\n      }\n      return cb()\n    })\n\n    child.once('error', (err) => {\n      log('Error when launching Interactor, please check the agent logs')\n      return cb(err)\n    })\n\n    child.unref()\n\n    const timeout = setTimeout(_ => {\n      printOut(`${chalk.yellow('[PM2.IO][WARNING]')} Not managed to connect to PM2 Plus, retrying in background.`)\n      child.removeAllListeners()\n      child.disconnect()\n      return cb(null, {}, child)\n    }, 7000)\n\n    child.once('message', (msg) => {\n      clearTimeout(timeout)\n      log('Interactor daemon launched :', msg)\n\n      if (msg.log) {\n        return cb(null, msg, child)\n      }\n\n      child.removeAllListeners('error')\n      child.disconnect()\n\n      // Handle and show to user the different error message that can happen\n      if (msg.km_data && msg.km_data.error === true) {\n        if (!process.env.PM2_SILENT) {\n          console.log(chalk.red('[PM2.IO][ERROR]'), msg.km_data.msg)\n          console.log(chalk.cyan('[PM2.IO]') + ' Contact support contact@keymetrics.io and send us the error message')\n        }\n        return cb(msg)\n      } else if (msg.km_data && msg.km_data.disabled === true) {\n        if (!process.env.PM2_SILENT) {\n          console.log(chalk.cyan('[PM2.IO]') + ' Server DISABLED BY ADMINISTRATION contact support contact@keymetrics.io with reference to your public and secret keys)')\n        }\n        return cb(msg)\n      } else if (msg.km_data && msg.km_data.error === true) {\n        if (!process.env.PM2_SILENT) {\n          console.log('%s %s (Public: %s) (Secret: %s) (Machine name: %s)', chalk.red('[PM2.IO][ERROR]'),\n            msg.km_data.msg, msg.public_key, msg.secret_key, msg.machine_name)\n        }\n        return cb(msg)\n      } else if (msg.km_data && msg.km_data.active === false && msg.km_data.pending === true) {\n        if (!process.env.PM2_SILENT) {\n          console.log('%s You must upgrade your bucket in order to monitor more servers.', chalk.red('[PM2.IO]'))\n        }\n        return cb(msg)\n      }\n\n      return cb(null, msg, child)\n    })\n  }\n\n  /**\n   * Start or Restart the Interaction Daemon depending if its online or not\n   * @private\n   * @param {Object} conf global constants\n   * @param {Object} infos data used to start the interactor [can be recovered from FS]\n   * @param {String} infos.secret_key the secret key used to cipher data\n   * @param {String} infos.public_key the public key used identify the user\n   * @param {String} infos.machine_name [optional] override name of the machine\n   * @param {Function} cb invoked with <err, msg, process>\n   */\n  static launchOrAttach (conf, infos, cb) {\n    this.ping(conf, (err, online) => {\n      if (!err && online) {\n        log('Interactor online, restarting it...')\n        this.launchRPC(conf, _ => {\n          this.rpc.kill((ignoredErr) => {\n            this.daemonize(conf, infos, cb)\n          })\n        })\n      } else {\n        log('Interactor offline, launching it...')\n        this.daemonize(conf, infos, cb)\n      }\n    })\n  }\n\n  /**\n   * Restart the Interactor Daemon\n   * @param {Object} conf global constants\n   * @param {Function} cb invoked with <err, msg>\n   */\n  static update (conf, cb) {\n    this.ping(conf, (err, online) => {\n      if (err || !online) {\n        return cb ? cb(new Error('Interactor not launched')) : printError('Interactor not launched')\n      }\n      this.launchRPC(conf, _ => {\n        this.rpc.kill((err) => {\n          if (err) {\n            return cb ? cb(err) : printError(err)\n          }\n          printOut('Interactor successfully killed')\n          setTimeout(_ => {\n            this.launchAndInteract(conf, {}, _ => {\n              return cb(null, { msg: 'Daemon launched' })\n            })\n          }, 500)\n        })\n      })\n    })\n  }\n\n  /**\n   * Retrieve Interactor configuration from env, params and filesystem.\n   * @param {Object} cst global constants\n   * @param {Object} infos data used to start the interactor [optional]\n   * @param {String} infos.secret_key the secret key used to cipher data [optional]\n   * @param {String} infos.public_key the public key used identify the user [optional]\n   * @param {String} infos.machine_name override name of the machine [optional]\n   * @param {Function} cb invoked with <err, configuration>\n   */\n  static getOrSetConf (cst, infos, cb) {\n    infos = infos || {}\n    let configuration = {\n      version_management: {\n        active: true\n      }\n    }\n    let confFS = {}\n\n    // Try loading configuration file on FS\n    try {\n      let fileContent = fs.readFileSync(cst.INTERACTION_CONF).toString()\n      // Handle old configuration with json5\n      fileContent = fileContent.replace(/\\s(\\w+):/g, '\"$1\":')\n      // parse\n      confFS = JSON.parse(fileContent)\n\n      if (confFS.version_management) {\n        configuration.version_management.active = confFS.version_management.active\n      }\n    } catch (e) {\n      log('Interaction file does not exists')\n    }\n\n    // load the configration (first have priority)\n    //    -> from env variable\n    //    -> from params (eg. CLI)\n    //    -> from configuration on FS\n    configuration.public_key = process.env.PM2_PUBLIC_KEY || process.env.KEYMETRICS_PUBLIC || infos.public_key || confFS.public_key\n    configuration.secret_key = process.env.PM2_SECRET_KEY || process.env.KEYMETRICS_SECRET || infos.secret_key || confFS.secret_key\n    configuration.machine_name = process.env.PM2_MACHINE_NAME || process.env.INSTANCE_NAME || infos.machine_name || confFS.machine_name || os.hostname()\n    configuration.pm2_version = process.env.PM2_VERSION || infos.pm2_version || confFS.pm2_version\n    configuration.reverse_interact = confFS.reverse_interact || true\n    // is setup empty ? use the one provided in env OR root OTHERWISE get the one on FS conf OR fallback on root\n    configuration.info_node = process.env.KEYMETRICS_NODE || infos.info_node || confFS.info_node || cst.KEYMETRICS_ROOT_URL\n    configuration.agent_transport_websocket = process.env.AGENT_TRANSPORT_WEBSOCKET || infos.agent_transport_websocket || confFS.agent_transport_websocket || 'false'\n    configuration.agent_transport_axon = process.env.AGENT_TRANSPORT_AXON || infos.agent_transport_axon || confFS.agent_transport_axon || 'true'\n\n    if (!configuration.secret_key) {\n      log('Secret key is not defined in configuration', configuration)\n      return cb(new Error('secret key is not defined'))\n    }\n    if (!configuration.public_key) {\n      log('Public key is not defined in configuration', configuration)\n      return cb(new Error('public key is not defined'))\n    }\n\n    // write configuration on FS\n    try {\n      fs.writeFileSync(cst.INTERACTION_CONF, JSON.stringify(configuration, null, 4))\n    } catch (e) {\n      console.error('Error when writting configuration file %s', cst.INTERACTION_CONF)\n      return cb(e)\n    }\n    if (configuration.info_node.indexOf('http') === -1) { // handle old file\n      configuration.info_node = `https://${configuration.info_node}`\n    }\n    return cb(null, configuration)\n  }\n\n  /**\n   * Disconnect the RPC client from Interactor Daemon\n   * @param {Function} cb invoked with <err, msg>\n   */\n  static disconnectRPC (cb) {\n    log('Disconnect RPC')\n    if (!this.client_sock || !this.client_sock.close) {\n      log('RPC not launched')\n      return cb(null, {\n        success: false,\n        msg: 'RPC connection to Interactor Daemon is not launched'\n      })\n    }\n\n    if (this.client_sock.closing === true) {\n      log('RPC already closed')\n      return cb(null, {\n        success: false,\n        msg: 'RPC closed'\n      })\n    }\n\n    try {\n      let timer\n\n      log('Closing RPC INTERACTOR')\n\n      this.client_sock.once('close', _ => {\n        log('RPC INTERACTOR cleanly closed')\n        clearTimeout(timer)\n        return cb ? cb(null, { success: true }) : false\n      })\n\n      timer = setTimeout(_ => {\n        if (this.client_sock.destroy) {\n          this.client_sock.destroy()\n        }\n        return cb ? cb(null, { success: true }) : false\n      }, 200)\n\n      this.client_sock.close()\n    } catch (err) {\n      log('Error while closing RPC INTERACTOR : %s', err.message || err)\n      return cb ? cb(err) : false\n    }\n  }\n\n  /**\n   * Start the Interactor Daemon\n   * @param {Object} cst global constants\n   * @param {Object} infos data used to start the interactor [can be recovered from FS]\n   * @param {String} infos.secret_key the secret key used to cipher data\n   * @param {String} infos.public_key the public key used identify the user\n   * @param {String} infos.machine_name [optional] override name of the machine\n   * @param {Function} cb invoked with <err, msg, process>\n   */\n  static launchAndInteract (cst, opts, cb) {\n    // For Watchdog\n    if (process.env.PM2_AGENT_ONLINE) {\n      return cb()\n    }\n\n    process.env.PM2_INTERACTOR_PROCESSING = true\n\n    this.getOrSetConf(Object.assign(cst, constants), opts, (err, conf) => {\n      if (err || !conf) return cb(err || new Error('Cant retrieve configuration'))\n\n      if (!process.env.PM2_SILENT) {\n        console.log(chalk.cyan('[PM2 I/O]') + ' Using: Public key: %s | Private key: %s | Machine name: %s', conf.public_key, conf.secret_key, conf.machine_name)\n      }\n      return this.launchOrAttach(cst, conf, cb)\n    })\n  }\n\n  /**\n   * Retrieve configuration used by the Interaction Daemon\n   * @param {Object} cst global constants\n   * @param {Function} cb invoked with <err, data>\n   */\n  static getInteractInfo (cst, cb) {\n    log('Getting interaction info')\n    if (process.env.PM2_NO_INTERACTION) return cb(new Error('PM2_NO_INTERACTION set'))\n\n    this.ping(cst, (err, online) => {\n      if (err || !online) return cb(new Error('Interactor is offline'))\n\n      this.launchRPC(cst, _ => {\n        this.rpc.getInfos((err, infos) => {\n          if (err) return cb(err)\n\n          // Avoid general CLI to interfere with Keymetrics CLI commands\n          if (process.env.PM2_INTERACTOR_PROCESSING) return cb(null, infos)\n\n          this.disconnectRPC(() => {\n            return cb(null, infos)\n          })\n        })\n      })\n    })\n  }\n}\n"]}