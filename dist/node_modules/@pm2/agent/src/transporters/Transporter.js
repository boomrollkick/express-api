'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var log = require('debug')('interactor:transporter');
var EventEmitter2 = require('eventemitter2').EventEmitter2;
var dns = require('dns');
var cst = require('../../constants.js');

module.exports = function (_EventEmitter) {
  _inherits(Transporter, _EventEmitter);

  function Transporter() {
    _classCallCheck(this, Transporter);

    return _possibleConstructorReturn(this, (Transporter.__proto__ || Object.getPrototypeOf(Transporter)).call(this, {
      delimiter: ':',
      wildcard: true
    }));
  }

  /**
   * Disconnect and connect to a url
   * @param {String} url where the client will connect [optionnal]
   * @param {Function} cb invoked with <err>
   */


  _createClass(Transporter, [{
    key: 'reconnect',
    value: function reconnect(url, cb) {
      log('Reconnect transporter');
      this.disconnect();
      this.connect(url, cb);
    }

    /**
     * Broadcast the close event from websocket connection
     * @private
     * @param {Integer} code
     * @param {String} reason
     */

  }, {
    key: '_onClose',
    value: function _onClose(code, reason) {
      log('Closed transporter');
      this.disconnect();
      this._reconnect();
      this.emit('close', code, reason);
    }

    /**
     * Broadcast the error event from websocket connection
     * and eventually close the connection if it isnt already
     * @private
     * @param {Error} err
     */

  }, {
    key: '_onError',
    value: function _onError(err) {
      log('Error with transporter: ' + err.message);
      // close connection if needed
      this.disconnect();
      this._reconnect();
      this.emit('error', err);
    }

    /**
     * Worker that will empty the packet queue if the connection works.
     * @private
     */

  }, {
    key: '_emptyQueue',
    value: function _emptyQueue() {
      // create the queue if it doesn't exist
      if (!this.queue) {
        this.queue = [];
        return;
      }
      if (this.queue.length === 0) return;
      if (!this.isConnected()) return;

      log('Emptying queue (size : %d)', this.queue.length);

      // re-send all of the data
      while (this.queue.length > 0) {
        if (!this.isConnected()) return;
        var packet = this.queue[0];
        this.send(packet.channel, packet.data);
        this.queue.shift();
      }
    }

    /**
     * Is internet reachable via DNS
     * @private
     * @param {Function} cb invoked with <boolean>
     */

  }, {
    key: '_checkInternet',
    value: function _checkInternet(cb) {
      var _this2 = this;

      dns.lookup('google.com', function (err) {
        if (err && (err.code === 'ENOTFOUND' || err.code === 'EAI_AGAIN')) {
          if (_this2._online) {
            log('Internet is unreachable (DNS)');
          }
          _this2._online = false;
        } else {
          if (!_this2._online) {
            log('Internet is reachable again');
          }
          _this2._online = true;
        }
        return cb(_this2._online);
      });
    }

    /**
     * Strategy to reconnect to remote endpoint as soon as possible
     *  -> test internet connection with dns request (if fail retry in 2 sec)
     *  -> try to connect to endpoint (if fail retry in 5 sec)
     */

  }, {
    key: '_reconnect',
    value: function _reconnect() {
      var _this3 = this;

      if (this._reconnecting === true) return;
      this._reconnecting = true;

      log('Trying to reconnect to remote endpoint');
      this._checkInternet(function (online) {
        if (!online && !cst.PM2_DEBUG) {
          log('Internet down, retry in 2 seconds ..');
          _this3._reconnecting = false;
          return setTimeout(_this3._reconnect.bind(_this3), process.env.NODE_ENV === 'test' ? 1 : 2000);
        }
        _this3.connect(function (err) {
          if (err || !_this3.isConnected()) {
            log('Endpoint down, retry in 5 seconds ...');
            _this3._reconnecting = false;
            return setTimeout(_this3._reconnect.bind(_this3), process.env.NODE_ENV === 'test' ? 1 : 5000);
          }

          log('Connection etablished with remote endpoint');
          _this3._reconnecting = false;
          _this3._emptyQueue();
        });
      });
    }
  }]);

  return Transporter;
}(EventEmitter2);
//# sourceMappingURL=Transporter.js.map