{"version":3,"sources":["../../../../../../src/node_modules/@pm2/agent/src/transporters/WebsocketTransport.js"],"names":["WebSocket","require","log","cst","pkg","Transporter","module","exports","opts","daemon","_daemon","_ws","queue","_worker","setInterval","_emptyQueue","bind","process","env","NODE_ENV","_heartbeater","_heartbeat","isConnected","ping","url","cb","endpoint","perMessageDeflate","headers","PUBLIC_KEY","SECRET_KEY","MACHINE_NAME","PM2_VERSION","PROTOCOL_VERSION","version","onError","err","once","removeListener","on","_onClose","_onError","_onMessage","data","pong","close","readyState","channel","_reconnecting","_reconnect","length","PACKET_QUEUE_SIZE","shift","push","packet","payload","send","JSON","stringify","compress","COMPRESS_PROTOCOL","emit","parse","message"],"mappings":"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","file":"WebsocketTransport.js","sourcesContent":["'use strict'\n\nconst WebSocket = require('ws')\nconst log = require('debug')('interactor:websocket')\nconst cst = require('../../constants.js')\nconst pkg = require('../../package.json')\nconst Transporter = require('./Transporter')\n\n/**\n * Websocket Transport used to communicate with KM\n * @param {Object} opts options\n * @param {Daemon} daemon Interactor instance\n */\nmodule.exports = class WebsocketTransport extends Transporter {\n  constructor (opts, daemon) {\n    super()\n    log('WebsocketTransporter constructed')\n    this.opts = opts\n    this._daemon = daemon\n    this._ws = null\n    this.queue = []\n\n    this._worker = setInterval(this._emptyQueue.bind(this), process.env.NODE_ENV === 'test' ? 2 : 10000)\n    this._heartbeater = setInterval(this._heartbeat.bind(this), 5000)\n  }\n\n  /**\n   * Send heartbeat to websocket server (every 5 sec)\n   */\n  _heartbeat () {\n    if (!this.isConnected()) return false\n    return this._ws.ping()\n  }\n\n  /**\n   * Connect the websocket client to a url\n   * @param {String} url where the client will connect\n   * @param {Function} cb invoked with <err>\n   */\n  connect (url, cb) {\n    if (typeof url === 'function') {\n      cb = url\n      url = this.endpoint\n    }\n    this.endpoint = url\n    log('Connecting websocket transporter to %s...', url)\n\n    this._ws = new WebSocket(url, {\n      perMessageDeflate: false,\n      headers: {\n        'X-KM-PUBLIC': this.opts.PUBLIC_KEY,\n        'X-KM-SECRET': this.opts.SECRET_KEY,\n        'X-KM-SERVER': this.opts.MACHINE_NAME,\n        'X-PM2-VERSION': this.opts.PM2_VERSION || '0.0.0',\n        'X-PROTOCOL-VERSION': cst.PROTOCOL_VERSION,\n        'User-Agent': `PM2 Agent v${pkg.version}`\n      }\n    })\n\n    let onError = (err) => {\n      log('Error on websocket connect', err)\n      return cb(err)\n    }\n    this._ws.once('error', cb)\n    this._ws.once('open', () => {\n      log(`Connected to ${url}`)\n      if (!this._ws) return false // an error occurred\n      this._ws.removeListener('error', onError)\n      this._ws.on('close', this._onClose.bind(this))\n      this._ws.on('error', this._onError.bind(this))\n      return cb()\n    })\n\n    this._ws.on('message', this._onMessage.bind(this))\n    this._ws.on('ping', (data) => {\n      this._ws.pong()\n    })\n    this._ws.on('pong', (data) => {})\n  }\n\n  /**\n   * Disconnect clients\n   */\n  disconnect () {\n    log('Disconnect websocket transporter')\n    if (this.isConnected()) {\n      this._ws.close(1000, 'Disconnecting')\n    }\n    this._ws = null\n  }\n\n  /**\n   * Are push and reverse connections ready\n   * @return {Boolean}\n   */\n  isConnected () {\n    return this._ws && this._ws.readyState === 1\n  }\n\n  /**\n   * Send data to endpoints\n   * @param {String} channel\n   * @param {Object} data\n   */\n  send (channel, data) {\n    if (!channel || !data) {\n      return log('Trying to send message without all necessary fields')\n    }\n    if (!this.isConnected()) {\n      if (!this._reconnecting) this._reconnect()\n\n      // do not buffer status/monitoring packet\n      if (channel === 'status' || channel === 'monitoring') return\n\n      log('Trying to send data while not connected, buffering ...')\n\n      // remove last element if the queue is full\n      if (this.queue.length >= cst.PACKET_QUEUE_SIZE) {\n        this.queue.shift()\n      }\n      return this.queue.push({ channel: channel, data: data })\n    }\n\n    log('Sending packet over for channel %s', channel)\n    let packet = {\n      payload: data,\n      channel: channel\n    }\n    this._ws.send(JSON.stringify(packet), {\n      compress: cst.COMPRESS_PROTOCOL || false\n    }, (err) => {\n      packet = null\n      if (err) {\n        this.emit('error', err)\n        // buffer the packet to send it when the connection will be up again\n        this.queue.push({ channel: channel, data: data })\n      }\n    })\n  }\n\n  /**\n   * Message received from keymetrics\n   * @private\n   * @param {String} json packet\n   */\n  _onMessage (data) {\n    try {\n      data = JSON.parse(data)\n    } catch (err) {\n      return log('Bad packet received from remote : %s', err.message || err)\n    }\n\n    // ensure that all required field are present\n    if (!data || !data.payload || !data.channel) {\n      return log('Received message without all necessary fields')\n    }\n    log('Recevied data on channel %s', data.channel)\n    this.emit(data.channel, data.payload)\n  }\n}\n"]}