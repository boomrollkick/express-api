{"version":3,"sources":["../../../../../../src/node_modules/@pm2/agent/src/transporters/Transporter.js"],"names":["log","require","EventEmitter2","dns","cst","module","exports","delimiter","wildcard","url","cb","disconnect","connect","code","reason","_reconnect","emit","err","message","queue","length","isConnected","packet","send","channel","data","shift","lookup","_online","_reconnecting","_checkInternet","online","PM2_DEBUG","setTimeout","bind","process","env","NODE_ENV","_emptyQueue"],"mappings":"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","file":"Transporter.js","sourcesContent":["'use strict'\n\nconst log = require('debug')('interactor:transporter')\nconst EventEmitter2 = require('eventemitter2').EventEmitter2\nconst dns = require('dns')\nconst cst = require('../../constants.js')\n\nmodule.exports = class Transporter extends EventEmitter2 {\n  constructor () {\n    super({\n      delimiter: ':',\n      wildcard: true\n    })\n  }\n\n  /**\n   * Disconnect and connect to a url\n   * @param {String} url where the client will connect [optionnal]\n   * @param {Function} cb invoked with <err>\n   */\n  reconnect (url, cb) {\n    log('Reconnect transporter')\n    this.disconnect()\n    this.connect(url, cb)\n  }\n\n  /**\n   * Broadcast the close event from websocket connection\n   * @private\n   * @param {Integer} code\n   * @param {String} reason\n   */\n  _onClose (code, reason) {\n    log('Closed transporter')\n    this.disconnect()\n    this._reconnect()\n    this.emit('close', code, reason)\n  }\n\n  /**\n   * Broadcast the error event from websocket connection\n   * and eventually close the connection if it isnt already\n   * @private\n   * @param {Error} err\n   */\n  _onError (err) {\n    log(`Error with transporter: ${err.message}`)\n    // close connection if needed\n    this.disconnect()\n    this._reconnect()\n    this.emit('error', err)\n  }\n\n  /**\n   * Worker that will empty the packet queue if the connection works.\n   * @private\n   */\n  _emptyQueue () {\n    // create the queue if it doesn't exist\n    if (!this.queue) {\n      this.queue = []\n      return\n    }\n    if (this.queue.length === 0) return\n    if (!this.isConnected()) return\n\n    log('Emptying queue (size : %d)', this.queue.length)\n\n    // re-send all of the data\n    while (this.queue.length > 0) {\n      if (!this.isConnected()) return\n      let packet = this.queue[0]\n      this.send(packet.channel, packet.data)\n      this.queue.shift()\n    }\n  }\n\n  /**\n   * Is internet reachable via DNS\n   * @private\n   * @param {Function} cb invoked with <boolean>\n   */\n  _checkInternet (cb) {\n    dns.lookup('google.com', (err) => {\n      if (err && (err.code === 'ENOTFOUND' || err.code === 'EAI_AGAIN')) {\n        if (this._online) {\n          log('Internet is unreachable (DNS)')\n        }\n        this._online = false\n      } else {\n        if (!this._online) {\n          log('Internet is reachable again')\n        }\n        this._online = true\n      }\n      return cb(this._online)\n    })\n  }\n\n  /**\n   * Strategy to reconnect to remote endpoint as soon as possible\n   *  -> test internet connection with dns request (if fail retry in 2 sec)\n   *  -> try to connect to endpoint (if fail retry in 5 sec)\n   */\n  _reconnect () {\n    if (this._reconnecting === true) return\n    this._reconnecting = true\n\n    log('Trying to reconnect to remote endpoint')\n    this._checkInternet((online) => {\n      if (!online && !cst.PM2_DEBUG) {\n        log('Internet down, retry in 2 seconds ..')\n        this._reconnecting = false\n        return setTimeout(this._reconnect.bind(this), process.env.NODE_ENV === 'test' ? 1 : 2000)\n      }\n      this.connect((err) => {\n        if (err || !this.isConnected()) {\n          log('Endpoint down, retry in 5 seconds ...')\n          this._reconnecting = false\n          return setTimeout(this._reconnect.bind(this), process.env.NODE_ENV === 'test' ? 1 : 5000)\n        }\n\n        log('Connection etablished with remote endpoint')\n        this._reconnecting = false\n        this._emptyQueue()\n      })\n    })\n  }\n}\n"]}