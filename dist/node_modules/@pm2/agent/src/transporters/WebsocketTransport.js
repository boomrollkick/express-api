'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var WebSocket = require('ws');
var log = require('debug')('interactor:websocket');
var cst = require('../../constants.js');
var pkg = require('../../package.json');
var Transporter = require('./Transporter');

/**
 * Websocket Transport used to communicate with KM
 * @param {Object} opts options
 * @param {Daemon} daemon Interactor instance
 */
module.exports = function (_Transporter) {
  _inherits(WebsocketTransport, _Transporter);

  function WebsocketTransport(opts, daemon) {
    _classCallCheck(this, WebsocketTransport);

    var _this = _possibleConstructorReturn(this, (WebsocketTransport.__proto__ || Object.getPrototypeOf(WebsocketTransport)).call(this));

    log('WebsocketTransporter constructed');
    _this.opts = opts;
    _this._daemon = daemon;
    _this._ws = null;
    _this.queue = [];

    _this._worker = setInterval(_this._emptyQueue.bind(_this), process.env.NODE_ENV === 'test' ? 2 : 10000);
    _this._heartbeater = setInterval(_this._heartbeat.bind(_this), 5000);
    return _this;
  }

  /**
   * Send heartbeat to websocket server (every 5 sec)
   */


  _createClass(WebsocketTransport, [{
    key: '_heartbeat',
    value: function _heartbeat() {
      if (!this.isConnected()) return false;
      return this._ws.ping();
    }

    /**
     * Connect the websocket client to a url
     * @param {String} url where the client will connect
     * @param {Function} cb invoked with <err>
     */

  }, {
    key: 'connect',
    value: function connect(url, cb) {
      var _this2 = this;

      if (typeof url === 'function') {
        cb = url;
        url = this.endpoint;
      }
      this.endpoint = url;
      log('Connecting websocket transporter to %s...', url);

      this._ws = new WebSocket(url, {
        perMessageDeflate: false,
        headers: {
          'X-KM-PUBLIC': this.opts.PUBLIC_KEY,
          'X-KM-SECRET': this.opts.SECRET_KEY,
          'X-KM-SERVER': this.opts.MACHINE_NAME,
          'X-PM2-VERSION': this.opts.PM2_VERSION || '0.0.0',
          'X-PROTOCOL-VERSION': cst.PROTOCOL_VERSION,
          'User-Agent': 'PM2 Agent v' + pkg.version
        }
      });

      var onError = function onError(err) {
        log('Error on websocket connect', err);
        return cb(err);
      };
      this._ws.once('error', cb);
      this._ws.once('open', function () {
        log('Connected to ' + url);
        if (!_this2._ws) return false; // an error occurred
        _this2._ws.removeListener('error', onError);
        _this2._ws.on('close', _this2._onClose.bind(_this2));
        _this2._ws.on('error', _this2._onError.bind(_this2));
        return cb();
      });

      this._ws.on('message', this._onMessage.bind(this));
      this._ws.on('ping', function (data) {
        _this2._ws.pong();
      });
      this._ws.on('pong', function (data) {});
    }

    /**
     * Disconnect clients
     */

  }, {
    key: 'disconnect',
    value: function disconnect() {
      log('Disconnect websocket transporter');
      if (this.isConnected()) {
        this._ws.close(1000, 'Disconnecting');
      }
      this._ws = null;
    }

    /**
     * Are push and reverse connections ready
     * @return {Boolean}
     */

  }, {
    key: 'isConnected',
    value: function isConnected() {
      return this._ws && this._ws.readyState === 1;
    }

    /**
     * Send data to endpoints
     * @param {String} channel
     * @param {Object} data
     */

  }, {
    key: 'send',
    value: function send(channel, data) {
      var _this3 = this;

      if (!channel || !data) {
        return log('Trying to send message without all necessary fields');
      }
      if (!this.isConnected()) {
        if (!this._reconnecting) this._reconnect();

        // do not buffer status/monitoring packet
        if (channel === 'status' || channel === 'monitoring') return;

        log('Trying to send data while not connected, buffering ...');

        // remove last element if the queue is full
        if (this.queue.length >= cst.PACKET_QUEUE_SIZE) {
          this.queue.shift();
        }
        return this.queue.push({ channel: channel, data: data });
      }

      log('Sending packet over for channel %s', channel);
      var packet = {
        payload: data,
        channel: channel
      };
      this._ws.send(JSON.stringify(packet), {
        compress: cst.COMPRESS_PROTOCOL || false
      }, function (err) {
        packet = null;
        if (err) {
          _this3.emit('error', err);
          // buffer the packet to send it when the connection will be up again
          _this3.queue.push({ channel: channel, data: data });
        }
      });
    }

    /**
     * Message received from keymetrics
     * @private
     * @param {String} json packet
     */

  }, {
    key: '_onMessage',
    value: function _onMessage(data) {
      try {
        data = JSON.parse(data);
      } catch (err) {
        return log('Bad packet received from remote : %s', err.message || err);
      }

      // ensure that all required field are present
      if (!data || !data.payload || !data.channel) {
        return log('Received message without all necessary fields');
      }
      log('Recevied data on channel %s', data.channel);
      this.emit(data.channel, data.payload);
    }
  }]);

  return WebsocketTransport;
}(Transporter);
//# sourceMappingURL=WebsocketTransport.js.map