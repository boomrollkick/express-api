{"version":3,"sources":["../../../../../../src/node_modules/@pm2/agent/src/transporters/AxonTransport.js"],"names":["axon","require","nssocket","log","cst","Utility","url","async","DataRetriever","Transporter","module","exports","opts","daemon","_daemon","_socket","_axon","buffer","axonReconnectCounter","_pushWorker","setInterval","_send","bind","STATUS_INTERVAL","urls","cb","self","pullUrl","parse","pull","pullHost","hostname","pullPort","port","pushUrl","push","pushHost","pushPort","socket","NsSocket","type","reconnect","maxListeners","data","getSystemMetadata","key","toLowerCase","Cipher","cipherMessage","JSON","stringify","SECRET_KEY","send","public_key","PUBLIC_KEY","on","_onClose","err","message","_onError","_onMessage","apply","parallel","next","connect","parseInt","destroy","close","isNsSocketConnected","connected","isAxonConnected","socks","sock","bufferSize","channel","sendFile","indexOf","sendViaNssocket","isConnected","meta","pm_id","name","server_name","getPM2Client","rpc","getMonitorData","Error","processes","filter","proc","pm2_env","_km_monitored","status","MACHINE_NAME","internal_ip","rev_con","Object","keys","length","join","preparePacket","packet","sendv2","event","decipherMessage","eventName","substr","emit"],"mappings":"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","file":"AxonTransport.js","sourcesContent":["'use strict'\n\nconst axon = require('pm2-axon')\nconst nssocket = require('nssocket')\nconst log = require('debug')('interactor:axon')\nconst cst = require('../../constants.js')\nconst Utility = require('../Utility.js')\nconst url = require('url')\nconst async = require('async')\nconst DataRetriever = require('../push/DataRetriever.js')\nconst Transporter = require('./Transporter')\n\n/**\n * Axon Transport used to communicate with KM\n * @param {Object} opts options\n * @param {Daemon} daemon Interactor instance\n */\nmodule.exports = class AxonTransport extends Transporter {\n  constructor (opts, daemon) {\n    super()\n    log('AxonTransporter constructed')\n    this.opts = opts\n    this._daemon = daemon\n    this._socket = null\n    this._axon = null\n    this.buffer = {}\n    this.axonReconnectCounter = 0\n\n    this._pushWorker = setInterval(this._send.bind(this), cst.STATUS_INTERVAL)\n  }\n\n  /**\n   * Connect the axon client to a url\n   * @param {String} url where the client will connect\n   * @param {Function} cb invoked with <err>\n   */\n  connect (urls, cb) {\n    log('Connecting axon transporter...')\n    let self = this\n    if (typeof urls === 'function') {\n      cb = urls\n      urls = this.urls\n    }\n    this.urls = urls\n    let pullUrl = url.parse(urls.pull)\n    let pullHost = pullUrl.hostname\n    let pullPort = pullUrl.port\n    let pushUrl = url.parse(urls.push)\n    let pushHost = pushUrl.hostname\n    let pushPort = pushUrl.port\n\n    this._axon = axon.socket('pub')\n\n    // Create connection to reverse interaction server\n    this._socket = new nssocket.NsSocket({\n      type: 'tcp4',\n      reconnect: false,\n      maxListeners: 50\n    })\n    // Authenticate request on reverse server\n    this._socket.data('ask', () => {\n      log('Authenticate axon transporter')\n      let data = this._daemon.getSystemMetadata()\n      for (let key in data) {\n        data[key.toLowerCase()] = data[key]\n        delete data[key]\n      }\n      data = Utility.Cipher.cipherMessage(JSON.stringify(data), this.opts.SECRET_KEY)\n\n      // Send response\n      if (!this._socket) return false // disconnected before\n      this._socket.send('ask:rep', {\n        data: data,\n        public_key: this.opts.PUBLIC_KEY\n      })\n      return false\n    })\n\n    // Errors / close\n    this._socket.on('close', _ => {\n      log('Got a close on nssocket connection')\n      this._onClose()\n    })\n    this._socket.on('error', (err) => {\n      log(`Got an error on nssocket connection: ${err.message}`)\n      this._onError(err)\n    })\n    this._axon.on('close', _ => {\n      log('Got a close on axon connection')\n    })\n    this._axon.on('error', (err) => {\n      log(`Got an error on axon connection: ${err.message}`)\n    })\n    this._axon.on('reconnect attempt', _ => {\n      log(`Axon is trying to reconnect`)\n    })\n\n    // Setup listener\n    this._socket.data('*', function (data) {\n      // Call _onMessage() with event and data as params\n      // Apply self to use this as transport\n      return self._onMessage.apply(self, [ this, data ]) // eslint-disable-line\n    })\n\n    // Connect to interaction/reverse server\n    log(`Connect axon with ${pushHost}:${pushPort} and nssocket with ${pullHost}:${pullPort}`)\n    async.parallel([\n      (next) => this._axon.connect(parseInt(pushPort), pushHost, next),\n      (next) => this._socket.connect(parseInt(pullPort), pullHost, next)\n    ], cb)\n  }\n\n  /**\n   * Disconnect clients\n   */\n  disconnect () {\n    log('Disconnect axon transporter')\n    if (this._socket) {\n      log('Destroy pull socket on axon transporter')\n      this._socket.destroy()\n    }\n    if (this._axon) {\n      log('Destroy push axon on axon transporter')\n      this._axon.close()\n    }\n    this._axon = null\n    this._socket = null\n  }\n\n  /**\n   * Are push and reverse connections ready\n   * @return {Boolean}\n   */\n  isConnected () {\n    const isNsSocketConnected = this._socket && this._socket.connected\n    const isAxonConnected = this._axon && this._axon.socks && this._axon.socks[0]\n    if (!isNsSocketConnected) log('Nssocket is not connected anymore')\n    if (!isAxonConnected) log(`Axon is not connected anymore (Buffer: ${this._axon && this._axon.socks && this._axon.socks[0] ? this._axon.sock.socks[0].bufferSize : 0})`)\n    return isNsSocketConnected && isAxonConnected\n  }\n\n  /**\n   * Send data to buffer\n   * @param {String} channel\n   * @param {Object} data\n   */\n  send (channel, data) {\n    // Handle bad packet\n    if (!channel || !data) return log('Trying to send message without all necessary fields')\n    // Handle status\n    if (channel === 'status' || channel === 'monitoring') return log('Status messages are handled manually with axon.')\n    // Handle custom channels\n    if (channel === 'profiling') return this.sendFile(data)\n    if (channel.indexOf('trigger:') !== -1) return this.sendViaNssocket(channel, data)\n\n    log('Sending packet to buffer over for channel %s', channel)\n    if (!this.buffer[channel]) this.buffer[channel] = []\n    return this.buffer[channel].push(data)\n  }\n\n  /**\n   * Send file\n   * @param {Object} data\n   */\n  sendFile (data) {\n    if (!this.isConnected()) return log(\"Can't send file, axon is not connected\")\n    const meta = {\n      pm_id: data.pm_id,\n      name: data.name,\n      server_name: data.server_name,\n      public_key: data.public_key,\n      type: data.type\n    }\n    meta[data.type] = true\n\n    return this._axon.send(JSON.stringify(meta), data.data)\n  }\n\n  /**\n   * Prepare packet, add status\n   * @param {Function} next\n   */\n  preparePacket (next) {\n    if (typeof this._daemon.getPM2Client().rpc.getMonitorData !== 'function') return next(new Error('Not able to connect to PM2'))\n    this._daemon.getPM2Client().rpc.getMonitorData({}, (err, processes) => {\n      if (err || !processes) return next(err || new Error('Not able to retrieve PM2 processes'))\n\n      log('Add status to packet')\n      processes = processes.filter((proc) => proc.pm2_env._km_monitored !== false)\n      this.buffer['status'] = {\n        data: DataRetriever.status(processes, this.opts),\n        server_name: this.opts.MACHINE_NAME,\n        internal_ip: this.opts.internal_ip,\n        rev_con: true\n      }\n      this.buffer.server_name = this.opts.MACHINE_NAME\n      return next()\n    })\n  }\n\n  /**\n   * Send buffer to endpoints\n   */\n  _send () {\n    log(`Sending data to endpoints (Buffer size: ${Object.keys(this.buffer).length} keys [${Object.keys(this.buffer).join(', ')}])`)\n    if (!this.isConnected()) return log(\"Axon is not connected, can't send any data.\")\n\n    // Handle axon buffer size\n    if (this._axon.socks[0].bufferSize > 290000) {\n      this.buffer = {} // reset buffer\n      log(`Axon buffer is too high (${this._axon.socks[0].bufferSize}), stop sending data to it.`)\n      if (++this.axonReconnectCounter > 20) {\n        log('Forcing axon reconnection')\n        this.axonReconnectCounter = 0\n        this.reconnect(this.urls, _ => {\n          log('Axon is now reconnected')\n        })\n      }\n      return false\n    }\n\n    // Send status with packet\n    this.preparePacket((err) => {\n      if (err) return log(`Got an error on packet preparation: ${err.message}`)\n\n      let packet = {\n        public_key: this.opts.PUBLIC_KEY,\n        data: Utility.Cipher.cipherMessage(this.buffer, this.opts.SECRET_KEY)\n      }\n      this.buffer = {} // reset buffer\n      return this._axon.sendv2(JSON.stringify(packet), _ => {\n        log('Buffer was sended.')\n        packet = null\n      })\n    })\n  }\n\n  /**\n   * Send via nssocket\n   */\n  sendViaNssocket (channel, data) {\n    if (!this.isConnected()) return log(\"Can't send file, nssocket is not connected\")\n    return this._socket.send(channel, data)\n  }\n\n  /**\n   * Broadcast the close event from websocket connection\n   * @private\n   * @param {Integer} code\n   * @param {String} reason\n   */\n  _onMessage (event, data) {\n    if (!data) return\n    data = Utility.Cipher.decipherMessage(data, this.opts.SECRET_KEY)\n    if (!data) return\n\n    // ensure that all required field are present\n    let eventName = event.event.join(':').substr('data:'.length)\n    log('Received event %s from reverse server, emit it', eventName)\n    this.emit(eventName, data)\n  }\n}\n"]}