{"version":3,"sources":["../../../../../src/node_modules/@pm2/agent/src/TransporterInterface.js"],"names":["EventEmitter2","require","async","log","path","config","join","__dirname","transporters","module","exports","opts","daemon","delimiter","wildcard","Map","transportersEndpoints","endpoints","name","enabled","Transport","_loadTransporter","set","Object","assign","_bindEvents","forEach","transporter","disconnect","cb","each","data","next","transport","isConnected","JSON","stringify","connect","_buildConnectParamsFromEndpoints","reconnect","err","channel","send","_getTransportName","toLowerCase","charAt","toUpperCase","slice","self","get","on","emit","event","params","key","values","connected","entry","push","constructor"],"mappings":"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","file":"TransporterInterface.js","sourcesContent":["'use strict'\n\nconst EventEmitter2 = require('eventemitter2').EventEmitter2\nconst async = require('async')\nconst log = require('debug')('interactor:interface')\nconst path = require('path')\nconst config = require(path.join(__dirname, '../config')).transporters\n\nmodule.exports = class TransporterInterface extends EventEmitter2 {\n  /**\n   * Construct new transporter interface with default options and daemon\n   * @param {Object} opts [optionnal] Default options\n   * @param {InteractorDaemon} Daemon needed by transports\n   */\n  constructor (opts, daemon) {\n    log('New transporter interface')\n\n    super({\n      delimiter: ':',\n      wildcard: true\n    })\n    this.opts = opts || {}\n    this.daemon = daemon\n    this.transporters = new Map()\n    this.transportersEndpoints = new Map()\n    this.endpoints = new Map()\n    this.config = config\n    return this\n  }\n\n  /**\n   * Add transporter\n   * @param {String} name of the transporter (in ./transporters/)\n   * @param {Object} opts [optionnal] custom options\n   */\n  bind (name, opts) {\n    if (!opts) opts = {}\n    if (!this.config[name] || !this.config[name].enabled) return this\n    log('Bind [%s] transport to transporter interface', name)\n    let Transport = this._loadTransporter(name)\n    this.transporters.set(name, new Transport(Object.assign(opts, this.opts), this.daemon))\n    this.transportersEndpoints.set(name, this.config[name].endpoints || {})\n    this._bindEvents(name)\n    return this\n  }\n\n  /**\n   * Disconnect each transporters\n   */\n  disconnect () {\n    log('Disconnect all transporters')\n    this.transporters.forEach(transporter => {\n      transporter.disconnect()\n    })\n  }\n\n  /**\n   * Connect each transporters with new endpoints\n   * @param {Object} endpoints\n   * @param {Function} callback\n   */\n  connect (endpoints, cb) {\n    async.each(this.transporters, (data, next) => {\n      let name = data[0]\n      let transport = data[1]\n      // Isn't connected, connect it\n      if (!transport.isConnected()) {\n        log(`Transporters are not connected, connect them with: ${JSON.stringify(endpoints)}`)\n        transport.connect(this._buildConnectParamsFromEndpoints(name, endpoints), next)\n      // Endpoints have changed, reconnect\n      } else if (JSON.stringify(endpoints) !== JSON.stringify(this.endpoints)) {\n        log(`Received new endpoints to connect transporters: ${JSON.stringify(endpoints)}`)\n        transport.reconnect(this._buildConnectParamsFromEndpoints(name, endpoints), next)\n      // No changes\n      } else {\n        return next(null)\n      }\n    }, (err) => {\n      // Save endpoints\n      this.endpoints = endpoints\n      cb(err)\n    })\n  }\n\n  /**\n   * Send to each transporters\n   */\n  send (channel, data) {\n    this.transporters.forEach(transporter => {\n      transporter.send(channel, data)\n    })\n  }\n\n  /**\n   * Require transporter\n   * @param {String} name of the transporter (in ./transporters/)\n   * @private\n   */\n  _loadTransporter (name) {\n    return require('./transporters/' + this._getTransportName(name))\n  }\n\n  /**\n   * Resolve transporter name\n   * @param {String} name of the transporter (in ./transporters/)\n   * @private\n   */\n  _getTransportName (name) {\n    name = name.toLowerCase()\n    name = name.charAt(0).toUpperCase() + name.slice(1)\n    return name + 'Transport'\n  }\n\n  /**\n   * Emit event on transporter event\n   * @param {String} name of the transporter\n   * @private\n   */\n  _bindEvents (name) {\n    const self = this\n    this.transporters.get(name).on('**', function (data) {\n      log('Received event from %s transporter', name)\n      self.emit(this.event, data)\n    })\n  }\n\n  /**\n   * Return an object used to connect() transport\n   * based on transporter endpoints options\n   * @param {String} transporter's name\n   * @param {Object} endpoints\n   * @private\n   */\n  _buildConnectParamsFromEndpoints (name, endpoints) {\n    if (!endpoints) endpoints = {}\n    const opts = this.transportersEndpoints.get(name)\n    if (typeof opts === 'string') {\n      return endpoints[opts] || opts\n    }\n    let params = {}\n    for (let key in opts) {\n      params[key] = endpoints[opts[key]] || opts[key]\n    }\n    return params\n  }\n\n  /**\n   * Is at least one transporter connected\n   * @return {Boolean}\n   */\n  isConnected () {\n    for (let transporter of this.transporters.values()) {\n      if (transporter.isConnected()) return true\n    }\n    return false\n  }\n\n  /**\n   * Get active transporters that are pushing data\n   * @return {String[]}\n   */\n  getActiveTransporters () {\n    let connected = []\n    for (let entry of this.transporters.values()) {\n      if (entry.isConnected()) {\n        connected.push(entry.constructor.name)\n      }\n    }\n    return connected\n  }\n}\n"]}