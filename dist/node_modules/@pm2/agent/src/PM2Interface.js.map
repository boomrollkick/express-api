{"version":3,"sources":["../../../../../src/node_modules/@pm2/agent/src/PM2Interface.js"],"names":["log","require","path","async","fs","cst","module","exports","rpc","name","cb","foundProc","getMonitorData","err","list","forEach","proc","pm2_env","pm_exec_path","resolve","toString","push","opts","self","appName","number","addProcs","value","ex","duplicateProcessId","pm_id","bind","rmProcs","procs","i","deleteProcessId","end","success","getProcessByName","length","Error","procNumber","indexOf","parseInt","envArr","writeFileSync","DUMP_FILE_PATH","JSON","stringify","e","stack","each","app","done","instances","pmx_module","fn","params","id","undefined","processes","Object","assign","eachOf","process","_key","localCb","_callWithProcessId","restartProcessId","reloadProcessId","newParams","resetMetaProcessId","ping"],"mappings":"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","file":"PM2Interface.js","sourcesContent":["'use strict'\n\nconst log = require('debug')('interactor:pm2:interface')\nconst path = require('path')\nconst async = require('async')\nconst fs = require('fs')\nconst cst = require('../constants')\n\nmodule.exports = class PM2Interface {\n  constructor (rpc) {\n    log('PM2Interface instantiate')\n    this.rpc = rpc\n  }\n\n  getProcessByName (name, cb) {\n    var foundProc = []\n\n    this.rpc.getMonitorData({}, (err, list) => {\n      if (err) {\n        log('Error retrieving process list: ' + err)\n        return cb(err)\n      }\n\n      list.forEach((proc) => {\n        if (proc.pm2_env.name === name || proc.pm2_env.pm_exec_path === path.resolve(name.toString())) {\n          foundProc.push(proc)\n        }\n      })\n\n      return cb(null, foundProc)\n    })\n  }\n\n  /**\n   * Scale up/down a process\n   * @method scale\n   */\n  scale (opts, cb) {\n    const self = this\n    const appName = opts.name\n    let number = opts.number\n\n    function addProcs (proc, value, cb) {\n      (function ex (proc, number) {\n        if (number-- === 0) return cb()\n        log('Scaling up application')\n        self.rpc.duplicateProcessId(proc.pm2_env.pm_id, ex.bind(this, proc, number))\n      })(proc, number)\n    }\n\n    function rmProcs (procs, value, cb) {\n      let i = 0;\n\n      (function ex (procs, number) {\n        if (number++ === 0) return cb()\n        self.rpc.deleteProcessId(procs[i++].pm2_env.pm_id, ex.bind(this, procs, number))\n      })(procs, number)\n    }\n\n    let end = () => {\n      return cb ? cb(null, {success: true}) : log('Successfuly scale')\n    }\n\n    this.getProcessByName(appName, (err, procs) => {\n      if (err) {\n        return cb ? cb(err) : log(err)\n      }\n\n      if (!procs || procs.length === 0) {\n        log('Application %s not found', appName)\n        return cb ? cb(new Error('App not found')) : log('App not found')\n      }\n\n      let procNumber = procs.length\n\n      if (typeof (number) === 'string' && number.indexOf('+') >= 0) {\n        number = parseInt(number, 10)\n        return addProcs(procs[0], number, end)\n      } else if (typeof (number) === 'string' && number.indexOf('-') >= 0) {\n        number = parseInt(number, 10)\n        return rmProcs(procs, number, end)\n      } else {\n        number = parseInt(number, 10)\n        number = number - procNumber\n\n        if (number < 0) {\n          return rmProcs(procs, number, end)\n        } else if (number > 0) {\n          return addProcs(procs[0], number, end)\n        } else {\n          log('Nothing to do')\n          return cb ? cb(new Error('Same process number')) : log('Same process number')\n        }\n      }\n    })\n  }\n\n  /**\n   * Dump current processes managed by pm2 into DUMP_FILE_PATH file\n   * @method dump\n   * @param {} cb\n   * @return\n   */\n  dump (cb) {\n    var envArr = []\n\n    this.rpc.getMonitorData({}, (err, list) => {\n      if (err) {\n        return typeof cb === 'function' ? cb(err) : false\n      }\n\n      /**\n       * Description\n       * @method end\n       * @param {} err\n       * @return\n       */\n      const end = () => {\n        // Overwrite dump file, delete if broken and exit\n        try {\n          fs.writeFileSync(cst.DUMP_FILE_PATH, JSON.stringify(envArr, '', 2))\n        } catch (e) {\n          log('Dump error', e.stack || e)\n          return cb(e)\n        }\n        return (cb) ? cb(null, {success: true}) : true\n      }\n\n      async.each(list, (app, done) => {\n        delete app.pm2_env.instances\n        delete app.pm2_env.pm_id\n        if (!app.pm2_env.pmx_module) {\n          envArr.push(app.pm2_env)\n        }\n        done()\n      }, end)\n    })\n  }\n\n  _callWithProcessId (fn, params, cb) {\n    if (params.id === undefined) {\n      this.getProcessByName(params.name, (err, processes) => {\n        if (err) return cb(err)\n\n        // in case we don't find the process ourselves\n        // we believe pm2 will find it\n        if (processes.length === 0) {\n          return fn(Object.assign({ id: params.name }, params), cb)\n        }\n\n        async.eachOf(processes, (process, _key, localCb) => {\n          params.id = process.pm_id\n          fn(params, localCb)\n        }, cb)\n      })\n    } else {\n      fn(params, cb)\n    }\n  }\n\n  restart (params, cb) {\n    this._callWithProcessId(this.rpc.restartProcessId, params, cb)\n  }\n\n  reload (params, cb) {\n    this._callWithProcessId(this.rpc.reloadProcessId, params, cb)\n  }\n\n  reset (params, cb) {\n    this._callWithProcessId(\n      (newParams, cb) => this.rpc.resetMetaProcessId(newParams.id, cb),\n      params,\n      cb\n    )\n  }\n\n  ping (params, cb) {\n    this._callWithProcessId(this.rpc.ping, params, cb)\n  }\n}\n"]}