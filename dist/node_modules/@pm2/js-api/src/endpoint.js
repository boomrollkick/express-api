
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var RequestValidator = require('./utils/validator');
var debug = require('debug')('kmjs:endpoint');

module.exports = function () {
  function Endpoint(opts) {
    _classCallCheck(this, Endpoint);

    Object.assign(this, opts);
  }

  _createClass(Endpoint, [{
    key: 'build',
    value: function build(http) {
      var endpoint = this;
      return function () {
        var _arguments = arguments;

        var callsite = new Error().stack.split('\n')[2];
        if (callsite && callsite.length > 0) {
          debug('Call to \'' + endpoint.route.name + '\' from ' + callsite.replace('    at ', ''));
        }
        return new Promise(function (resolve, reject) {
          RequestValidator.extract(endpoint, Array.prototype.slice.call(_arguments)).then(function (opts) {
            // Different service than default, setup base url in url
            if (endpoint.service && endpoint.service.baseURL) {
              var base = endpoint.service.baseURL;
              base = base[base.length - 1] === '/' ? base.substr(0, base.length - 1) : base;
              opts.url = base + opts.url;
            }
            http.request(opts).then(resolve, reject);
          }).catch(reject);
        });
      };
    }
  }]);

  return Endpoint;
}();
//# sourceMappingURL=endpoint.js.map