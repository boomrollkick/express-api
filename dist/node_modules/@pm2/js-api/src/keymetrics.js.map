{"version":3,"sources":["../../../../../src/node_modules/@pm2/js-api/src/keymetrics.js"],"names":["Namespace","require","constants","NetworkWrapper","logger","Keymetrics","opts","Object","assign","_network","mapping","mappings","root","name","http","services","key","keys","realtime","flow","useStrategy","auth","logout","oauth_flow","deleteTokens","apiDateLag","module","exports"],"mappings":";AACA;;;;;;AAEA,IAAMA,YAAYC,QAAQ,aAAR,CAAlB;AACA,IAAMC,YAAYD,QAAQ,cAAR,CAAlB;AACA,IAAME,iBAAiBF,QAAQ,WAAR,CAAvB;AACA,IAAMG,SAASH,QAAQ,OAAR,EAAiB,MAAjB,CAAf;;AAEA,IAAMI;AACL;;;;;;;;;AASC,sBAAaC,IAAb,EAAmB;AAAA;;AACjBF,WAAO,0BAAP;AACA,SAAKE,IAAL,GAAYC,OAAOC,MAAP,CAAcN,SAAd,EAAyBI,IAAzB,CAAZ;;AAEAF,WAAO,+BAAP;AACA,SAAKK,QAAL,GAAgB,IAAIN,cAAJ,CAAmB,IAAnB,EAAyB,KAAKG,IAA9B,CAAhB;;AAEA,QAAMI,UAAUJ,QAAQA,KAAKK,QAAb,GAAwBL,KAAKK,QAA7B,GAAwCV,QAAQ,qBAAR,CAAxD;AACAG,4CAAqCE,QAAQA,KAAKK,QAAb,GAAwB,SAAxB,GAAoC,SAAzE;;AAEA;AACAP,WAAO,qBAAP;AACA,QAAIQ,OAAO,IAAIZ,SAAJ,CAAcU,OAAd,EAAuB;AAChCG,YAAM,MAD0B;AAEhCC,YAAM,KAAKL,QAFqB;AAGhCM,gBAAU,KAAKT,IAAL,CAAUS;AAHY,KAAvB,CAAX;AAKAX,WAAO,qBAAP;AACA,SAAK,IAAIY,GAAT,IAAgBJ,IAAhB,EAAsB;AACpB,UAAII,QAAQ,MAAR,IAAkBA,QAAQ,MAA9B,EAAsC;AACtC,WAAKA,GAAL,IAAYJ,KAAKI,GAAL,CAAZ;AACD;AACDZ,sCAAgCG,OAAOU,IAAP,CAAY,IAAZ,CAAhC;;AAEA,SAAKC,QAAL,GAAgB,KAAKT,QAAL,CAAcS,QAA9B;AACD;;AAED;;;;;;;;;;AArCI;AAAA;AAAA,wBA6CCC,IA7CD,EA6COb,IA7CP,EA6Ca;AAAA;;AACfF,wBAAgBe,IAAhB;AACA,WAAKV,QAAL,CAAcW,WAAd,CAA0BD,IAA1B,EAAgCb,IAAhC;AACA;AACA;AACA,WAAKe,IAAL,CAAUC,MAAV,GAAmB,YAAM;AACvB,eAAO,MAAKb,QAAL,CAAcc,UAAd,CAAyBC,YAAzB,CAAsC,KAAtC,CAAP;AACD,OAFD;AAGA,aAAO,IAAP;AACD;;AAED;;;;;;;;;AAxDI;AAAA;AAAA,wBAgEc;AAChB,aAAO,KAAKf,QAAL,CAAcgB,UAArB;AACD;AAlEG;;AAAA;AAAA,GAAN;;AAqEAC,OAAOC,OAAP,GAAiBtB,UAAjB","file":"keymetrics.js","sourcesContent":["\n'use strict'\n\nconst Namespace = require('./namespace')\nconst constants = require('../constants')\nconst NetworkWrapper = require('./network')\nconst logger = require('debug')('kmjs')\n\nconst Keymetrics = class Keymetrics {\n /**\n * @constructor\n * Keymetrics\n *\n * @param {Object} [opts]\n * @param {String} [opts.OAUTH_CLIENT_ID] the oauth client ID used to authenticate to KM\n * @param {Object} [opts.services] base url for differents services\n * @param {String} [opts.mappings] api mappings\n */\n  constructor (opts) {\n    logger('init keymetrics instance')\n    this.opts = Object.assign(constants, opts)\n\n    logger('init network client (http/ws)')\n    this._network = new NetworkWrapper(this, this.opts)\n\n    const mapping = opts && opts.mappings ? opts.mappings : require('./api_mappings.json')\n    logger(`Using mappings provided in ${opts && opts.mappings ? 'options' : 'package'}`)\n\n    // build namespaces at startup\n    logger('building namespaces')\n    let root = new Namespace(mapping, {\n      name: 'root',\n      http: this._network,\n      services: this.opts.services\n    })\n    logger('exposing namespaces')\n    for (let key in root) {\n      if (key === 'name' || key === 'opts') continue\n      this[key] = root[key]\n    }\n    logger(`attached namespaces : ${Object.keys(this)}`)\n\n    this.realtime = this._network.realtime\n  }\n\n  /**\n   * Use a specific flow to retrieve an access token on behalf the user\n   * @param {String|Function} flow either a flow name or a custom implementation\n   * @param {Object} [opts]\n   * @param {String} [opts.client_id] the OAuth client ID to use to identify the application\n   *  default to the one defined when instancing Keymetrics and fallback to 795984050 (custom tokens)\n   * @throws invalid use of this function, either the flow don't exist or isn't correctly implemented\n   */\n  use (flow, opts) {\n    logger(`using ${flow} authentication strategy`)\n    this._network.useStrategy(flow, opts)\n    // the logout is dependent of the auth flow so we need it to be initialize\n    // but also we need to give the access of the instance, so we inject it here\n    this.auth.logout = () => {\n      return this._network.oauth_flow.deleteTokens(this)\n    }\n    return this\n  }\n\n  /**\n   * API date lag, in millisecond.  This is the difference between the current browser date and the\n   * approximated API date.  This is useful to compute duration between dates returned by the API\n   * and \"now\".\n   * @example\n   * const apiDate = moment().add(km.apiDateLag)\n   * const timeSinceLastUpdate = apiDate.diff(server.updated_at)\n   */\n  get apiDateLag () {\n    return this._network.apiDateLag\n  }\n}\n\nmodule.exports = Keymetrics\n"]}