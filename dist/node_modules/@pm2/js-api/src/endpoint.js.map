{"version":3,"sources":["../../../../../src/node_modules/@pm2/js-api/src/endpoint.js"],"names":["RequestValidator","require","debug","module","exports","opts","Object","assign","http","endpoint","callsite","Error","stack","split","length","route","name","replace","Promise","resolve","reject","extract","Array","prototype","slice","call","arguments","then","service","baseURL","base","substr","url","request","catch"],"mappings":";AACA;;;;;;AAEA,IAAMA,mBAAmBC,QAAQ,mBAAR,CAAzB;AACA,IAAMC,QAAQD,QAAQ,OAAR,EAAiB,eAAjB,CAAd;;AAEAE,OAAOC,OAAP;AACE,oBAAaC,IAAb,EAAmB;AAAA;;AACjBC,WAAOC,MAAP,CAAc,IAAd,EAAoBF,IAApB;AACD;;AAHH;AAAA;AAAA,0BAKSG,IALT,EAKe;AACX,UAAIC,WAAW,IAAf;AACA,aAAO,YAAY;AAAA;;AACjB,YAAIC,WAAW,IAAIC,KAAJ,GAAYC,KAAZ,CAAkBC,KAAlB,CAAwB,IAAxB,EAA8B,CAA9B,CAAf;AACA,YAAIH,YAAYA,SAASI,MAAT,GAAkB,CAAlC,EAAqC;AACnCZ,+BAAkBO,SAASM,KAAT,CAAeC,IAAjC,gBAA+CN,SAASO,OAAT,CAAiB,SAAjB,EAA4B,EAA5B,CAA/C;AACD;AACD,eAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCpB,2BAAiBqB,OAAjB,CAAyBZ,QAAzB,EAAmCa,MAAMC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BC,UAA3B,CAAnC,EACGC,IADH,CACQ,UAACtB,IAAD,EAAU;AACd;AACA,gBAAII,SAASmB,OAAT,IAAoBnB,SAASmB,OAAT,CAAiBC,OAAzC,EAAkD;AAChD,kBAAIC,OAAOrB,SAASmB,OAAT,CAAiBC,OAA5B;AACAC,qBAAOA,KAAKA,KAAKhB,MAAL,GAAc,CAAnB,MAA0B,GAA1B,GAAgCgB,KAAKC,MAAL,CAAY,CAAZ,EAAeD,KAAKhB,MAAL,GAAc,CAA7B,CAAhC,GAAkEgB,IAAzE;AACAzB,mBAAK2B,GAAL,GAAWF,OAAOzB,KAAK2B,GAAvB;AACD;AACDxB,iBAAKyB,OAAL,CAAa5B,IAAb,EAAmBsB,IAAnB,CAAwBR,OAAxB,EAAiCC,MAAjC;AACD,WATH,EAUGc,KAVH,CAUSd,MAVT;AAWD,SAZM,CAAP;AAaD,OAlBD;AAmBD;AA1BH;;AAAA;AAAA","file":"endpoint.js","sourcesContent":["\n'use strict'\n\nconst RequestValidator = require('./utils/validator')\nconst debug = require('debug')('kmjs:endpoint')\n\nmodule.exports = class Endpoint {\n  constructor (opts) {\n    Object.assign(this, opts)\n  }\n\n  build (http) {\n    let endpoint = this\n    return function () {\n      let callsite = new Error().stack.split('\\n')[2]\n      if (callsite && callsite.length > 0) {\n        debug(`Call to '${endpoint.route.name}' from ${callsite.replace('    at ', '')}`)\n      }\n      return new Promise((resolve, reject) => {\n        RequestValidator.extract(endpoint, Array.prototype.slice.call(arguments))\n          .then((opts) => {\n            // Different service than default, setup base url in url\n            if (endpoint.service && endpoint.service.baseURL) {\n              let base = endpoint.service.baseURL\n              base = base[base.length - 1] === '/' ? base.substr(0, base.length - 1) : base\n              opts.url = base + opts.url\n            }\n            http.request(opts).then(resolve, reject)\n          })\n          .catch(reject)\n      })\n    }\n  }\n}\n"]}