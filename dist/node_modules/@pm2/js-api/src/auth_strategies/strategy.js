
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var constants = require('../../constants.js');

var AuthStrategy = function () {
  function AuthStrategy(opts) {
    _classCallCheck(this, AuthStrategy);

    this._opts = opts;
    this.client_id = opts.client_id || opts.OAUTH_CLIENT_ID;
    if (!this.client_id) {
      throw new Error('You must always provide a application id for any of the strategies');
    }
    this.scope = opts.scope || 'all';
    this.response_mode = opts.reponse_mode || 'query';

    var optsOauthEndpoint = null;
    if (opts && opts.services) {
      optsOauthEndpoint = opts.services.OAUTH || opts.services.API;
    }
    var oauthEndpoint = constants.services.OAUTH || constants.services.API;
    this.oauth_endpoint = '' + (optsOauthEndpoint || oauthEndpoint);
    if (this.oauth_endpoint[this.oauth_endpoint.length - 1] === '/' && constants.OAUTH_AUTHORIZE_ENDPOINT[0] === '/') {
      this.oauth_endpoint = this.oauth_endpoint.substr(0, this.oauth_endpoint.length - 1);
    }
    this.oauth_endpoint += constants.OAUTH_AUTHORIZE_ENDPOINT;
    this.oauth_query = '?client_id=' + opts.client_id + '&response_mode=' + this.response_mode + ('&response_type=token&scope=' + this.scope);
  }

  _createClass(AuthStrategy, [{
    key: 'retrieveTokens',
    value: function retrieveTokens() {
      throw new Error('You need to implement a retrieveTokens function inside your strategy');
    }
  }, {
    key: 'deleteTokens',
    value: function deleteTokens() {
      throw new Error('You need to implement a deleteTokens function inside your strategy');
    }
  }], [{
    key: 'implementations',
    value: function implementations(name) {
      var flows = {
        'embed': {
          nodule: require('./embed_strategy'),
          condition: 'node'
        },
        'browser': {
          nodule: require('./browser_strategy'),
          condition: 'browser'
        },
        'standalone': {
          nodule: require('./standalone_strategy'),
          condition: null
        }
      };
      return name ? flows[name] : null;
    }
  }]);

  return AuthStrategy;
}();

module.exports = AuthStrategy;
//# sourceMappingURL=strategy.js.map