/* global URLSearchParams, URL, localStorage */
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var AuthStrategy = require('./strategy');

module.exports = function (_AuthStrategy) {
  _inherits(BrowserFlow, _AuthStrategy);

  function BrowserFlow() {
    _classCallCheck(this, BrowserFlow);

    return _possibleConstructorReturn(this, (BrowserFlow.__proto__ || Object.getPrototypeOf(BrowserFlow)).apply(this, arguments));
  }

  _createClass(BrowserFlow, [{
    key: 'removeUrlToken',
    value: function removeUrlToken(refreshToken) {
      var url = window.location.href;
      var params = '?access_token=' + refreshToken + '&token_type=refresh_token';
      var newUrl = url.replace(params, '');
      window.history.pushState('', '', newUrl);
    }
  }, {
    key: 'retrieveTokens',
    value: function retrieveTokens(km, cb) {
      var _this2 = this;

      var verifyToken = function verifyToken(refresh) {
        return km.auth.retrieveToken({
          client_id: _this2.client_id,
          refresh_token: refresh
        });
      };

      // parse the url since it can contain tokens
      var url = new URL(window.location);
      this.response_mode = this.response_mode === 'query' ? 'search' : this.response_mode;
      var params = new URLSearchParams(url[this.response_mode]);

      if (params.get('access_token') !== null) {
        // verify that the access_token in parameters is valid
        verifyToken(params.get('access_token')).then(function (res) {
          _this2.removeUrlToken(res.data.refresh_token);
          // Save refreshToken in localstorage
          localStorage.setItem('km_refresh_token', params.get('access_token'));
          var tokens = res.data;
          return cb(null, tokens);
        }).catch(cb);
      } else if (typeof localStorage !== 'undefined' && localStorage.getItem('km_refresh_token') !== null) {
        // maybe in the local storage ?
        verifyToken(localStorage.getItem('km_refresh_token')).then(function (res) {
          _this2.removeUrlToken(res.data.refresh_token);
          var tokens = res.data;
          return cb(null, tokens);
        }).catch(cb);
      } else {
        // otherwise we need to get a refresh token
        window.location = '' + this.oauth_endpoint + this.oauth_query + '&redirect_uri=' + window.location;
      }
    }
  }, {
    key: 'deleteTokens',
    value: function deleteTokens(km) {
      var _this3 = this;

      return new Promise(function (resolve, reject) {
        // revoke the refreshToken
        km.auth.revoke().then(function (res) {
          return console.log('Token successfuly revoked!');
        }).catch(function (err) {
          return console.error('Error when trying to revoke token: ' + err.message);
        });
        // We need to remove from storage and redirect user in every case (cf. https://github.com/keymetrics/pm2-io-js-api/issues/49)
        // remove the token from the localStorage
        localStorage.removeItem('km_refresh_token');
        setTimeout(function (_) {
          // redirect after few miliseconds so any user code will run
          window.location = '' + _this3.oauth_endpoint + _this3.oauth_query;
        }, 500);
        return resolve();
      });
    }
  }]);

  return BrowserFlow;
}(AuthStrategy);
//# sourceMappingURL=browser_strategy.js.map