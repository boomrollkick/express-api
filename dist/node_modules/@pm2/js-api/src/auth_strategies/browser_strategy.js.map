{"version":3,"sources":["../../../../../../src/node_modules/@pm2/js-api/src/auth_strategies/browser_strategy.js"],"names":["AuthStrategy","require","module","exports","refreshToken","url","window","location","href","params","newUrl","replace","history","pushState","km","cb","verifyToken","refresh","auth","retrieveToken","client_id","refresh_token","URL","response_mode","URLSearchParams","get","then","res","removeUrlToken","data","localStorage","setItem","tokens","catch","getItem","oauth_endpoint","oauth_query","Promise","resolve","reject","revoke","console","log","error","err","message","removeItem","setTimeout"],"mappings":"AAAA;AACA;;;;;;;;;;AAEA,IAAMA,eAAeC,QAAQ,YAAR,CAArB;;AAEAC,OAAOC,OAAP;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,mCACkBC,YADlB,EACgC;AAC5B,UAAIC,MAAMC,OAAOC,QAAP,CAAgBC,IAA1B;AACA,UAAIC,4BAA0BL,YAA1B,8BAAJ;AACA,UAAIM,SAASL,IAAIM,OAAJ,CAAYF,MAAZ,EAAoB,EAApB,CAAb;AACAH,aAAOM,OAAP,CAAeC,SAAf,CAAyB,EAAzB,EAA6B,EAA7B,EAAiCH,MAAjC;AACD;AANH;AAAA;AAAA,mCAQkBI,EARlB,EAQsBC,EARtB,EAQ0B;AAAA;;AACtB,UAAIC,cAAc,SAAdA,WAAc,CAACC,OAAD,EAAa;AAC7B,eAAOH,GAAGI,IAAH,CAAQC,aAAR,CAAsB;AAC3BC,qBAAW,OAAKA,SADW;AAE3BC,yBAAeJ;AAFY,SAAtB,CAAP;AAID,OALD;;AAOA;AACA,UAAIZ,MAAM,IAAIiB,GAAJ,CAAQhB,OAAOC,QAAf,CAAV;AACA,WAAKgB,aAAL,GAAqB,KAAKA,aAAL,KAAuB,OAAvB,GAAiC,QAAjC,GAA4C,KAAKA,aAAtE;AACA,UAAId,SAAS,IAAIe,eAAJ,CAAoBnB,IAAI,KAAKkB,aAAT,CAApB,CAAb;;AAEA,UAAId,OAAOgB,GAAP,CAAW,cAAX,MAA+B,IAAnC,EAAyC;AACvC;AACAT,oBAAYP,OAAOgB,GAAP,CAAW,cAAX,CAAZ,EACGC,IADH,CACQ,UAACC,GAAD,EAAS;AACb,iBAAKC,cAAL,CAAoBD,IAAIE,IAAJ,CAASR,aAA7B;AACA;AACAS,uBAAaC,OAAb,CAAqB,kBAArB,EAAyCtB,OAAOgB,GAAP,CAAW,cAAX,CAAzC;AACA,cAAIO,SAASL,IAAIE,IAAjB;AACA,iBAAOd,GAAG,IAAH,EAASiB,MAAT,CAAP;AACD,SAPH,EAOKC,KAPL,CAOWlB,EAPX;AAQD,OAVD,MAUO,IAAI,OAAOe,YAAP,KAAwB,WAAxB,IAAuCA,aAAaI,OAAb,CAAqB,kBAArB,MAA6C,IAAxF,EAA8F;AACnG;AACAlB,oBAAYc,aAAaI,OAAb,CAAqB,kBAArB,CAAZ,EACGR,IADH,CACQ,UAACC,GAAD,EAAS;AACb,iBAAKC,cAAL,CAAoBD,IAAIE,IAAJ,CAASR,aAA7B;AACA,cAAIW,SAASL,IAAIE,IAAjB;AACA,iBAAOd,GAAG,IAAH,EAASiB,MAAT,CAAP;AACD,SALH,EAKKC,KALL,CAKWlB,EALX;AAMD,OARM,MAQA;AACL;AACAT,eAAOC,QAAP,QAAqB,KAAK4B,cAA1B,GAA2C,KAAKC,WAAhD,sBAA4E9B,OAAOC,QAAnF;AACD;AACF;AA3CH;AAAA;AAAA,iCA6CgBO,EA7ChB,EA6CoB;AAAA;;AAChB,aAAO,IAAIuB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC;AACAzB,WAAGI,IAAH,CAAQsB,MAAR,GACGd,IADH,CACQ;AAAA,iBAAOe,QAAQC,GAAR,CAAY,4BAAZ,CAAP;AAAA,SADR,EAEGT,KAFH,CAES;AAAA,iBAAOQ,QAAQE,KAAR,yCAAoDC,IAAIC,OAAxD,CAAP;AAAA,SAFT;AAGA;AACA;AACAf,qBAAagB,UAAb,CAAwB,kBAAxB;AACAC,mBAAW,aAAK;AACd;AACAzC,iBAAOC,QAAP,QAAqB,OAAK4B,cAA1B,GAA2C,OAAKC,WAAhD;AACD,SAHD,EAGG,GAHH;AAIA,eAAOE,SAAP;AACD,OAbM,CAAP;AAcD;AA5DH;;AAAA;AAAA,EAA2CtC,YAA3C","file":"browser_strategy.js","sourcesContent":["/* global URLSearchParams, URL, localStorage */\n'use strict'\n\nconst AuthStrategy = require('./strategy')\n\nmodule.exports = class BrowserFlow extends AuthStrategy {\n  removeUrlToken (refreshToken) {\n    let url = window.location.href\n    let params = `?access_token=${refreshToken}&token_type=refresh_token`\n    let newUrl = url.replace(params, '')\n    window.history.pushState('', '', newUrl)\n  }\n\n  retrieveTokens (km, cb) {\n    let verifyToken = (refresh) => {\n      return km.auth.retrieveToken({\n        client_id: this.client_id,\n        refresh_token: refresh\n      })\n    }\n\n    // parse the url since it can contain tokens\n    let url = new URL(window.location)\n    this.response_mode = this.response_mode === 'query' ? 'search' : this.response_mode\n    let params = new URLSearchParams(url[this.response_mode])\n\n    if (params.get('access_token') !== null) {\n      // verify that the access_token in parameters is valid\n      verifyToken(params.get('access_token'))\n        .then((res) => {\n          this.removeUrlToken(res.data.refresh_token)\n          // Save refreshToken in localstorage\n          localStorage.setItem('km_refresh_token', params.get('access_token'))\n          let tokens = res.data\n          return cb(null, tokens)\n        }).catch(cb)\n    } else if (typeof localStorage !== 'undefined' && localStorage.getItem('km_refresh_token') !== null) {\n      // maybe in the local storage ?\n      verifyToken(localStorage.getItem('km_refresh_token'))\n        .then((res) => {\n          this.removeUrlToken(res.data.refresh_token)\n          let tokens = res.data\n          return cb(null, tokens)\n        }).catch(cb)\n    } else {\n      // otherwise we need to get a refresh token\n      window.location = `${this.oauth_endpoint}${this.oauth_query}&redirect_uri=${window.location}`\n    }\n  }\n\n  deleteTokens (km) {\n    return new Promise((resolve, reject) => {\n      // revoke the refreshToken\n      km.auth.revoke()\n        .then(res => console.log('Token successfuly revoked!'))\n        .catch(err => console.error(`Error when trying to revoke token: ${err.message}`))\n      // We need to remove from storage and redirect user in every case (cf. https://github.com/keymetrics/pm2-io-js-api/issues/49)\n      // remove the token from the localStorage\n      localStorage.removeItem('km_refresh_token')\n      setTimeout(_ => {\n        // redirect after few miliseconds so any user code will run\n        window.location = `${this.oauth_endpoint}${this.oauth_query}`\n      }, 500)\n      return resolve()\n    })\n  }\n}\n"]}