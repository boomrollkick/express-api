{"version":3,"sources":["../../../../../../src/node_modules/@pm2/js-api/src/utils/validator.js"],"names":["module","exports","endpoint","args","isDefined","val","Promise","resolve","reject","httpOpts","params","data","url","route","name","method","type","authentication","param","value","shift","optional","Error","replace","defaultvalue","query","length","body","field"],"mappings":"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","file":"validator.js","sourcesContent":["\n'use strict'\n\nmodule.exports = class RequestValidator {\n  /**\n   * Extract httpOptions from the endpoint definition\n   * and the data given by the user\n   *\n   * @param {Object} endpoint endpoint definition\n   * @param {Array} args arguments given by the user\n   * @return {Promise} resolve to the http options need to make the request\n   */\n  static extract (endpoint, args) {\n    let isDefined = val => val !== null && typeof val !== 'undefined'\n\n    return new Promise((resolve, reject) => {\n      let httpOpts = {\n        params: {},\n        data: {},\n        url: endpoint.route.name + '',\n        method: endpoint.route.type,\n        authentication: endpoint.authentication || false\n      }\n\n      switch (endpoint.route.type) {\n        // GET request, we assume data will only be in the query or url params\n        case 'GET': {\n          for (let param of (endpoint.params || [])) {\n            let value = args.shift()\n            // params should always be a string since they will be replaced in the url\n            if (typeof value !== 'string' && param.optional === false) {\n              return reject(new Error(`Expected to receive string argument for ${param.name} to match but got ${value}`))\n            }\n            if (value) {\n              // if value is given, use it\n              httpOpts.url = httpOpts.url.replace(param.name, value)\n            } else if (param.optional === false && param.defaultvalue !== null) {\n              // use default value if available\n              httpOpts.url = httpOpts.url.replace(param.name, param.defaultvalue)\n            }\n          }\n          for (let param of (endpoint.query || [])) {\n            let value = args.shift()\n            // query should always be a string since they will be replaced in the url\n            if (typeof value !== 'string' && param.optional === false) {\n              return reject(new Error(`Expected to receive string argument for ${param.name} query but got ${value}`))\n            }\n            // set query value\n            if (value) {\n              // if value is given, use it\n              httpOpts.params[param.name] = value\n            } else if (param.optional === false && param.defaultvalue !== null) {\n              // use default value if available\n              httpOpts.params[param.name] = param.defaultvalue\n            }\n          }\n          break\n        }\n        // for PUT, POST and PATCH request, only params and body are authorized\n        case 'PUT':\n        case 'POST':\n        case 'PATCH': {\n          for (let param of (endpoint.params || [])) {\n            let value = args.shift()\n            // params should always be a string since they will be replaced in the url\n            if (typeof value !== 'string' && param.optional === false) {\n              return reject(new Error(`Expected to receive string argument for ${param.name} to match but got ${value}`))\n            }\n            // replace param in url\n            if (value) {\n              // if value is given, use it\n              httpOpts.url = httpOpts.url.replace(param.name, value)\n            } else if (param.optional === false && param.defaultvalue !== null) {\n              // use default value if available\n              httpOpts.url = httpOpts.url.replace(param.name, param.defaultvalue)\n            }\n          }\n          for (let param of (endpoint.query || [])) {\n            let value = args.shift()\n            // query should always be a string since they will be replaced in the url\n            if (typeof value !== 'string' && param.optional === false) {\n              return reject(new Error(`Expected to receive string argument for ${param.name} query but got ${value}`))\n            }\n            // set query value\n            if (value) {\n              // if value is given, use it\n              httpOpts.params[param.name] = value\n            } else if (param.optional === false && param.defaultvalue !== null) {\n              // use default value if available\n              httpOpts.params[param.name] = param.defaultvalue\n            }\n          }\n          // if we don't have any arguments, break\n          if (args.length === 0) break\n          let data = args[0]\n          if (typeof data !== 'object' && endpoint.body.length > 0) {\n            return reject(new Error(`Expected to receive an object for post data but received ${typeof data}`))\n          }\n          for (let field of (endpoint.body || [])) {\n            // verify that the mandatory field are here\n            if (!isDefined(data[field.name]) && field.optional === false && field.defaultvalue === null) {\n              return reject(new Error(`Missing mandatory field ${field.name} to make a POST request on ${endpoint.route.name}`))\n            }\n            // verify that the mandatory field are the good type\n            if (typeof data[field.name] !== field.type && field.optional === false && field.defaultvalue === null) { // eslint-disable-line \n              return reject(new Error(`Invalid type for field ${field.name}, expected ${field.type} but got ${typeof data[field.name]}`))\n            }\n\n            // add it to the request only when its present\n            if (isDefined(data[field.name])) {\n              httpOpts.data[field.name] = data[field.name]\n            }\n\n            // or else its not optional and has a default value\n            if (field.optional === false && field.defaultvalue !== null) {\n              httpOpts.data[field.name] = field.defaultvalue\n            }\n          }\n          break\n        }\n        // DELETE can have params or query parameters\n        case 'DELETE': {\n          for (let param of (endpoint.params || [])) {\n            let value = args.shift()\n            // params should always be a string since they will be replaced in the url\n            if (typeof value !== 'string' && param.optional === false) {\n              return reject(new Error(`Expected to receive string argument for ${param.name} to match but got ${value}`))\n            }\n            // replace param in url\n            if (value) {\n              // if value is given, use it\n              httpOpts.url = httpOpts.url.replace(param.name, value)\n            } else if (param.optional === false && param.defaultvalue !== null) {\n              // use default value if available\n              httpOpts.url = httpOpts.url.replace(param.name, param.defaultvalue)\n            }\n          }\n          for (let param of (endpoint.query || [])) {\n            let value = args.shift()\n            // query should always be a string\n            if (typeof value !== 'string' && param.optional === false) {\n              return reject(new Error(`Expected to receive string argument for ${param.name} query but got ${value}`))\n            }\n            // replace param in url\n            if (value) {\n              // if value is given, use it\n              httpOpts.params[param.name] = value\n            } else if (param.optional === false && param.defaultvalue !== null) {\n              // use default value if available\n              httpOpts.params[param.name] = param.defaultvalue\n            }\n          }\n          break\n        }\n        default: {\n          return reject(new Error(`Invalid endpoint declaration, invalid method ${endpoint.route.type} found`))\n        }\n      }\n      return resolve(httpOpts)\n    })\n  }\n}\n"]}