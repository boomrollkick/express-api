{"version":3,"sources":["../../../../../../../src/node_modules/@pm2/js-api/node_modules/ws/lib/BufferUtil.js"],"names":["safeBuffer","require","Buffer","concat","list","totalLength","target","allocUnsafe","offset","i","length","buf","copy","bufferUtil","module","exports","Object","assign","BufferUtil","e","mask","source","output","unmask","buffer"],"mappings":"AAAA;;;;;;AAMA;;AAEA,IAAMA,aAAaC,QAAQ,aAAR,CAAnB;;AAEA,IAAMC,SAASF,WAAWE,MAA1B;;AAEA;;;;;;;;AAQA,IAAMC,SAAS,SAATA,MAAS,CAACC,IAAD,EAAOC,WAAP,EAAuB;AACpC,MAAMC,SAASJ,OAAOK,WAAP,CAAmBF,WAAnB,CAAf;AACA,MAAIG,SAAS,CAAb;;AAEA,OAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIL,KAAKM,MAAzB,EAAiCD,GAAjC,EAAsC;AACpC,QAAME,MAAMP,KAAKK,CAAL,CAAZ;AACAE,QAAIC,IAAJ,CAASN,MAAT,EAAiBE,MAAjB;AACAA,cAAUG,IAAID,MAAd;AACD;;AAED,SAAOJ,MAAP;AACD,CAXD;;AAaA,IAAI;AACF,MAAMO,aAAaZ,QAAQ,YAAR,CAAnB;;AAEAa,SAAOC,OAAP,GAAiBC,OAAOC,MAAP,CAAc,EAAEd,cAAF,EAAd,EAA0BU,WAAWK,UAAX,IAAyBL,UAAnD,CAAjB;AACD,CAJD,CAIE,OAAOM,CAAP,EAAU,0BAA2B;AACrC;;;;;;;;;;AAUA,MAAMC,OAAO,cAACC,MAAD,EAASD,KAAT,EAAeE,MAAf,EAAuBd,MAAvB,EAA+BE,MAA/B,EAA0C;AACrD,SAAK,IAAID,IAAI,CAAb,EAAgBA,IAAIC,MAApB,EAA4BD,GAA5B,EAAiC;AAC/Ba,aAAOd,SAASC,CAAhB,IAAqBY,OAAOZ,CAAP,IAAYW,MAAKX,IAAI,CAAT,CAAjC;AACD;AACF,GAJD;;AAMA;;;;;;;AAOA,MAAMc,SAAS,SAATA,MAAS,CAACC,MAAD,EAASJ,IAAT,EAAkB;AAC/B;AACA,QAAMV,SAASc,OAAOd,MAAtB;AACA,SAAK,IAAID,IAAI,CAAb,EAAgBA,IAAIC,MAApB,EAA4BD,GAA5B,EAAiC;AAC/Be,aAAOf,CAAP,KAAaW,KAAKX,IAAI,CAAT,CAAb;AACD;AACF,GAND;;AAQAK,SAAOC,OAAP,GAAiB,EAAEZ,cAAF,EAAUiB,UAAV,EAAgBG,cAAhB,EAAjB;AACD","file":"BufferUtil.js","sourcesContent":["/*!\n * ws: a node.js websocket client\n * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>\n * MIT Licensed\n */\n\n'use strict';\n\nconst safeBuffer = require('safe-buffer');\n\nconst Buffer = safeBuffer.Buffer;\n\n/**\n * Merges an array of buffers into a new buffer.\n *\n * @param {Buffer[]} list The array of buffers to concat\n * @param {Number} totalLength The total length of buffers in the list\n * @return {Buffer} The resulting buffer\n * @public\n */\nconst concat = (list, totalLength) => {\n  const target = Buffer.allocUnsafe(totalLength);\n  var offset = 0;\n\n  for (var i = 0; i < list.length; i++) {\n    const buf = list[i];\n    buf.copy(target, offset);\n    offset += buf.length;\n  }\n\n  return target;\n};\n\ntry {\n  const bufferUtil = require('bufferutil');\n\n  module.exports = Object.assign({ concat }, bufferUtil.BufferUtil || bufferUtil);\n} catch (e) /* istanbul ignore next */ {\n  /**\n   * Masks a buffer using the given mask.\n   *\n   * @param {Buffer} source The buffer to mask\n   * @param {Buffer} mask The mask to use\n   * @param {Buffer} output The buffer where to store the result\n   * @param {Number} offset The offset at which to start writing\n   * @param {Number} length The number of bytes to mask.\n   * @public\n   */\n  const mask = (source, mask, output, offset, length) => {\n    for (var i = 0; i < length; i++) {\n      output[offset + i] = source[i] ^ mask[i & 3];\n    }\n  };\n\n  /**\n   * Unmasks a buffer using the given mask.\n   *\n   * @param {Buffer} buffer The buffer to unmask\n   * @param {Buffer} mask The mask to use\n   * @public\n   */\n  const unmask = (buffer, mask) => {\n    // Required until https://github.com/nodejs/node/issues/9006 is resolved.\n    const length = buffer.length;\n    for (var i = 0; i < length; i++) {\n      buffer[i] ^= mask[i & 3];\n    }\n  };\n\n  module.exports = { concat, mask, unmask };\n}\n"]}