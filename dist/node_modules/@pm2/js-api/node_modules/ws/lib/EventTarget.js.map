{"version":3,"sources":["../../../../../../../src/node_modules/@pm2/js-api/node_modules/ws/lib/EventTarget.js"],"names":["Event","type","target","MessageEvent","data","CloseEvent","code","reason","wasClean","_closeFrameReceived","_closeFrameSent","OpenEvent","EventTarget","addEventListener","method","listener","onMessage","call","onClose","message","onError","event","onOpen","_listener","on","removeEventListener","listeners","i","length","removeListener","module","exports"],"mappings":"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","file":"EventTarget.js","sourcesContent":["'use strict';\n\n/**\n * Class representing an event.\n *\n * @private\n */\nclass Event {\n  /**\n   * Create a new `Event`.\n   *\n   * @param {String} type The name of the event\n   * @param {Object} target A reference to the target to which the event was dispatched\n   */\n  constructor (type, target) {\n    this.target = target;\n    this.type = type;\n  }\n}\n\n/**\n * Class representing a message event.\n *\n * @extends Event\n * @private\n */\nclass MessageEvent extends Event {\n  /**\n   * Create a new `MessageEvent`.\n   *\n   * @param {(String|Buffer|ArrayBuffer|Buffer[])} data The received data\n   * @param {WebSocket} target A reference to the target to which the event was dispatched\n   */\n  constructor (data, target) {\n    super('message', target);\n\n    this.data = data;\n  }\n}\n\n/**\n * Class representing a close event.\n *\n * @extends Event\n * @private\n */\nclass CloseEvent extends Event {\n  /**\n   * Create a new `CloseEvent`.\n   *\n   * @param {Number} code The status code explaining why the connection is being closed\n   * @param {String} reason A human-readable string explaining why the connection is closing\n   * @param {WebSocket} target A reference to the target to which the event was dispatched\n   */\n  constructor (code, reason, target) {\n    super('close', target);\n\n    this.wasClean = target._closeFrameReceived && target._closeFrameSent;\n    this.reason = reason;\n    this.code = code;\n  }\n}\n\n/**\n * Class representing an open event.\n *\n * @extends Event\n * @private\n */\nclass OpenEvent extends Event {\n  /**\n   * Create a new `OpenEvent`.\n   *\n   * @param {WebSocket} target A reference to the target to which the event was dispatched\n   */\n  constructor (target) {\n    super('open', target);\n  }\n}\n\n/**\n * This provides methods for emulating the `EventTarget` interface. It's not\n * meant to be used directly.\n *\n * @mixin\n */\nconst EventTarget = {\n  /**\n   * Register an event listener.\n   *\n   * @param {String} method A string representing the event type to listen for\n   * @param {Function} listener The listener to add\n   * @public\n   */\n  addEventListener (method, listener) {\n    if (typeof listener !== 'function') return;\n\n    function onMessage (data) {\n      listener.call(this, new MessageEvent(data, this));\n    }\n\n    function onClose (code, message) {\n      listener.call(this, new CloseEvent(code, message, this));\n    }\n\n    function onError (event) {\n      event.type = 'error';\n      event.target = this;\n      listener.call(this, event);\n    }\n\n    function onOpen () {\n      listener.call(this, new OpenEvent(this));\n    }\n\n    if (method === 'message') {\n      onMessage._listener = listener;\n      this.on(method, onMessage);\n    } else if (method === 'close') {\n      onClose._listener = listener;\n      this.on(method, onClose);\n    } else if (method === 'error') {\n      onError._listener = listener;\n      this.on(method, onError);\n    } else if (method === 'open') {\n      onOpen._listener = listener;\n      this.on(method, onOpen);\n    } else {\n      this.on(method, listener);\n    }\n  },\n\n  /**\n   * Remove an event listener.\n   *\n   * @param {String} method A string representing the event type to remove\n   * @param {Function} listener The listener to remove\n   * @public\n   */\n  removeEventListener (method, listener) {\n    const listeners = this.listeners(method);\n\n    for (var i = 0; i < listeners.length; i++) {\n      if (listeners[i] === listener || listeners[i]._listener === listener) {\n        this.removeListener(method, listeners[i]);\n      }\n    }\n  }\n};\n\nmodule.exports = EventTarget;\n"]}