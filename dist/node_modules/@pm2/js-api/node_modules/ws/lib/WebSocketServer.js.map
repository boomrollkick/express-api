{"version":3,"sources":["../../../../../../../src/node_modules/@pm2/js-api/node_modules/ws/lib/WebSocketServer.js"],"names":["safeBuffer","require","EventEmitter","crypto","Ultron","http","url","PerMessageDeflate","Extensions","constants","WebSocket","Buffer","WebSocketServer","options","callback","Object","assign","maxPayload","perMessageDeflate","handleProtocols","clientTracking","verifyClient","noServer","backlog","server","host","path","port","TypeError","_server","createServer","req","res","body","STATUS_CODES","writeHead","length","end","listen","_ultron","on","emit","err","socket","head","handleUpgrade","client","clients","Set","cb","terminate","destroy","close","parse","pathname","socketError","version","headers","extensions","method","upgrade","toLowerCase","shouldHandle","abortConnection","offers","extensionName","accept","protocol","split","info","origin","secure","connection","authorized","encrypted","verified","code","message","completeUpgrade","readable","writable","key","createHash","update","GUID","digest","push","params","value","format","write","concat","join","protocolVersion","add","delete","removeListener","module","exports","byteLength"],"mappings":"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","file":"WebSocketServer.js","sourcesContent":["/*!\n * ws: a node.js websocket client\n * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>\n * MIT Licensed\n */\n\n'use strict';\n\nconst safeBuffer = require('safe-buffer');\nconst EventEmitter = require('events');\nconst crypto = require('crypto');\nconst Ultron = require('ultron');\nconst http = require('http');\nconst url = require('url');\n\nconst PerMessageDeflate = require('./PerMessageDeflate');\nconst Extensions = require('./Extensions');\nconst constants = require('./Constants');\nconst WebSocket = require('./WebSocket');\n\nconst Buffer = safeBuffer.Buffer;\n\n/**\n * Class representing a WebSocket server.\n *\n * @extends EventEmitter\n */\nclass WebSocketServer extends EventEmitter {\n  /**\n   * Create a `WebSocketServer` instance.\n   *\n   * @param {Object} options Configuration options\n   * @param {String} options.host The hostname where to bind the server\n   * @param {Number} options.port The port where to bind the server\n   * @param {http.Server} options.server A pre-created HTTP/S server to use\n   * @param {Function} options.verifyClient An hook to reject connections\n   * @param {Function} options.handleProtocols An hook to handle protocols\n   * @param {String} options.path Accept only connections matching this path\n   * @param {Boolean} options.noServer Enable no server mode\n   * @param {Boolean} options.clientTracking Specifies whether or not to track clients\n   * @param {(Boolean|Object)} options.perMessageDeflate Enable/disable permessage-deflate\n   * @param {Number} options.maxPayload The maximum allowed message size\n   * @param {Function} callback A listener for the `listening` event\n   */\n  constructor (options, callback) {\n    super();\n\n    options = Object.assign({\n      maxPayload: 100 * 1024 * 1024,\n      perMessageDeflate: false,\n      handleProtocols: null,\n      clientTracking: true,\n      verifyClient: null,\n      noServer: false,\n      backlog: null, // use default (511 as implemented in net.js)\n      server: null,\n      host: null,\n      path: null,\n      port: null\n    }, options);\n\n    if (options.port == null && !options.server && !options.noServer) {\n      throw new TypeError('missing or invalid options');\n    }\n\n    if (options.port != null) {\n      this._server = http.createServer((req, res) => {\n        const body = http.STATUS_CODES[426];\n\n        res.writeHead(426, {\n          'Content-Length': body.length,\n          'Content-Type': 'text/plain'\n        });\n        res.end(body);\n      });\n      this._server.listen(options.port, options.host, options.backlog, callback);\n    } else if (options.server) {\n      this._server = options.server;\n    }\n\n    if (this._server) {\n      this._ultron = new Ultron(this._server);\n      this._ultron.on('listening', () => this.emit('listening'));\n      this._ultron.on('error', (err) => this.emit('error', err));\n      this._ultron.on('upgrade', (req, socket, head) => {\n        this.handleUpgrade(req, socket, head, (client) => {\n          this.emit('connection', client, req);\n        });\n      });\n    }\n\n    if (options.perMessageDeflate === true) options.perMessageDeflate = {};\n    if (options.clientTracking) this.clients = new Set();\n    this.options = options;\n  }\n\n  /**\n   * Close the server.\n   *\n   * @param {Function} cb Callback\n   * @public\n   */\n  close (cb) {\n    //\n    // Terminate all associated clients.\n    //\n    if (this.clients) {\n      for (const client of this.clients) client.terminate();\n    }\n\n    const server = this._server;\n\n    if (server) {\n      this._ultron.destroy();\n      this._ultron = this._server = null;\n\n      //\n      // Close the http server if it was internally created.\n      //\n      if (this.options.port != null) return server.close(cb);\n    }\n\n    if (cb) cb();\n  }\n\n  /**\n   * See if a given request should be handled by this server instance.\n   *\n   * @param {http.IncomingMessage} req Request object to inspect\n   * @return {Boolean} `true` if the request is valid, else `false`\n   * @public\n   */\n  shouldHandle (req) {\n    if (this.options.path && url.parse(req.url).pathname !== this.options.path) {\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Handle a HTTP Upgrade request.\n   *\n   * @param {http.IncomingMessage} req The request object\n   * @param {net.Socket} socket The network socket between the server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Function} cb Callback\n   * @public\n   */\n  handleUpgrade (req, socket, head, cb) {\n    socket.on('error', socketError);\n\n    const version = +req.headers['sec-websocket-version'];\n    const extensions = {};\n\n    if (\n      req.method !== 'GET' || req.headers.upgrade.toLowerCase() !== 'websocket' ||\n      !req.headers['sec-websocket-key'] || (version !== 8 && version !== 13) ||\n      !this.shouldHandle(req)\n    ) {\n      return abortConnection(socket, 400);\n    }\n\n    if (this.options.perMessageDeflate) {\n      const perMessageDeflate = new PerMessageDeflate(\n        this.options.perMessageDeflate,\n        true,\n        this.options.maxPayload\n      );\n\n      try {\n        const offers = Extensions.parse(\n          req.headers['sec-websocket-extensions']\n        );\n\n        if (offers[PerMessageDeflate.extensionName]) {\n          perMessageDeflate.accept(offers[PerMessageDeflate.extensionName]);\n          extensions[PerMessageDeflate.extensionName] = perMessageDeflate;\n        }\n      } catch (err) {\n        return abortConnection(socket, 400);\n      }\n    }\n\n    var protocol = (req.headers['sec-websocket-protocol'] || '').split(/, */);\n\n    //\n    // Optionally call external protocol selection handler.\n    //\n    if (this.options.handleProtocols) {\n      protocol = this.options.handleProtocols(protocol, req);\n      if (protocol === false) return abortConnection(socket, 401);\n    } else {\n      protocol = protocol[0];\n    }\n\n    //\n    // Optionally call external client verification handler.\n    //\n    if (this.options.verifyClient) {\n      const info = {\n        origin: req.headers[`${version === 8 ? 'sec-websocket-origin' : 'origin'}`],\n        secure: !!(req.connection.authorized || req.connection.encrypted),\n        req\n      };\n\n      if (this.options.verifyClient.length === 2) {\n        this.options.verifyClient(info, (verified, code, message) => {\n          if (!verified) return abortConnection(socket, code || 401, message);\n\n          this.completeUpgrade(\n            protocol,\n            extensions,\n            version,\n            req,\n            socket,\n            head,\n            cb\n          );\n        });\n        return;\n      }\n\n      if (!this.options.verifyClient(info)) return abortConnection(socket, 401);\n    }\n\n    this.completeUpgrade(protocol, extensions, version, req, socket, head, cb);\n  }\n\n  /**\n   * Upgrade the connection to WebSocket.\n   *\n   * @param {String} protocol The chosen subprotocol\n   * @param {Object} extensions The accepted extensions\n   * @param {Number} version The WebSocket protocol version\n   * @param {http.IncomingMessage} req The request object\n   * @param {net.Socket} socket The network socket between the server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Function} cb Callback\n   * @private\n   */\n  completeUpgrade (protocol, extensions, version, req, socket, head, cb) {\n    //\n    // Destroy the socket if the client has already sent a FIN packet.\n    //\n    if (!socket.readable || !socket.writable) return socket.destroy();\n\n    const key = crypto.createHash('sha1')\n      .update(req.headers['sec-websocket-key'] + constants.GUID, 'binary')\n      .digest('base64');\n\n    const headers = [\n      'HTTP/1.1 101 Switching Protocols',\n      'Upgrade: websocket',\n      'Connection: Upgrade',\n      `Sec-WebSocket-Accept: ${key}`\n    ];\n\n    if (protocol) headers.push(`Sec-WebSocket-Protocol: ${protocol}`);\n    if (extensions[PerMessageDeflate.extensionName]) {\n      const params = extensions[PerMessageDeflate.extensionName].params;\n      const value = Extensions.format({\n        [PerMessageDeflate.extensionName]: [params]\n      });\n      headers.push(`Sec-WebSocket-Extensions: ${value}`);\n    }\n\n    //\n    // Allow external modification/inspection of handshake headers.\n    //\n    this.emit('headers', headers, req);\n\n    socket.write(headers.concat('\\r\\n').join('\\r\\n'));\n\n    const client = new WebSocket([socket, head], null, {\n      maxPayload: this.options.maxPayload,\n      protocolVersion: version,\n      extensions,\n      protocol\n    });\n\n    if (this.clients) {\n      this.clients.add(client);\n      client.on('close', () => this.clients.delete(client));\n    }\n\n    socket.removeListener('error', socketError);\n    cb(client);\n  }\n}\n\nmodule.exports = WebSocketServer;\n\n/**\n * Handle premature socket errors.\n *\n * @private\n */\nfunction socketError () {\n  this.destroy();\n}\n\n/**\n * Close the connection when preconditions are not fulfilled.\n *\n * @param {net.Socket} socket The socket of the upgrade request\n * @param {Number} code The HTTP response status code\n * @param {String} [message] The HTTP response body\n * @private\n */\nfunction abortConnection (socket, code, message) {\n  if (socket.writable) {\n    message = message || http.STATUS_CODES[code];\n    socket.write(\n      `HTTP/1.1 ${code} ${http.STATUS_CODES[code]}\\r\\n` +\n      'Connection: close\\r\\n' +\n      'Content-type: text/html\\r\\n' +\n      `Content-Length: ${Buffer.byteLength(message)}\\r\\n` +\n      '\\r\\n' +\n      message\n    );\n  }\n\n  socket.removeListener('error', socketError);\n  socket.destroy();\n}\n"]}