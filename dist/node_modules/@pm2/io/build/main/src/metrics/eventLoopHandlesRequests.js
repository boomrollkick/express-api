"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", { value: true });
var debug_1 = require("debug");
var debug = debug_1.default('axm:eventLoop');

var EventLoopHandlesRequestsMetric = function () {
    function EventLoopHandlesRequestsMetric(metricFeature) {
        _classCallCheck(this, EventLoopHandlesRequestsMetric);

        this.metricFeature = metricFeature;
    }

    _createClass(EventLoopHandlesRequestsMetric, [{
        key: "init",
        value: function init(config) {
            var _this = this;

            if (typeof this.getProcess()._getActiveRequests === 'function') {
                this.metricFeature.metric({
                    name: 'Active requests',
                    type: 'internal/libuv/requests',
                    value: function value() {
                        return _this.getProcess()._getActiveRequests().length;
                    }
                });
            }
            if (typeof this.getProcess()._getActiveHandles === 'function') {
                this.metricFeature.metric({
                    name: 'Active handles',
                    type: 'internal/libuv/handles',
                    value: function value() {
                        return _this.getProcess()._getActiveHandles().length;
                    }
                });
            }
        }
    }, {
        key: "destroy",
        value: function destroy() {
            debug('EventLoopHandlesRequestsMetric destroyed !');
        }
    }, {
        key: "getProcess",
        value: function getProcess() {
            return process;
        }
    }]);

    return EventLoopHandlesRequestsMetric;
}();

exports.default = EventLoopHandlesRequestsMetric;
//# sourceMappingURL=eventLoopHandlesRequests.js.map