"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", { value: true });

var EventLoopDelayMetric = function () {
    function EventLoopDelayMetric(metricFeature) {
        _classCallCheck(this, EventLoopDelayMetric);

        this.TIME_INTERVAL = 1000;
        this.metricFeature = metricFeature;
    }

    _createClass(EventLoopDelayMetric, [{
        key: "init",
        value: function init(config) {
            var _this = this;

            var oldTime = process.hrtime();
            var histogram = this.metricFeature.histogram({
                name: 'Event Loop Latency',
                type: 'internal/libuv/latency',
                measurement: 'mean',
                unit: 'ms'
            });
            if (histogram) {
                this.timer = setInterval(function () {
                    var newTime = process.hrtime();
                    var delay = (newTime[0] - oldTime[0]) * 1e3 + (newTime[1] - oldTime[1]) / 1e6 - _this.TIME_INTERVAL;
                    oldTime = newTime;
                    histogram.update(delay);
                }, this.TIME_INTERVAL);
                this.timer.unref();
            }
        }
    }, {
        key: "destroy",
        value: function destroy() {
            clearInterval(this.timer);
        }
    }]);

    return EventLoopDelayMetric;
}();

exports.default = EventLoopDelayMetric;
//# sourceMappingURL=eventLoopDelay.js.map