"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", { value: true });
var metricConfig_1 = require("../utils/metricConfig");
var deepMetricsTracer_1 = require("./deepMetricsTracer");
var deepmetrics = require("deep-metrics");
var debug_1 = require("debug");
var debug = debug_1.default('axm:deepMetrics');

var DeepMetrics = function () {
    function DeepMetrics(metricFeature) {
        _classCallCheck(this, DeepMetrics);

        this.allPossibleMetrics = {};
        this.defaultConf = {
            mongo: true,
            mysql: true,
            mqtt: true,
            socketio: true,
            redis: true,
            http: true,
            https: true,
            'http-outbound': true,
            'https-outbound': true
        };
        this.metricFeature = metricFeature;
    }

    _createClass(DeepMetrics, [{
        key: "init",
        value: function init(config) {
            deepmetrics.start();
            // instantiate all metrics
            for (var probeName in this.defaultConf) {
                if (this.defaultConf.hasOwnProperty(probeName)) {
                    this.allPossibleMetrics[probeName] = new deepMetricsTracer_1.default(this.metricFeature, deepmetrics.ee, probeName);
                }
            }
            config = metricConfig_1.default.getConfig(config, this.defaultConf);
            // initialize only metrics found in config
            for (var _probeName in this.allPossibleMetrics) {
                if (this.allPossibleMetrics.hasOwnProperty(_probeName) && (config === 'all' || config[_probeName] === true)) {
                    this.allPossibleMetrics[_probeName].init();
                }
            }
        }
    }, {
        key: "destroy",
        value: function destroy() {
            deepmetrics.stop();
            // clean children
            for (var probeName in this.allPossibleMetrics) {
                if (this.allPossibleMetrics.hasOwnProperty(probeName)) {
                    this.allPossibleMetrics[probeName].destroy();
                }
            }
            this.allPossibleMetrics = {};
            debug('Deep metrics detroyed !');
        }
    }]);

    return DeepMetrics;
}();

exports.default = DeepMetrics;
//# sourceMappingURL=deepMetrics.js.map