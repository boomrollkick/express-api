"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", { value: true });
var miscellaneous_1 = require("../utils/miscellaneous");
var debug_1 = require("debug");
var debug = debug_1.default('axm:metricfromdump');

var MetricFromDump = function () {
    function MetricFromDump(metricFeature, conf) {
        _classCallCheck(this, MetricFromDump);

        this.conf = Array.isArray(conf) ? conf : [conf];
        this.metricFeature = metricFeature;
    }

    _createClass(MetricFromDump, [{
        key: "init",
        value: function init() {
            var self = this;
            for (var i = 0; i < this.conf.length; i++) {
                (function (index) {
                    self.metricFeature.metric({
                        name: self.conf[index].name,
                        type: "internal/libuv/" + self.conf[index].name,
                        value: function value() {
                            return miscellaneous_1.default.getValueFromDump(self.conf[index].property, self.conf[index].parentProperty);
                        }
                    });
                })(i);
            }
        }
    }, {
        key: "destroy",
        value: function destroy() {
            debug(this.conf.name + " metric destroyed !");
        }
    }]);

    return MetricFromDump;
}();

exports.default = MetricFromDump;
//# sourceMappingURL=metricFromDump.js.map