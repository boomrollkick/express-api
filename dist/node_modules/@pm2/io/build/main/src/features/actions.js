"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", { value: true });
var serviceManager_1 = require("../serviceManager");
var actions_1 = require("../services/actions");

var ActionsFeature = function () {
    function ActionsFeature(autoExit) {
        var _this = this;

        _classCallCheck(this, ActionsFeature);

        this.listenerInitiated = false;
        serviceManager_1.ServiceManager.set('actionsService', new actions_1.default(this));
        this.actionsService = serviceManager_1.ServiceManager.get('actionsService');
        if (autoExit) {
            // clean listener if event loop is empty
            // important to ensure apm will not prevent application to stop
            this.timer = setInterval(function () {
                var dump = serviceManager_1.ServiceManager.get('eventLoopService').inspector.dump();
                if (!dump || dump.setImmediates.length === 0 && dump.nextTicks.length === 0 && (Object.keys(dump.handles).length === 0 || Object.keys(dump.handles).length === 1 && dump.handles.hasOwnProperty('Socket') && dump.handles.Socket.length === 2 && (dump.handles.Socket[0].fd === 1 || dump.handles.Socket[0].fd === -1) && (dump.handles.Socket[1].fd === 2 || dump.handles.Socket[1].fd === -1)) && Object.keys(dump.requests).length === 0) {
                    process.removeListener('message', _this.listener);
                }
            }, 1000);
            this.timer.unref();
        }
    }

    _createClass(ActionsFeature, [{
        key: "listener",
        value: function listener(data) {
            if (!data) return false;
            var actionName = data.msg ? data.msg : data.action_name ? data.action_name : data;
            var actionData = serviceManager_1.ServiceManager.get('actions').get(actionName);
            var fn = actionData ? actionData.fn : null;
            var reply = actionData ? actionData.reply : null;
            if (actionData) {
                // In case 2 arguments has been set but no options has been transmitted
                if (fn.length === 2) {
                    var params = {};
                    if ((typeof data === "undefined" ? "undefined" : _typeof(data)) === 'object') {
                        params = data.opts;
                    }
                    return fn(params, reply);
                }
                return fn(reply);
            }
            // -----------------------------------------------------------
            //                      Scoped actions
            // -----------------------------------------------------------
            if (data.uuid === undefined || data.action_name === undefined) {
                return false;
            }
            actionData = serviceManager_1.ServiceManager.get('actionsScoped').get(actionName);
            if (data.action_name === actionName) {
                var res = {
                    send: function send(dt) {
                        serviceManager_1.ServiceManager.get('transport').send('axm:scoped_action:stream', {
                            data: dt,
                            uuid: data.uuid,
                            action_name: actionName
                        });
                    },
                    error: function error(dt) {
                        serviceManager_1.ServiceManager.get('transport').send('axm:scoped_action:error', {
                            data: dt,
                            uuid: data.uuid,
                            action_name: actionName
                        });
                    },
                    end: function end(dt) {
                        serviceManager_1.ServiceManager.get('transport').send('axm:scoped_action:end', {
                            data: dt,
                            uuid: data.uuid,
                            action_name: actionName
                        });
                    }
                };
                actionData.fn(data.opts || null, res);
            }
        }
    }, {
        key: "initListener",
        value: function initListener() {
            if (this.listenerInitiated) return;
            if (serviceManager_1.ServiceManager.get('transport').transport) {
                serviceManager_1.ServiceManager.get('transport').transport.on('trigger:*', this.listener);
            } else {
                process.on('message', this.listener);
            }
            this.listenerInitiated = true;
        }
    }, {
        key: "init",
        value: function init(conf, force) {
            this.actionsService.init(conf, force);
            return {
                action: this.action
            };
        }
    }, {
        key: "destroy",
        value: function destroy() {
            this.actionsService.destroy();
            serviceManager_1.ServiceManager.reset('actions');
            serviceManager_1.ServiceManager.reset('actionsScoped');
            process.removeListener('message', this.listener);
            clearInterval(this.timer);
        }
    }, {
        key: "action",
        value: function action(actionName, opts, fn) {
            if (!fn) {
                fn = opts;
                opts = null;
            }
            var check = this.check(actionName, fn);
            if (!check) {
                return check;
            }
            var type = 'custom';
            if (actionName.indexOf('km:') === 0 || actionName.indexOf('internal:') === 0) {
                type = 'internal';
            }
            if (serviceManager_1.ServiceManager.get('transport')) {
                serviceManager_1.ServiceManager.get('transport').addAction({
                    action_name: actionName, action_type: type, opts: opts, arity: fn.length
                });
            }
            var reply = function reply(data) {
                serviceManager_1.ServiceManager.get('transport').send('axm:reply', {
                    at: new Date().getTime(),
                    action_name: actionName,
                    return: data
                });
            };
            serviceManager_1.ServiceManager.get('actions').set(actionName, { fn: fn, reply: reply });
        }
    }, {
        key: "scopedAction",
        value: function scopedAction(actionName, fn) {
            var check = this.check(actionName, fn);
            if (!check) {
                return check;
            }
            // Notify the action
            if (serviceManager_1.ServiceManager.get('transport')) {
                serviceManager_1.ServiceManager.get('transport').addAction({
                    action_name: actionName, action_type: 'scoped'
                });
            }
            serviceManager_1.ServiceManager.get('actionsScoped').set(actionName, { fn: fn });
        }
    }, {
        key: "check",
        value: function check(actionName, fn) {
            if (!actionName) {
                console.error('[PMX] action.action_name is missing');
                return false;
            }
            if (!fn) {
                console.error('[PMX] callback is missing');
                return false;
            }
            return true;
        }
    }]);

    return ActionsFeature;
}();

exports.default = ActionsFeature;
//# sourceMappingURL=actions.js.map