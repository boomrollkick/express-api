"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", { value: true });
var profilingCPUFallback_1 = require("../profiling/profilingCPUFallback");
var profilingHeapFallback_1 = require("../profiling/profilingHeapFallback");
var configuration_1 = require("../configuration");
var semver = require("semver");

var ProfilingFeature = function () {
    function ProfilingFeature() {
        _classCallCheck(this, ProfilingFeature);
    }

    _createClass(ProfilingFeature, [{
        key: "init",
        value: function init(forceFallback) {
            // allow to force the fallback via environment
            if (process.env.PM2_PROFILING_FORCE_FALLBACK) forceFallback = true;
            var isInspectorOk = (semver.satisfies(process.version, '>= 10.0.0') || semver.satisfies(process.version, '>= 8.0.0') && process.env.FORCE_INSPECTOR) && !forceFallback;
            var ProfilingCPU = void 0;
            var ProfilingHeap = void 0;
            if (isInspectorOk) {
                ProfilingCPU = require('../profiling/profilingCPU').default;
                ProfilingHeap = require('../profiling/profilingHeap').default;
                configuration_1.default.configureModule({
                    heapdump: true
                });
            }
            this.profilings = {
                cpuProfiling: isInspectorOk ? new ProfilingCPU() : new profilingCPUFallback_1.default(),
                heapProfiling: isInspectorOk ? new ProfilingHeap() : new profilingHeapFallback_1.default()
            };
            return this.profilings;
        }
    }, {
        key: "destroy",
        value: function destroy() {
            for (var profilingName in this.profilings) {
                if (typeof this.profilings[profilingName].destroy === 'function') {
                    this.profilings[profilingName].destroy();
                }
            }
        }
    }]);

    return ProfilingFeature;
}();

exports.default = ProfilingFeature;
//# sourceMappingURL=profiling.js.map