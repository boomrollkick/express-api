"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var serviceManager_1 = require("../serviceManager");
var semver = require("semver");
var debug_1 = require("debug");
var debug = debug_1.default('axm:coveragefeature');

var CoverageFeature = function () {
    function CoverageFeature() {
        _classCallCheck(this, CoverageFeature);

        this.inspectorService = serviceManager_1.ServiceManager.get('inspector');
    }

    _createClass(CoverageFeature, [{
        key: "init",
        value: function init() {
            if (semver.satisfies(process.version, '< 8.0.0') || semver.satisfies(process.version, '< 10.0.0') && !process.env.FORCE_INSPECTOR) {
                return new Promise(function (resolve) {
                    debug("Coverage feature is not available for node < 8.0.0 (force inspector : " + process.env.FORCE_INSPECTOR + "), current version " + process.version);
                    resolve("Coverage feature is not available for node < 8.0.0 (force inspector : " + process.env.FORCE_INSPECTOR + "), current version " + process.version);
                });
            }
            this.inspectorService.createSession();
            this.inspectorService.connect();
            return this.inspectorService.post('Profiler.enable');
        }
    }, {
        key: "destroy",
        value: function destroy() {
            this.inspectorService.disconnect();
        }
    }, {
        key: "start",
        value: function start(opts) {
            this.method = !opts.method ? 'takePreciseCoverage' : opts.method;
            return this.inspectorService.post('Profiler.startPreciseCoverage', { callCount: !!opts.callCount, detailed: !!opts.detailed });
        }
    }, {
        key: "stop",
        value: function stop() {
            return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                var data;
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                _context.next = 2;
                                return this.getInfo();

                            case 2:
                                data = _context.sent;
                                return _context.abrupt("return", JSON.stringify(data));

                            case 4:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));
        }
    }, {
        key: "getInfo",
        value: function getInfo() {
            var _this = this;

            // const self = this
            return new Promise(function (resolve, reject) {
                return tslib_1.__awaiter(_this, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
                    var data;
                    return regeneratorRuntime.wrap(function _callee2$(_context2) {
                        while (1) {
                            switch (_context2.prev = _context2.next) {
                                case 0:
                                    _context2.prev = 0;
                                    _context2.next = 3;
                                    return this.inspectorService.post('Profiler.' + this.method);

                                case 3:
                                    data = _context2.sent;
                                    _context2.next = 6;
                                    return this.inspectorService.post('Profiler.stopPreciseCoverage');

                                case 6:
                                    return _context2.abrupt("return", resolve(data));

                                case 9:
                                    _context2.prev = 9;
                                    _context2.t0 = _context2["catch"](0);

                                    debug('Coverage profiling stopped !', _context2.t0);
                                    return _context2.abrupt("return", reject(_context2.t0));

                                case 13:
                                case "end":
                                    return _context2.stop();
                            }
                        }
                    }, _callee2, this, [[0, 9]]);
                }));
            });
        }
    }]);

    return CoverageFeature;
}();

exports.default = CoverageFeature;
//# sourceMappingURL=coverage.js.map