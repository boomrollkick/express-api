"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var serviceManager_1 = require("../serviceManager");
var stringify = require("json-stringify-safe");

var Events = function () {
    function Events() {
        _classCallCheck(this, Events);
    }

    _createClass(Events, [{
        key: "init",
        value: function init() {
            return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                return _context.abrupt("return", {
                                    emit: this.emit
                                });

                            case 1:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));
        }
    }, {
        key: "emit",
        value: function emit(name, data) {
            if (!name) {
                return console.error('[PMX] emit.name is missing');
            }
            if (!data) {
                return console.error('[PMX] emit.data is missing');
            }
            var inflightObj = {};
            if ((typeof data === "undefined" ? "undefined" : _typeof(data)) === 'object') {
                inflightObj = JSON.parse(stringify(data));
            } else {
                inflightObj.data = data;
            }
            inflightObj.__name = name;
            serviceManager_1.ServiceManager.get('transport').send('human:event', inflightObj);
            return false;
        }
    }]);

    return Events;
}();

exports.default = Events;
//# sourceMappingURL=events.js.map