"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var debug_1 = require("debug");
var debug = debug_1.default('axm:profiling');
var serviceManager_1 = require("../serviceManager");

var ProfilingCPU = function () {
    function ProfilingCPU() {
        _classCallCheck(this, ProfilingCPU);

        this.inspectorService = serviceManager_1.ServiceManager.get('inspector');
    }

    _createClass(ProfilingCPU, [{
        key: "init",
        value: function init() {
            this.inspectorService.createSession();
            this.inspectorService.connect();
            return this.inspectorService.post('Profiler.enable');
        }
    }, {
        key: "destroy",
        value: function destroy() {
            this.inspectorService.disconnect();
        }
    }, {
        key: "start",
        value: function start() {
            return this.inspectorService.post('Profiler.start');
        }
    }, {
        key: "stop",
        value: function stop() {
            return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                return _context.abrupt("return", this.getProfileInfo());

                            case 1:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));
        }
    }, {
        key: "_convertTimeDeltas",
        value: function _convertTimeDeltas(profile) {
            if (!profile.timeDeltas) return null;
            var lastTimeUsec = profile.startTime;
            var timestamps = new Array(profile.timeDeltas.length + 1);
            for (var i = 0; i < profile.timeDeltas.length; ++i) {
                timestamps[i] = lastTimeUsec;
                lastTimeUsec += profile.timeDeltas[i];
            }
            timestamps[profile.timeDeltas.length] = lastTimeUsec;
            return timestamps;
        }
    }, {
        key: "getProfileInfo",
        value: function getProfileInfo() {
            var _this = this;

            return new Promise(function (resolve, reject) {
                return tslib_1.__awaiter(_this, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
                    var rawData, data, reformatNode, nodes;
                    return regeneratorRuntime.wrap(function _callee2$(_context2) {
                        while (1) {
                            switch (_context2.prev = _context2.next) {
                                case 0:
                                    _context2.prev = 0;
                                    _context2.next = 3;
                                    return this.inspectorService.post('Profiler.stop');

                                case 3:
                                    rawData = _context2.sent;

                                    if (!(!rawData || !rawData.profile)) {
                                        _context2.next = 6;
                                        break;
                                    }

                                    return _context2.abrupt("return", reject("V8 Interval Error"));

                                case 6:
                                    rawData = rawData.profile;
                                    data = rawData;
                                    // recursively reformat the flatten tree into an actual tree

                                    reformatNode = function reformatNode(node) {
                                        if (!node.children) node.children = [];
                                        node.children = node.children.map(function (childID) {
                                            if (typeof childID !== 'number') return childID;
                                            var childNode = data.nodes.find(function (node) {
                                                return node.id === childID;
                                            });
                                            if ((typeof childNode === "undefined" ? "undefined" : _typeof(childNode)) !== 'object') return null;
                                            childNode.callUID = node.id;
                                            return childNode;
                                        });
                                        return {
                                            functionName: node.callFrame.functionName,
                                            url: node.callFrame.url,
                                            lineNumber: node.callFrame.lineNumber,
                                            callUID: node.callUID,
                                            bailoutReason: '',
                                            id: node.id,
                                            scriptId: 0,
                                            hitCount: node.hitCount,
                                            children: node.children.map(reformatNode)
                                        };
                                    };
                                    // reformat then only keep the root as top level node


                                    nodes = data.nodes.map(reformatNode).filter(function (node) {
                                        return node.functionName === '(root)';
                                    })[0];
                                    // since it can be undefined, create an array so execution still works

                                    if (!data.timeDeltas) {
                                        data.timeDeltas = [];
                                    }
                                    return _context2.abrupt("return", resolve(JSON.stringify({
                                        head: nodes,
                                        typeId: 'CPU',
                                        uid: '1',
                                        startTime: Math.floor(data.startTime / 1000000),
                                        title: 'km-cpu-profiling',
                                        endTime: Math.floor(data.endTime / 1000000),
                                        samples: data.samples,
                                        timestamps: this._convertTimeDeltas(data)
                                    })));

                                case 14:
                                    _context2.prev = 14;
                                    _context2.t0 = _context2["catch"](0);

                                    debug('Cpu profiling stopped !');
                                    return _context2.abrupt("return", reject(_context2.t0));

                                case 18:
                                case "end":
                                    return _context2.stop();
                            }
                        }
                    }, _callee2, this, [[0, 14]]);
                }));
            });
        }
    }]);

    return ProfilingCPU;
}();

exports.default = ProfilingCPU;
//# sourceMappingURL=profilingCPU.js.map