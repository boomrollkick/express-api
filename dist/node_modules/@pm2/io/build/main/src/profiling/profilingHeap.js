"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var debug_1 = require("debug");
var debug = debug_1.default('axm:profiling');
var metricConfig_1 = require("../utils/metricConfig");
var serviceManager_1 = require("../serviceManager");

var ProfilingHeap = function () {
    function ProfilingHeap() {
        _classCallCheck(this, ProfilingHeap);

        this.defaultConf = {
            samplingInterval: 32768
        };
        this.inspectorService = serviceManager_1.ServiceManager.get('inspector');
    }

    _createClass(ProfilingHeap, [{
        key: "init",
        value: function init(config) {
            return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                config = metricConfig_1.default.getConfig(config, this.defaultConf);
                                this.config = config;
                                this.inspectorService.createSession();
                                this.inspectorService.connect();
                                return _context.abrupt("return", this.inspectorService.post('HeapProfiler.enable'));

                            case 5:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));
        }
    }, {
        key: "destroy",
        value: function destroy() {
            this.inspectorService.disconnect();
        }
    }, {
        key: "start",
        value: function start() {
            return this.inspectorService.post('HeapProfiler.startSampling', {
                samplingInterval: this.config.samplingInterval
            });
        }
    }, {
        key: "stop",
        value: function stop() {
            return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                return _context2.abrupt("return", this.getProfileInfo());

                            case 1:
                            case "end":
                                return _context2.stop();
                        }
                    }
                }, _callee2, this);
            }));
        }
    }, {
        key: "takeSnapshot",
        value: function takeSnapshot() {
            return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
                var chunks;
                return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                chunks = [];

                                this.inspectorService.on('HeapProfiler.addHeapSnapshotChunk', function (data) {
                                    chunks.push(data.params.chunk);
                                });
                                _context3.next = 4;
                                return this.inspectorService.post('HeapProfiler.takeHeapSnapshot', {
                                    reportProgress: false
                                });

                            case 4:
                                return _context3.abrupt("return", chunks.join(''));

                            case 5:
                            case "end":
                                return _context3.stop();
                        }
                    }
                }, _callee3, this);
            }));
        }
    }, {
        key: "getProfileInfo",
        value: function getProfileInfo() {
            var _this = this;

            return new Promise(function (resolve, reject) {
                return tslib_1.__awaiter(_this, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
                    var data;
                    return regeneratorRuntime.wrap(function _callee4$(_context4) {
                        while (1) {
                            switch (_context4.prev = _context4.next) {
                                case 0:
                                    data = void 0;
                                    _context4.prev = 1;
                                    _context4.next = 4;
                                    return this.inspectorService.post('HeapProfiler.stopSampling');

                                case 4:
                                    data = _context4.sent;
                                    _context4.next = 11;
                                    break;

                                case 7:
                                    _context4.prev = 7;
                                    _context4.t0 = _context4["catch"](1);

                                    debug('Heap profiling stopped !');
                                    return _context4.abrupt("return", reject(_context4.t0));

                                case 11:
                                    resolve(JSON.stringify(data.profile));

                                case 12:
                                case "end":
                                    return _context4.stop();
                            }
                        }
                    }, _callee4, this, [[1, 7]]);
                }));
            });
        }
    }]);

    return ProfilingHeap;
}();

exports.default = ProfilingHeap;
//# sourceMappingURL=profilingHeap.js.map