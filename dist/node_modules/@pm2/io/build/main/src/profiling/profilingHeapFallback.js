"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var debug_1 = require("debug");
var debug = debug_1.default('axm:profiling');
var module_1 = require("../utils/module");
var configuration_1 = require("../configuration");

var ProfilingHeapFallback = function () {
    function ProfilingHeapFallback() {
        _classCallCheck(this, ProfilingHeapFallback);

        this.MODULE_NAME = 'v8-profiler-node8';
        this.FALLBACK_MODULE_NAME = 'v8-profiler';
    }

    _createClass(ProfilingHeapFallback, [{
        key: "init",
        value: function init() {
            return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                var path, moduleName, enable;
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                path = void 0;
                                moduleName = this.MODULE_NAME;
                                _context.prev = 2;
                                _context.next = 5;
                                return module_1.default.getModulePath(this.MODULE_NAME);

                            case 5:
                                path = _context.sent;
                                _context.next = 21;
                                break;

                            case 8:
                                _context.prev = 8;
                                _context.t0 = _context["catch"](2);
                                _context.prev = 10;

                                moduleName = this.FALLBACK_MODULE_NAME;
                                _context.next = 14;
                                return module_1.default.getModulePath(this.FALLBACK_MODULE_NAME);

                            case 14:
                                path = _context.sent;
                                _context.next = 21;
                                break;

                            case 17:
                                _context.prev = 17;
                                _context.t1 = _context["catch"](10);

                                configuration_1.default.configureModule({
                                    heapdump: false
                                });
                                throw new Error('Profiler not loaded !');

                            case 21:
                                this.profiler = module_1.default.loadModule(path, moduleName);
                                enable = !(this.profiler instanceof Error);

                                configuration_1.default.configureModule({
                                    heapdump: enable
                                });

                            case 24:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, _callee, this, [[2, 8], [10, 17]]);
            }));
        }
    }, {
        key: "destroy",
        value: function destroy() {
            debug('Profiler destroyed !');
        }
    }, {
        key: "start",
        value: function start() {
            this.snapshot = this.profiler.takeSnapshot('km-heap-snapshot');
        }
    }, {
        key: "stop",
        value: function stop() {
            return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                return _context2.abrupt("return", this.getProfileInfo());

                            case 1:
                            case "end":
                                return _context2.stop();
                        }
                    }
                }, _callee2, this);
            }));
        }
    }, {
        key: "takeSnapshot",
        value: function takeSnapshot() {
            return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
                return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                this.start();
                                return _context3.abrupt("return", this.stop());

                            case 2:
                            case "end":
                                return _context3.stop();
                        }
                    }
                }, _callee3, this);
            }));
        }
    }, {
        key: "getProfileInfo",
        value: function getProfileInfo() {
            var _this = this;

            return new Promise(function (resolve) {
                var buffer = '';
                _this.snapshot.serialize(function (data, length) {
                    buffer += data;
                }, function () {
                    _this.snapshot.delete();
                    resolve(buffer);
                });
            }).then(function (buffer) {
                return buffer;
            });
        }
    }]);

    return ProfilingHeapFallback;
}();

exports.default = ProfilingHeapFallback;
//# sourceMappingURL=profilingHeapFallback.js.map