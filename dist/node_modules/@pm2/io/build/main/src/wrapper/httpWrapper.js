"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", { value: true });
var proxy_1 = require("../utils/proxy");

var HttpWrapper = function () {
    function HttpWrapper(metricFeature) {
        _classCallCheck(this, HttpWrapper);

        this.metricFeature = metricFeature;
    }

    _createClass(HttpWrapper, [{
        key: "init",
        value: function init(opts, http) {
            var glMeter = void 0;
            var glLatency = void 0;
            if (!opts.name) opts.name = 'http';
            glMeter = this.metricFeature.meter({
                name: opts.name.toUpperCase(),
                samples: 60,
                type: 'internal/http/builtin/reqs',
                unit: 'req/min'
            });
            glLatency = this.metricFeature.histogram({
                measurement: 'mean',
                name: "pmx:" + opts.name + ":latency",
                type: 'internal/http/builtin/latency',
                unit: 'ms'
            });
            var ignoreRoutes = function ignoreRoutes(url) {
                for (var i = 0; i < opts.ignore_routes.length; ++i) {
                    if (url.match(opts.ignore_routes[i]) !== null) {
                        return true;
                    }
                }
                return false;
            };
            proxy_1.default.wrap(http.Server.prototype, ['on', 'addListener'], function (addListener) {
                return function (event, listener) {
                    var self = this;
                    var overloadedFunction = function overloadedFunction(request, response) {
                        glMeter.mark();
                        var httpStart = {
                            url: request.url,
                            start: Date.now()
                        };
                        response.once('finish', function () {
                            if (!ignoreRoutes(httpStart.url)) {
                                glLatency.update(Date.now() - httpStart.start);
                            }
                        });
                    };
                    if (!(event === 'request' && typeof listener === 'function')) {
                        return addListener.apply(self, arguments);
                    }
                    if (self.__overloaded !== true) {
                        self.on('removeListener', function onRemoveListener() {
                            setTimeout(function () {
                                if (self.listeners('request').length === 1) {
                                    self.removeListener('request', overloadedFunction);
                                    self.removeListener('removeListener', onRemoveListener);
                                    self.__overloaded = false;
                                }
                            }, 200);
                        });
                        addListener.call(self, event, overloadedFunction);
                        self.__overloaded = true;
                    }
                    return addListener.apply(self, arguments);
                };
            });
            return http;
        }
    }]);

    return HttpWrapper;
}();

exports.default = HttpWrapper;
//# sourceMappingURL=httpWrapper.js.map