"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var notify_1 = require("./features/notify");
var metrics_1 = require("./features/metrics");
var actions_1 = require("./features/actions");
var events_1 = require("./features/events");
var merge = require("deepmerge");
var configuration_1 = require("./configuration");
var metricConfig_1 = require("./utils/metricConfig");
var debug_1 = require("debug");
var fs = require("fs");
var cluster = require("cluster");
var serviceManager_1 = require("./serviceManager");
var transport_1 = require("./services/transport");
var debug = debug_1.default('PM2-IO-APM');

var TransactionConfig = function TransactionConfig() {
    _classCallCheck(this, TransactionConfig);
};

var MetricsConfig = function MetricsConfig() {
    _classCallCheck(this, MetricsConfig);
};

var ActionsConfig = function ActionsConfig() {
    _classCallCheck(this, ActionsConfig);
};

var IOConfig = function IOConfig() {
    _classCallCheck(this, IOConfig);
};

var PMX = function () {
    function PMX() {
        _classCallCheck(this, PMX);

        this.notifyFeature = new notify_1.NotifyFeature();
        this.metricsFeature = new metrics_1.default();
        this.actionsFeature = new actions_1.default(!cluster.isWorker);
        this.eventsFeature = new events_1.default();
        var eventLoopInspector = require('event-loop-inspector')(true);
        serviceManager_1.ServiceManager.set('eventLoopService', {
            inspector: eventLoopInspector
        });
        serviceManager_1.ServiceManager.set('transport', new transport_1.default());
    }

    _createClass(PMX, [{
        key: "getInitialConfig",
        value: function getInitialConfig() {
            return this.initialConfig;
        }
    }, {
        key: "init",
        value: function init(config, force) {
            var _this = this;

            var notifyOptions = notify_1.NotifyOptionsDefault;
            var configMetrics = {};
            if (!config) {
                config = new IOConfig();
            }
            if (process.env.PMX_FORCE_UPDATE) {
                var IO_KEY = Symbol.for('@pm2/io');
                var globalSymbols = Object.getOwnPropertySymbols(global);
                var alreadyInstanciated = globalSymbols.indexOf(IO_KEY) > -1;
                if (alreadyInstanciated) {
                    global[IO_KEY].destroy();
                }
                global[IO_KEY] = this;
            }
            if (config.level) {
                notifyOptions.level = config.level;
            }
            if (config.catchExceptions) {
                notifyOptions.catchExceptions = config.catchExceptions;
            }
            if (config.metrics) {
                configMetrics = config.metrics;
            }
            (function (_) {
                return tslib_1.__awaiter(_this, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                    return regeneratorRuntime.wrap(function _callee$(_context) {
                        while (1) {
                            switch (_context.prev = _context.next) {
                                case 0:
                                    if (!(config.standalone && config.publicKey && config.secretKey && config.appName)) {
                                        _context.next = 5;
                                        break;
                                    }

                                    _context.next = 3;
                                    return serviceManager_1.ServiceManager.get('transport').initStandalone({
                                        publicKey: config.publicKey,
                                        secretKey: config.secretKey,
                                        appName: config.appName,
                                        serverName: config.serverName,
                                        sendLogs: config.sendLogs
                                    });

                                case 3:
                                    _context.next = 6;
                                    break;

                                case 5:
                                    serviceManager_1.ServiceManager.get('transport').init();

                                case 6:
                                    // Configuration
                                    this.backwardConfigConversion(config);
                                    this.notifyFeature.init(notifyOptions);
                                    this.metricsFeature.init(config.metrics, force);
                                    this.actionsFeature.init(config.actions, force);
                                    this.actionsFeature.initListener();
                                    configuration_1.default.init(config);
                                    this.initialConfig = config;

                                case 13:
                                case "end":
                                    return _context.stop();
                            }
                        }
                    }, _callee, this);
                }));
            })();
            return this;
        }
    }, {
        key: "destroy",
        value: function destroy() {
            if (this.metricsFeature) this.metricsFeature.destroy();
            if (this.actionsFeature) this.actionsFeature.destroy();
            if (this.notifyFeature) this.notifyFeature.destroy();
        }
    }, {
        key: "notifyError",
        value: function notifyError(err, context) {
            var level = 'info';
            if (context && context.level) {
                level = context.level;
            }
            this.notifyFeature.notifyError(err, level);
        }
    }, {
        key: "metrics",
        value: function metrics(_metrics) {
            var res = {};
            var allMetrics = [];
            if (!Array.isArray(_metrics)) {
                allMetrics[0] = _metrics;
            } else {
                allMetrics = _metrics;
            }
            for (var i = 0; i < allMetrics.length; i++) {
                var currentMetric = allMetrics[i];
                if (!currentMetric || !currentMetric.hasOwnProperty('name') || !currentMetric.hasOwnProperty('type')) {
                    console.warn("Metric can't be initialized : missing some properties !");
                    console.warn('name => required');
                    console.warn('type => required');
                    console.warn('id => optional');
                    console.warn('unit => optional');
                    console.warn('value => optional');
                    console.warn('historic => optional');
                    console.warn('agg_type => optional');
                    console.warn('measurement => optional');
                    continue;
                }
                // escape spaces and special characters from metric's name
                var metricKey = currentMetric.name.replace(/ /g, '_').replace(/[^\w\s]/gi, '');
                var type = currentMetric.type;
                currentMetric.type = currentMetric.id;
                delete currentMetric.id;
                if (typeof this.metricsFeature[type] !== 'function') {
                    console.warn("Metric " + currentMetric.name + " cant be initialized : unknown type " + type + " !");
                    continue;
                }
                res[metricKey] = this.metricsFeature[type](currentMetric);
            }
            return res;
        }
    }, {
        key: "histogram",
        value: function histogram(config) {
            config = metricConfig_1.default.buildConfig(config);
            return this.metricsFeature['histogram'](config);
        }
    }, {
        key: "metric",
        value: function metric(config) {
            config = metricConfig_1.default.buildConfig(config);
            return this.metricsFeature['metric'](config);
        }
    }, {
        key: "counter",
        value: function counter(config) {
            config = metricConfig_1.default.buildConfig(config);
            return this.metricsFeature['counter'](config);
        }
    }, {
        key: "meter",
        value: function meter(config) {
            config = metricConfig_1.default.buildConfig(config);
            return this.metricsFeature['meter'](config);
        }
    }, {
        key: "action",
        value: function action(name, opts, fn) {
            if ((typeof name === "undefined" ? "undefined" : _typeof(name)) === 'object') {
                opts = name.opts;
                fn = name.action;
                name = name.name;
            }
            this.actionsFeature.action(name, opts, fn);
            // Only listen if transporter wasn't initiated (no pmx.init())
            if (!serviceManager_1.ServiceManager.get('transport').initiated) {
                this.actionsFeature.initListener();
            }
        }
    }, {
        key: "scopedAction",
        value: function scopedAction(name, fn) {
            this.actionsFeature.scopedAction(name, fn);
            // Only listen if transporter wasn't initiated (no pmx.init())
            if (!serviceManager_1.ServiceManager.get('transport').initiated) {
                this.actionsFeature.initListener();
            }
        }
    }, {
        key: "transpose",
        value: function transpose(variableName, reporter) {
            this.metricsFeature.transpose(variableName, reporter);
        }
    }, {
        key: "onExit",
        value: function onExit(callback) {
            if (callback && typeof callback === 'function') {
                var onExit = require('signal-exit');
                return onExit(callback);
            }
        }
        // -----------------------------------------------------------
        // Retro compatibility
        // -----------------------------------------------------------

    }, {
        key: "probe",
        value: function probe() {
            var _this2 = this;

            return {
                histogram: function histogram(_histogram) {
                    return _this2.genericBackwardConversion(_histogram, 'histogram');
                },
                meter: function meter(_meter) {
                    return _this2.genericBackwardConversion(_meter, 'meter');
                },
                metric: function metric(_metric) {
                    return _this2.genericBackwardConversion(_metric, 'metric');
                },
                counter: function counter(_counter) {
                    return _this2.genericBackwardConversion(_counter, 'counter');
                },
                transpose: function transpose(variableName, reporter) {
                    _this2.transpose(variableName, reporter);
                }
            };
        }
    }, {
        key: "emit",
        value: function emit(name, data) {
            this.eventsFeature.emit(name, data);
        }
    }, {
        key: "emitEvent",
        value: function emitEvent(name, data) {
            this.eventsFeature.emit(name, data);
        }
    }, {
        key: "notify",
        value: function notify(notification) {
            if (!(notification instanceof Error)) {
                notification = new Error(notification);
            }
            this.notifyFeature.notifyError(notification);
        }
    }, {
        key: "getPID",
        value: function getPID(file) {
            if (typeof file === 'number') return file;
            return parseInt(fs.readFileSync(file).toString(), 10);
        }
    }, {
        key: "initModule",
        value: function initModule(opts, cb) {
            if (!opts) opts = {};
            if (opts.reference) {
                opts.name = opts.reference;
                delete opts.reference;
            }
            opts = merge({
                widget: {}
            }, opts);
            opts.widget = merge({
                type: 'generic',
                logo: 'https://app.keymetrics.io/img/logo/keymetrics-300.png',
                theme: ['#111111', '#1B2228', '#807C7C', '#807C7C']
            }, opts.widget);
            opts.isModule = true;
            opts = configuration_1.default.init(opts);
            if (cb && typeof cb === 'function') return cb(null, opts);
            return opts;
        }
    }, {
        key: "expressErrorHandler",
        value: function expressErrorHandler() {
            return this.notifyFeature.expressErrorHandler();
        }
    }, {
        key: "genericBackwardConversion",
        value: function genericBackwardConversion(object, type) {
            if ((typeof object === "undefined" ? "undefined" : _typeof(object)) !== 'object') {
                console.error('Parameter should be an object');
                return null;
            }
            object.type = type;
            // escape spaces and special characters from metric's name
            var metricKey = object.name.replace(/ /g, '_').replace(/[^\w\s]/gi, '');
            return this.metrics(object)[metricKey];
        }
    }, {
        key: "backwardConfigConversion",
        value: function backwardConfigConversion(config) {
            // ------------------------------------------
            // Network
            // ------------------------------------------
            if (config.hasOwnProperty('network') || config.hasOwnProperty('ports')) {
                var networkConf = {};
                if (config.hasOwnProperty('network')) {
                    networkConf.traffic = Boolean(config.network);
                    delete config.network;
                }
                if (config.hasOwnProperty('ports')) {
                    networkConf.ports = Boolean(config.ports);
                    delete config.ports;
                }
                this.initMetricsConf(config);
                config.metrics.network = networkConf;
            }
            // ------------------------------------------
            // V8
            // ------------------------------------------
            if (config.hasOwnProperty('v8')) {
                this.initMetricsConf(config);
                config.metrics.v8 = config.v8;
                delete config.v8;
            }
            // ------------------------------------------
            // transactions
            // ------------------------------------------
            if (config.hasOwnProperty('transactions') || config.hasOwnProperty('http')) {
                this.initMetricsConf(config);
                config.metrics.transaction = new TransactionConfig();
                if (config.hasOwnProperty('transactions')) {
                    config.metrics.transaction.tracing = config.transactions;
                    delete config.transactions;
                }
                if (config.hasOwnProperty('http')) {
                    config.metrics.transaction.http = config.http;
                    delete config.http;
                }
            }
            // ------------------------------------------
            // Deep metrics
            // ------------------------------------------
            if (config.hasOwnProperty('deep_metrics')) {
                this.initMetricsConf(config);
                config.metrics.deepMetrics = config.deep_metrics;
                delete config.deep_metrics;
            }
            // ------------------------------------------
            // Event Loop action
            // ------------------------------------------
            if (config.hasOwnProperty('event_loop_dump')) {
                this.initActionsConf(config);
                config.actions.eventLoopDump = config.event_loop_dump;
                delete config.event_loop_dump;
            }
            // ------------------------------------------
            // Profiling action
            // ------------------------------------------
            if (config.hasOwnProperty('profiling')) {
                this.initActionsConf(config);
                config.actions.profilingHeap = config.profiling;
                config.actions.profilingHeap = config.profiling;
                delete config.profiling;
            }
        }
    }, {
        key: "initMetricsConf",
        value: function initMetricsConf(config) {
            if (!config.metrics) {
                config.metrics = new MetricsConfig();
            }
        }
    }, {
        key: "initActionsConf",
        value: function initActionsConf(config) {
            if (!config.actions) {
                config.actions = new ActionsConfig();
            }
        }
    }]);

    return PMX;
}();

exports.default = PMX;
//# sourceMappingURL=pmx.js.map