"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", { value: true });
var debug_1 = require("debug");
var eventLoopInspector_1 = require("../actions/eventLoopInspector");
var profilingHeap_1 = require("../actions/profilingHeap");
var profilingCpu_1 = require("../actions/profilingCpu");
var coverage_1 = require("../actions/coverage");
var metricConfig_1 = require("../utils/metricConfig");
var debug = debug_1.default('axm:actionsService');

var ActionsService = function () {
    function ActionsService(actionsFeature) {
        _classCallCheck(this, ActionsService);

        this.defaultConf = {
            profilingCpu: true,
            profilingHeap: true
        };
        this.services = new Map();
        this.services.set('eventLoopDump', new eventLoopInspector_1.default(actionsFeature));
        this.services.set('profilingCpu', new profilingCpu_1.default(actionsFeature));
        this.services.set('profilingHeap', new profilingHeap_1.default(actionsFeature));
        this.services.set('coverage', new coverage_1.default(actionsFeature));
    }

    _createClass(ActionsService, [{
        key: "init",
        value: function init(config, force) {
            if (!force) {
                config = metricConfig_1.default.getConfig(config, this.defaultConf);
            }
            // init actions only if they are enabled in config
            for (var property in config) {
                if (config.hasOwnProperty(property) && config[property] !== false) {
                    if (!this.services.has(property)) {
                        debug("Action " + property + " does not exist");
                        continue;
                    }
                    this.services.get(property).init();
                }
            }
        }
    }, {
        key: "destroy",
        value: function destroy() {
            this.services.forEach(function (service, serviceName) {
                if (service.destroy && typeof service.destroy === 'function') {
                    service.destroy();
                }
            });
        }
    }, {
        key: "get",
        value: function get(name) {
            if (!this.services.has(name)) {
                debug("Service " + name + " not found !");
                return null;
            }
            return this.services.get(name);
        }
    }]);

    return ActionsService;
}();

exports.default = ActionsService;
//# sourceMappingURL=actions.js.map