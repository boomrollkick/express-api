"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var debug_1 = require("debug");
var semver = require("semver");
var stringify = require("json-stringify-safe");
var debug = debug_1.default('axm:transportService');

var TransportConfig = function TransportConfig() {
    _classCallCheck(this, TransportConfig);
};

exports.TransportConfig = TransportConfig;

var Actions = function Actions() {
    _classCallCheck(this, Actions);
};

exports.Actions = Actions;

var Process = function Process() {
    _classCallCheck(this, Process);
};

exports.Process = Process;

var Transport = function Transport() {
    _classCallCheck(this, Transport);
};

exports.Transport = Transport;

var Agent = function Agent() {
    _classCallCheck(this, Agent);
};

exports.Agent = Agent;

var TransportService = function () {
    function TransportService() {
        _classCallCheck(this, TransportService);

        this.isStandalone = false;
        this.initiated = false; // tslint:disable-line
    }

    _createClass(TransportService, [{
        key: "init",
        value: function init() {
            this.initiated = true;
            this.isStandalone = false;
        }
    }, {
        key: "initStandalone",
        value: function initStandalone(config) {
            return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                var AgentNode;
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                if (semver.satisfies(process.version, '>= 6.0.0')) {
                                    _context.next = 4;
                                    break;
                                }

                                this.init();
                                console.error('[STANDALONE MODE] Unable to set standalone mode with node < 6.0.0');
                                return _context.abrupt("return", process.exit(1));

                            case 4:
                                AgentNode = require('@pm2/agent-node');

                                this.isStandalone = true;
                                this.initiated = true;
                                debug('Init new transport service');
                                this.config = config;
                                this.process = {
                                    axm_actions: [],
                                    axm_options: {},
                                    axm_monitor: {}
                                };
                                this.agent = new AgentNode({
                                    publicKey: this.config.publicKey,
                                    secretKey: this.config.secretKey,
                                    appName: this.config.appName,
                                    serverName: this.config.serverName
                                }, this.process);
                                this.agent.sendLogs = config.sendLogs || false;
                                _context.prev = 12;
                                _context.next = 15;
                                return this.agent.start();

                            case 15:
                                _context.next = 21;
                                break;

                            case 17:
                                _context.prev = 17;
                                _context.t0 = _context["catch"](12);

                                console.error(_context.t0);
                                process.exit(1);

                            case 21:
                                this.transport = this.agent.transport;
                                return _context.abrupt("return", debug('Agent launched'));

                            case 23:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, _callee, this, [[12, 17]]);
            }));
        }
    }, {
        key: "setMetrics",
        value: function setMetrics(metrics) {
            if (this.isStandalone) {
                return this.process.axm_monitor = metrics;
            }
            this.send('axm:monitor', metrics);
        }
    }, {
        key: "addAction",
        value: function addAction(action) {
            debug("Add action: " + action.action_name + ":" + action.action_type);
            if (this.isStandalone) {
                return this.process.axm_actions.push(action);
            }
            return this.send('axm:action', action);
        }
    }, {
        key: "setOptions",
        value: function setOptions(options) {
            debug("Set options: [" + Object.keys(options).join(',') + "]");
            if (this.isStandalone) {
                return this.process.axm_options = Object.assign(this.process.axm_options, options);
            }
            return this.send('axm:option:configuration', options);
        }
    }, {
        key: "getFormattedPayload",
        value: function getFormattedPayload(channel, payload) {
            // Reformat for backend
            switch (channel) {
                case 'axm:reply':
                    return { data: payload };
                case 'process:exception':
                    return { data: payload };
            }
            return payload;
        }
    }, {
        key: "send",
        value: function send(channel, payload) {
            if (this.isStandalone) {
                return this.agent.send(channel, this.getFormattedPayload(channel, payload)) ? 0 : -1;
            }
            if (!process.send) return -1;
            try {
                process.send(JSON.parse(stringify({
                    type: channel,
                    data: payload
                })));
            } catch (e) {
                debug('Process disconnected from parent !');
                debug(e.stack || e);
                return process.exit(1);
            }
            return 0;
        }
    }, {
        key: "destroy",
        value: function destroy() {
            if (!this.isStandalone) return;
            this.transport.disconnect();
        }
    }]);

    return TransportService;
}();

exports.default = TransportService;
//# sourceMappingURL=transport.js.map