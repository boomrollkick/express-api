"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", { value: true });
var debug_1 = require("debug");
var v8_1 = require("../metrics/v8");
var eventLoopDelay_1 = require("../metrics/eventLoopDelay");
var metricConfig_1 = require("../utils/metricConfig");
var eventLoopHandlesRequests_1 = require("../metrics/eventLoopHandlesRequests");
var transaction_1 = require("../metrics/transaction");
var network_1 = require("../metrics/network");
var metricFromDump_1 = require("../metrics/metricFromDump");
var debug = debug_1.default('axm:metricService');

var MetricsService = function () {
    function MetricsService(metricsFeature) {
        _classCallCheck(this, MetricsService);

        this.defaultConf = {
            eventLoopDelay: true,
            eventLoopActive: true,
            transaction: { http: true }
        };
        this.metricsFeature = metricsFeature;
        this.services = new Map();
        this.services.set('v8', new v8_1.default(metricsFeature));
        this.services.set('eventLoopDelay', new eventLoopDelay_1.default(metricsFeature));
        this.services.set('eventLoopActive', new eventLoopHandlesRequests_1.default(metricsFeature));
        this.services.set('transaction', new transaction_1.default(metricsFeature));
        this.services.set('network', new network_1.default(metricsFeature));
        this.services.set('worker', new metricFromDump_1.default(metricsFeature, [{ name: 'Child processes', property: 'ChildProcess' }, { name: 'Threads', property: 'MessagePort' }]));
        this.services.set('fileRequests', new metricFromDump_1.default(metricsFeature, { name: 'Files requests', property: 'FSReqWrap', parentProperty: 'requests' }));
    }

    _createClass(MetricsService, [{
        key: "init",
        value: function init(config, force) {
            if (!force) {
                config = metricConfig_1.default.getConfig(config, this.defaultConf);
            }
            // init metrics only if they are enabled in config
            for (var property in config) {
                if (config.hasOwnProperty(property) && config[property] !== false) {
                    if (property === 'deepMetrics') {
                        var DeepMetrics = require('../metrics/deepMetrics').default;
                        this.services.set('deepMetrics', new DeepMetrics(this.metricsFeature));
                    }
                    if (!this.services.has(property)) {
                        debug("Metric " + property + " does not exist");
                        continue;
                    }
                    var subConf = config[property];
                    this.services.get(property).init(subConf);
                }
            }
        }
    }, {
        key: "destroyAll",
        value: function destroyAll() {
            this.services.forEach(function (service, serviceName) {
                if (service.destroy && typeof service.destroy === 'function') {
                    service.destroy();
                }
            });
        }
    }, {
        key: "get",
        value: function get(name) {
            if (!this.services.has(name)) {
                debug("Service " + name + " not found !");
                return null;
            }
            return this.services.get(name);
        }
    }]);

    return MetricsService;
}();

exports.default = MetricsService;
//# sourceMappingURL=metrics.js.map