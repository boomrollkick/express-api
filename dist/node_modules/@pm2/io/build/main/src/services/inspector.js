"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", { value: true });
var inspector = require("inspector");
var debug_1 = require("debug");
var debug = debug_1.default('axm:inspectorservice');

var InspectorService = function () {
    function InspectorService() {
        _classCallCheck(this, InspectorService);

        this.isConnected = false;
    }

    _createClass(InspectorService, [{
        key: "createSession",
        value: function createSession() {
            if (!this.session) {
                this.session = new inspector.Session();
            }
            return this.session;
        }
    }, {
        key: "post",
        value: function post(action, params) {
            var _this = this;

            return new Promise(function (resolve, reject) {
                _this.session.post(action, params, function (err, data) {
                    if (err) return reject(err);
                    debug(action + ' !');
                    resolve(data);
                });
            });
        }
    }, {
        key: "on",
        value: function on(eventName, callback) {
            this.session.on(eventName, callback);
        }
    }, {
        key: "connect",
        value: function connect() {
            if (!this.isConnected) {
                this.session.connect();
            }
            this.isConnected = true;
        }
    }, {
        key: "disconnect",
        value: function disconnect() {
            if (this.isConnected) {
                this.session.post('Profiler.disable');
                this.session.disconnect();
                this.isConnected = false;
            } else {
                debug('No open session !');
            }
        }
    }]);

    return InspectorService;
}();

exports.InspectorService = InspectorService;
module.exports = new InspectorService();
//# sourceMappingURL=inspector.js.map