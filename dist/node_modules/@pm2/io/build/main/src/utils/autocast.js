"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", { value: true });

var Autocast = function () {
    function Autocast() {
        _classCallCheck(this, Autocast);

        /**
         * Common strings to cast
         */
        this.commonStrings = {
            'true': true,
            'false': false,
            'undefined': undefined,
            'null': null,
            'NaN': NaN
        };
    }

    _createClass(Autocast, [{
        key: "process",
        value: function process(key, value, o) {
            if ((typeof value === "undefined" ? "undefined" : _typeof(value)) === 'object') return;
            o[key] = this._cast(value);
        }
    }, {
        key: "traverse",
        value: function traverse(o, func) {
            for (var i in o) {
                func.apply(this, [i, o[i], o]);
                if (o[i] !== null && _typeof(o[i]) === 'object') {
                    // going on step down in the object tree!!
                    this.traverse(o[i], func);
                }
            }
        }
        /**
         * Given a value, try and cast it
         */

    }, {
        key: "autocast",
        value: function autocast(s) {
            if ((typeof s === "undefined" ? "undefined" : _typeof(s)) === 'object') {
                this.traverse(s, this.process);
                return s;
            }
            return this._cast(s);
        }
    }, {
        key: "_cast",
        value: function _cast(s) {
            var key = void 0;
            // Don't cast Date objects
            if (s instanceof Date) return s;
            if (typeof s === 'boolean') return s;
            // Try to cast it to a number
            if (!isNaN(s)) return Number(s);
            // Try to make it a common string
            for (key in this.commonStrings) {
                if (s === key) return this.commonStrings[key];
            }
            // Give up
            return s;
        }
    }]);

    return Autocast;
}();

exports.default = Autocast;
//# sourceMappingURL=autocast.js.map