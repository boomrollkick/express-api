"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", { value: true });
var BinaryHeap_1 = require("./BinaryHeap");
var units_1 = require("./units");

var ExponentiallyDecayingSample = function () {
    function ExponentiallyDecayingSample(options) {
        _classCallCheck(this, ExponentiallyDecayingSample);

        this.RESCALE_INTERVAL = 1 * units_1.default.HOURS;
        this.ALPHA = 0.015;
        this.SIZE = 1028;
        options = options || {};
        this._elements = new BinaryHeap_1.default({
            score: function score(element) {
                return -element.priority;
            }
        });
        this._rescaleInterval = options.rescaleInterval || this.RESCALE_INTERVAL;
        this._alpha = options.alpha || this.ALPHA;
        this._size = options.size || this.SIZE;
        this._random = options.random || this._random;
        this._landmark = null;
        this._nextRescale = null;
        this._mean = null;
    }

    _createClass(ExponentiallyDecayingSample, [{
        key: "update",
        value: function update(value, timestamp) {
            var now = Date.now();
            if (!this._landmark) {
                this._landmark = now;
                this._nextRescale = this._landmark + this._rescaleInterval;
            }
            timestamp = timestamp || now;
            var newSize = this._elements.size() + 1;
            var element = {
                priority: this._priority(timestamp - this._landmark),
                value: value
            };
            if (newSize <= this._size) {
                this._elements.add(element);
            } else if (element.priority > this._elements.first().priority) {
                this._elements.removeFirst();
                this._elements.add(element);
            }
            if (now >= this._nextRescale) this._rescale(now);
        }
    }, {
        key: "toSortedArray",
        value: function toSortedArray() {
            return this._elements.toSortedArray().map(function (element) {
                return element.value;
            });
        }
    }, {
        key: "toArray",
        value: function toArray() {
            return this._elements.toArray().map(function (element) {
                return element.value;
            });
        }
    }, {
        key: "_weight",
        value: function _weight(age) {
            // We divide by 1000 to not run into huge numbers before reaching a
            // rescale event.
            return Math.exp(this._alpha * (age / 1000));
        }
    }, {
        key: "_priority",
        value: function _priority(age) {
            return this._weight(age) / this._random();
        }
    }, {
        key: "_random",
        value: function _random() {
            return Math.random();
        }
    }, {
        key: "_rescale",
        value: function _rescale(now) {
            now = now || Date.now();
            var self = this;
            var oldLandmark = this._landmark;
            this._landmark = now || Date.now();
            this._nextRescale = now + this._rescaleInterval;
            var factor = self._priority(-(self._landmark - oldLandmark));
            this._elements.toArray().forEach(function (element) {
                element.priority *= factor;
            });
        }
    }, {
        key: "avg",
        value: function avg(now) {
            var sum = 0;
            this._elements.toArray().forEach(function (element) {
                sum += element.value;
            });
            return sum / this._elements.size();
        }
    }]);

    return ExponentiallyDecayingSample;
}();

exports.default = ExponentiallyDecayingSample;
//# sourceMappingURL=EDS.js.map