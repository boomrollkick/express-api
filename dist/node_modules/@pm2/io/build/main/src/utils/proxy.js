"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", { value: true });
var debug_1 = require("debug");
var debug = debug_1.default('axm:proxy');

var Proxy = function () {
    function Proxy() {
        _classCallCheck(this, Proxy);
    }

    _createClass(Proxy, null, [{
        key: "wrap",
        value: function wrap(object, methods, hook) {
            if (!Array.isArray(methods)) methods = [methods];
            for (var i = 0; i < methods.length; ++i) {
                debug('Wrapping method:', methods[i]);
                var original = object[methods[i]];
                if (!original) return debug('Method %s unknown', methods[i]);
                if (original.__axm_original) {
                    debug('Already wrapped', methods[i]);
                    if (methods[i] !== '_load') {
                        return;
                    }
                }
                var hooked = hook(original);
                if (original.__axm_original) {
                    hooked.__axm_original = original.__axm_original;
                } else {
                    hooked.__axm_original = original;
                }
                object[methods[i]] = hooked;
            }
        }
    }]);

    return Proxy;
}();

exports.default = Proxy;
//# sourceMappingURL=proxy.js.map