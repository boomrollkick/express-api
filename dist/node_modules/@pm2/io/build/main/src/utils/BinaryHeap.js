"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", { value: true });

var BinaryHeap = function () {
    function BinaryHeap(options) {
        _classCallCheck(this, BinaryHeap);

        options = options || {};
        this._elements = options.elements || [];
        this._score = options.score || this._score;
    }

    _createClass(BinaryHeap, [{
        key: "add",
        value: function add() {
            for (var i = 0; i < arguments.length; i++) {
                var element = arguments[i];
                this._elements.push(element);
                this._bubble(this._elements.length - 1);
            }
        }
    }, {
        key: "first",
        value: function first() {
            return this._elements[0];
        }
    }, {
        key: "removeFirst",
        value: function removeFirst() {
            var root = this._elements[0];
            var last = this._elements.pop();
            if (this._elements.length > 0) {
                this._elements[0] = last;
                this._sink(0);
            }
            return root;
        }
    }, {
        key: "clone",
        value: function clone() {
            return new BinaryHeap({
                elements: this.toArray(),
                score: this._score
            });
        }
    }, {
        key: "toSortedArray",
        value: function toSortedArray() {
            var array = [];
            var clone = this.clone();
            while (true) {
                var element = clone.removeFirst();
                if (element === undefined) break;
                array.push(element);
            }
            return array;
        }
    }, {
        key: "toArray",
        value: function toArray() {
            return [].concat(this._elements);
        }
    }, {
        key: "size",
        value: function size() {
            return this._elements.length;
        }
    }, {
        key: "_bubble",
        value: function _bubble(bubbleIndex) {
            var bubbleElement = this._elements[bubbleIndex];
            var bubbleScore = this._score(bubbleElement);
            while (bubbleIndex > 0) {
                var parentIndex = this._parentIndex(bubbleIndex);
                var parentElement = this._elements[parentIndex];
                var parentScore = this._score(parentElement);
                if (bubbleScore <= parentScore) break;
                this._elements[parentIndex] = bubbleElement;
                this._elements[bubbleIndex] = parentElement;
                bubbleIndex = parentIndex;
            }
        }
    }, {
        key: "_sink",
        value: function _sink(sinkIndex) {
            var sinkElement = this._elements[sinkIndex];
            var sinkScore = this._score(sinkElement);
            var length = this._elements.length;
            while (true) {
                var swapIndex = void 0;
                var swapScore = void 0;
                var swapElement = null;
                var childIndexes = this._childIndexes(sinkIndex);
                for (var i = 0; i < childIndexes.length; i++) {
                    var childIndex = childIndexes[i];
                    if (childIndex >= length) break;
                    var childElement = this._elements[childIndex];
                    var childScore = this._score(childElement);
                    if (childScore > sinkScore) {
                        if (swapScore === undefined || swapScore < childScore) {
                            swapIndex = childIndex;
                            swapScore = childScore;
                            swapElement = childElement;
                        }
                    }
                }
                if (swapIndex === undefined) break;
                this._elements[swapIndex] = sinkElement;
                this._elements[sinkIndex] = swapElement;
                sinkIndex = swapIndex;
            }
        }
    }, {
        key: "_parentIndex",
        value: function _parentIndex(index) {
            return Math.floor((index - 1) / 2);
        }
    }, {
        key: "_childIndexes",
        value: function _childIndexes(index) {
            return [2 * index + 1, 2 * index + 2];
        }
    }, {
        key: "_score",
        value: function _score(element) {
            return element.valueOf();
        }
    }]);

    return BinaryHeap;
}();

exports.default = BinaryHeap;
//# sourceMappingURL=BinaryHeap.js.map