"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", { value: true });
var EDS_1 = require("../EDS");

var Histogram = function () {
    function Histogram(opts) {
        _classCallCheck(this, Histogram);

        this._sample = new EDS_1.default();
        this._count = 0;
        this._sum = 0;
        // These are for the Welford algorithm for calculating running variance
        // without floating-point doom.
        this._varianceM = 0;
        this._varianceS = 0;
        this._ema = 0;
        opts = opts || {};
        this._measurement = opts.measurement;
        this._callFn = null;
        var methods = {
            min: this.getMin,
            max: this.getMax,
            sum: this.getSum,
            count: this.getCount,
            variance: this._calculateVariance,
            mean: this._calculateMean,
            // stddev   : this._calculateStddev,
            ema: this.getEma()
        };
        if (methods.hasOwnProperty(this._measurement)) {
            this._callFn = methods[this._measurement];
        } else {
            this._callFn = function () {
                var percentiles = this.percentiles([0.5, 0.75, 0.95, 0.99, 0.999]);
                var medians = {
                    median: percentiles[0.5],
                    p75: percentiles[0.75],
                    p95: percentiles[0.95],
                    p99: percentiles[0.99],
                    p999: percentiles[0.999]
                };
                return medians[this._measurement];
            };
        }
    }

    _createClass(Histogram, [{
        key: "update",
        value: function update(value) {
            this._count++;
            this._sum += value;
            this._sample.update(value);
            this._updateMin(value);
            this._updateMax(value);
            this._updateVariance(value);
            this._updateEma(value);
        }
    }, {
        key: "percentiles",
        value: function percentiles(_percentiles) {
            var values = this._sample.toArray().sort(function (a, b) {
                return a === b ? 0 : a - b;
            });
            var results = {};
            for (var i = 0; i < _percentiles.length; i++) {
                var percentile = _percentiles[i];
                if (!values.length) {
                    results[percentile] = null;
                    continue;
                }
                var pos = percentile * (values.length + 1);
                if (pos < 1) {
                    results[percentile] = values[0];
                } else if (pos >= values.length) {
                    results[percentile] = values[values.length - 1];
                } else {
                    var lower = values[Math.floor(pos) - 1];
                    var upper = values[Math.ceil(pos) - 1];
                    results[percentile] = lower + (pos - Math.floor(pos)) * (upper - lower);
                }
            }
            return results;
        }
    }, {
        key: "val",
        value: function val() {
            if (typeof this._callFn === 'function') {
                return this._callFn();
            } else {
                return this._callFn;
            }
        }
    }, {
        key: "getMin",
        value: function getMin() {
            return this._min;
        }
    }, {
        key: "getMax",
        value: function getMax() {
            return this._max;
        }
    }, {
        key: "getSum",
        value: function getSum() {
            return this._sum;
        }
    }, {
        key: "getCount",
        value: function getCount() {
            return this._count;
        }
    }, {
        key: "getEma",
        value: function getEma() {
            return this._ema;
        }
    }, {
        key: "fullResults",
        value: function fullResults() {
            var percentiles = this.percentiles([0.5, 0.75, 0.95, 0.99, 0.999]);
            return {
                min: this._min,
                max: this._max,
                sum: this._sum,
                variance: this._calculateVariance(),
                mean: this._calculateMean(),
                // stddev   : this._calculateStddev(),
                count: this._count,
                median: percentiles[0.5],
                p75: percentiles[0.75],
                p95: percentiles[0.95],
                p99: percentiles[0.99],
                p999: percentiles[0.999],
                ema: this._ema
            };
        }
    }, {
        key: "_updateMin",
        value: function _updateMin(value) {
            if (this._min === undefined || value < this._min) {
                this._min = value;
            }
        }
    }, {
        key: "_updateMax",
        value: function _updateMax(value) {
            if (this._max === undefined || value > this._max) {
                this._max = value;
            }
        }
    }, {
        key: "_updateVariance",
        value: function _updateVariance(value) {
            if (this._count === 1) return this._varianceM = value;
            var oldM = this._varianceM;
            this._varianceM += (value - oldM) / this._count;
            this._varianceS += (value - oldM) * (value - this._varianceM);
        }
    }, {
        key: "_updateEma",
        value: function _updateEma(value) {
            if (this._count <= 1) return this._ema = this._calculateMean();
            var alpha = 2 / (1 + this._count);
            this._ema = value * alpha + this._ema * (1 - alpha);
        }
    }, {
        key: "_calculateMean",
        value: function _calculateMean() {
            return this._count === 0 ? 0 : this._sum / this._count;
        }
    }, {
        key: "_calculateVariance",
        value: function _calculateVariance() {
            return this._count <= 1 ? null : this._varianceS / (this._count - 1);
        }
    }]);

    return Histogram;
}();

exports.default = Histogram;
//# sourceMappingURL=histogram.js.map