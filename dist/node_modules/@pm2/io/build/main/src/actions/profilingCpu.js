"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var debug_1 = require("debug");
var debug = debug_1.default('axm:profilingaction');
var profiling_1 = require("../features/profiling");
var miscellaneous_1 = require("../utils/miscellaneous");
var serviceManager_1 = require("../serviceManager");

var ProfilingCPUAction = function () {
    function ProfilingCPUAction(actionFeature) {
        _classCallCheck(this, ProfilingCPUAction);

        this.actionFeature = actionFeature;
    }

    _createClass(ProfilingCPUAction, [{
        key: "init",
        value: function init() {
            return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                this.profilingFeature = new profiling_1.default();
                                this.profilings = this.profilingFeature.init();
                                _context.prev = 2;
                                _context.next = 5;
                                return this.profilings.cpuProfiling.init();

                            case 5:
                                // expose actions only if the feature is available
                                this.exposeActions();
                                _context.next = 11;
                                break;

                            case 8:
                                _context.prev = 8;
                                _context.t0 = _context["catch"](2);

                                debug("Failed to load cpu profiler: " + _context.t0.message);

                            case 11:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, _callee, this, [[2, 8]]);
            }));
        }
    }, {
        key: "destroy",
        value: function destroy() {
            if (this.profilingFeature) this.profilingFeature.destroy();
        }
    }, {
        key: "stopProfiling",
        value: function stopProfiling(reply) {
            return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
                var data;
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                _context2.prev = 0;
                                _context2.next = 3;
                                return this.profilings.cpuProfiling.stop();

                            case 3:
                                data = _context2.sent;
                                return _context2.abrupt("return", reply({
                                    success: true,
                                    cpuprofile: true,
                                    dump_file: data,
                                    dump_file_size: data.length,
                                    uuid: this.uuid
                                }));

                            case 7:
                                _context2.prev = 7;
                                _context2.t0 = _context2["catch"](0);
                                return _context2.abrupt("return", reply({
                                    success: false,
                                    err: _context2.t0,
                                    uuid: this.uuid
                                }));

                            case 10:
                            case "end":
                                return _context2.stop();
                        }
                    }
                }, _callee2, this, [[0, 7]]);
            }));
        }
    }, {
        key: "exposeActions",
        value: function exposeActions() {
            var _this = this;

            var profilingReply = function profilingReply(data) {
                return serviceManager_1.ServiceManager.get('transport').send('profilings', {
                    data: data.dump_file,
                    at: data.at,
                    initiated: data.initiated || 'manual',
                    duration: data.duration || null,
                    type: 'cpuprofile'
                });
            };
            var startTime = null;
            this.actionFeature.action('km:cpu:profiling:start', function (opts, reply) {
                return tslib_1.__awaiter(_this, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
                    var _this2 = this;

                    return regeneratorRuntime.wrap(function _callee4$(_context4) {
                        while (1) {
                            switch (_context4.prev = _context4.next) {
                                case 0:
                                    startTime = new Date();
                                    if (!reply) {
                                        reply = opts;
                                        opts = {};
                                    }
                                    if (!opts) opts = {};
                                    _context4.prev = 3;

                                    this.uuid = miscellaneous_1.default.generateUUID();
                                    _context4.next = 7;
                                    return this.profilings.cpuProfiling.start();

                                case 7:
                                    reply({ success: true, uuid: this.uuid });
                                    if (opts.timeout && typeof opts.timeout === 'number') {
                                        setTimeout(function (_) {
                                            return tslib_1.__awaiter(_this2, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
                                                return regeneratorRuntime.wrap(function _callee3$(_context3) {
                                                    while (1) {
                                                        switch (_context3.prev = _context3.next) {
                                                            case 0:
                                                                _context3.next = 2;
                                                                return this.stopProfiling(function (data) {
                                                                    return profilingReply(Object.assign({ at: startTime, initiated: opts.initiated, duration: startTime ? new Date().getTime() - startTime.getTime() : null }, data));
                                                                });

                                                            case 2:
                                                            case "end":
                                                                return _context3.stop();
                                                        }
                                                    }
                                                }, _callee3, this);
                                            }));
                                        }, opts.timeout);
                                    }
                                    _context4.next = 14;
                                    break;

                                case 11:
                                    _context4.prev = 11;
                                    _context4.t0 = _context4["catch"](3);
                                    return _context4.abrupt("return", reply({
                                        success: false,
                                        err: _context4.t0,
                                        uuid: this.uuid
                                    }));

                                case 14:
                                case "end":
                                    return _context4.stop();
                            }
                        }
                    }, _callee4, this, [[3, 11]]);
                }));
            });
            this.actionFeature.action('km:cpu:profiling:stop', this.stopProfiling.bind(this, function (data) {
                return profilingReply(Object.assign({ at: startTime, initiated: 'manual', duration: startTime ? new Date().getTime() - startTime.getTime() : null }, data));
            }));
        }
    }]);

    return ProfilingCPUAction;
}();

exports.default = ProfilingCPUAction;
//# sourceMappingURL=profilingCpu.js.map