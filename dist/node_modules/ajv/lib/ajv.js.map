{"version":3,"sources":["../../../../src/node_modules/ajv/lib/ajv.js"],"names":["compileSchema","require","resolve","Cache","SchemaObject","stableStringify","formats","rules","v5","util","async","co","module","exports","Ajv","prototype","compileAsync","compile","customKeyword","addKeyword","add","getKeyword","get","removeKeyword","remove","ValidationError","META_SCHEMA_ID","SCHEMA_URI_FORMAT","SCHEMA_URI_FORMAT_FUNC","str","test","META_IGNORE_OPTIONS","opts","self","_opts","copy","_schemas","_refs","_fragments","_formats","format","_cache","cache","_loadingSchemas","_compilations","RULES","validate","addSchema","addMetaSchema","validateSchema","getSchema","removeSchema","addFormat","errorsText","_addSchema","_compile","loopRequired","Infinity","transpile","setup","beautify","indent_size","errorDataPath","_errorDataPathProperty","_metaOpts","getMetaSchemaOptions","addInitialFormats","addDraft4MetaSchema","enable","meta","addInitialSchemas","schemaKeyRef","data","v","Error","schemaObj","valid","$async","errors","schema","_meta","undefined","key","_skipValidation","Array","isArray","i","length","normalizeId","id","checkUnique","skipValidation","throwOrLogError","$schema","defaultMeta","currentUriFormat","uri","message","console","error","keyRef","_getSchemaObj","_getSchemaFragment","ref","res","call","root","baseId","fragment","RegExp","_removeAllSchemas","clear","del","jsonStr","schemas","regex","shouldAddSchema","cached","addUsedSchema","willValidate","recursiveMeta","localRefs","ids","put","compiling","callValidate","currentOpts","refs","refVal","_validate","result","apply","arguments","options","separator","dataVar","text","e","dataPath","slice","name","metaSchema","optsSchemas","metaOpts"],"mappings":"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","file":"ajv.js","sourcesContent":["'use strict';\n\nvar compileSchema = require('./compile')\n  , resolve = require('./compile/resolve')\n  , Cache = require('./cache')\n  , SchemaObject = require('./compile/schema_obj')\n  , stableStringify = require('json-stable-stringify')\n  , formats = require('./compile/formats')\n  , rules = require('./compile/rules')\n  , v5 = require('./v5')\n  , util = require('./compile/util')\n  , async = require('./async')\n  , co = require('co');\n\nmodule.exports = Ajv;\n\nAjv.prototype.compileAsync = async.compile;\n\nvar customKeyword = require('./keyword');\nAjv.prototype.addKeyword = customKeyword.add;\nAjv.prototype.getKeyword = customKeyword.get;\nAjv.prototype.removeKeyword = customKeyword.remove;\nAjv.ValidationError = require('./compile/validation_error');\n\nvar META_SCHEMA_ID = 'http://json-schema.org/draft-04/schema';\nvar SCHEMA_URI_FORMAT = /^(?:(?:[a-z][a-z0-9+-.]*:)?\\/\\/)?[^\\s]*$/i;\nfunction SCHEMA_URI_FORMAT_FUNC(str) {\n  return SCHEMA_URI_FORMAT.test(str);\n}\n\nvar META_IGNORE_OPTIONS = [ 'removeAdditional', 'useDefaults', 'coerceTypes' ];\n\n/**\n * Creates validator instance.\n * Usage: `Ajv(opts)`\n * @param {Object} opts optional options\n * @return {Object} ajv instance\n */\nfunction Ajv(opts) {\n  if (!(this instanceof Ajv)) return new Ajv(opts);\n  var self = this;\n\n  opts = this._opts = util.copy(opts) || {};\n  this._schemas = {};\n  this._refs = {};\n  this._fragments = {};\n  this._formats = formats(opts.format);\n  this._cache = opts.cache || new Cache;\n  this._loadingSchemas = {};\n  this._compilations = [];\n  this.RULES = rules();\n\n  // this is done on purpose, so that methods are bound to the instance\n  // (without using bind) so that they can be used without the instance\n  this.validate = validate;\n  this.compile = compile;\n  this.addSchema = addSchema;\n  this.addMetaSchema = addMetaSchema;\n  this.validateSchema = validateSchema;\n  this.getSchema = getSchema;\n  this.removeSchema = removeSchema;\n  this.addFormat = addFormat;\n  this.errorsText = errorsText;\n\n  this._addSchema = _addSchema;\n  this._compile = _compile;\n\n  opts.loopRequired = opts.loopRequired || Infinity;\n  if (opts.async || opts.transpile) async.setup(opts);\n  if (opts.beautify === true) opts.beautify = { indent_size: 2 };\n  if (opts.errorDataPath == 'property') opts._errorDataPathProperty = true;\n  this._metaOpts = getMetaSchemaOptions();\n\n  if (opts.formats) addInitialFormats();\n  addDraft4MetaSchema();\n  if (opts.v5) v5.enable(this);\n  if (typeof opts.meta == 'object') addMetaSchema(opts.meta);\n  addInitialSchemas();\n\n\n  /**\n   * Validate data using schema\n   * Schema will be compiled and cached (using serialized JSON as key. [json-stable-stringify](https://github.com/substack/json-stable-stringify) is used to serialize.\n   * @param  {String|Object} schemaKeyRef key, ref or schema object\n   * @param  {Any} data to be validated\n   * @return {Boolean} validation result. Errors from the last validation will be available in `ajv.errors` (and also in compiled schema: `schema.errors`).\n   */\n  function validate(schemaKeyRef, data) {\n    var v;\n    if (typeof schemaKeyRef == 'string') {\n      v = getSchema(schemaKeyRef);\n      if (!v) throw new Error('no schema with key or ref \"' + schemaKeyRef + '\"');\n    } else {\n      var schemaObj = _addSchema(schemaKeyRef);\n      v = schemaObj.validate || _compile(schemaObj);\n    }\n\n    var valid = v(data);\n    if (v.$async === true)\n      return self._opts.async == '*' ? co(valid) : valid;\n    self.errors = v.errors;\n    return valid;\n  }\n\n\n  /**\n   * Create validating function for passed schema.\n   * @param  {Object} schema schema object\n   * @param  {Boolean} _meta true if schema is a meta-schema. Used internally to compile meta schemas of custom keywords.\n   * @return {Function} validating function\n   */\n  function compile(schema, _meta) {\n    var schemaObj = _addSchema(schema, undefined, _meta);\n    return schemaObj.validate || _compile(schemaObj);\n  }\n\n\n  /**\n   * Adds schema to the instance.\n   * @param {Object|Array} schema schema or array of schemas. If array is passed, `key` and other parameters will be ignored.\n   * @param {String} key Optional schema key. Can be passed to `validate` method instead of schema object or id/ref. One schema per instance can have empty `id` and `key`.\n   * @param {Boolean} _skipValidation true to skip schema validation. Used internally, option validateSchema should be used instead.\n   * @param {Boolean} _meta true if schema is a meta-schema. Used internally, addMetaSchema should be used instead.\n   */\n  function addSchema(schema, key, _skipValidation, _meta) {\n    if (Array.isArray(schema)){\n      for (var i=0; i<schema.length; i++) addSchema(schema[i], undefined, _skipValidation, _meta);\n      return;\n    }\n    // can key/id have # inside?\n    key = resolve.normalizeId(key || schema.id);\n    checkUnique(key);\n    self._schemas[key] = _addSchema(schema, _skipValidation, _meta, true);\n  }\n\n\n  /**\n   * Add schema that will be used to validate other schemas\n   * options in META_IGNORE_OPTIONS are alway set to false\n   * @param {Object} schema schema object\n   * @param {String} key optional schema key\n   * @param {Boolean} skipValidation true to skip schema validation, can be used to override validateSchema option for meta-schema\n   */\n  function addMetaSchema(schema, key, skipValidation) {\n    addSchema(schema, key, skipValidation, true);\n  }\n\n\n  /**\n   * Validate schema\n   * @param {Object} schema schema to validate\n   * @param {Boolean} throwOrLogError pass true to throw (or log) an error if invalid\n   * @return {Boolean} true if schema is valid\n   */\n  function validateSchema(schema, throwOrLogError) {\n    var $schema = schema.$schema || self._opts.defaultMeta || defaultMeta();\n    var currentUriFormat = self._formats.uri;\n    self._formats.uri = typeof currentUriFormat == 'function'\n                        ? SCHEMA_URI_FORMAT_FUNC\n                        : SCHEMA_URI_FORMAT;\n    var valid;\n    try { valid = validate($schema, schema); }\n    finally { self._formats.uri = currentUriFormat; }\n    if (!valid && throwOrLogError) {\n      var message = 'schema is invalid: ' + errorsText();\n      if (self._opts.validateSchema == 'log') console.error(message);\n      else throw new Error(message);\n    }\n    return valid;\n  }\n\n\n  function defaultMeta() {\n    var meta = self._opts.meta;\n    self._opts.defaultMeta = typeof meta == 'object'\n                              ? meta.id || meta\n                              : self._opts.v5\n                                ? v5.META_SCHEMA_ID\n                                : META_SCHEMA_ID;\n    return self._opts.defaultMeta;\n  }\n\n\n  /**\n   * Get compiled schema from the instance by `key` or `ref`.\n   * @param  {String} keyRef `key` that was passed to `addSchema` or full schema reference (`schema.id` or resolved id).\n   * @return {Function} schema validating function (with property `schema`).\n   */\n  function getSchema(keyRef) {\n    var schemaObj = _getSchemaObj(keyRef);\n    switch (typeof schemaObj) {\n      case 'object': return schemaObj.validate || _compile(schemaObj);\n      case 'string': return getSchema(schemaObj);\n      case 'undefined': return _getSchemaFragment(keyRef);\n    }\n  }\n\n\n  function _getSchemaFragment(ref) {\n    var res = resolve.schema.call(self, { schema: {} }, ref);\n    if (res) {\n      var schema = res.schema\n        , root = res.root\n        , baseId = res.baseId;\n      var v = compileSchema.call(self, schema, root, undefined, baseId);\n      self._fragments[ref] = new SchemaObject({\n        ref: ref,\n        fragment: true,\n        schema: schema,\n        root: root,\n        baseId: baseId,\n        validate: v\n      });\n      return v;\n    }\n  }\n\n\n  function _getSchemaObj(keyRef) {\n    keyRef = resolve.normalizeId(keyRef);\n    return self._schemas[keyRef] || self._refs[keyRef] || self._fragments[keyRef];\n  }\n\n\n  /**\n   * Remove cached schema(s).\n   * If no parameter is passed all schemas but meta-schemas are removed.\n   * If RegExp is passed all schemas with key/id matching pattern but meta-schemas are removed.\n   * Even if schema is referenced by other schemas it still can be removed as other schemas have local references.\n   * @param  {String|Object|RegExp} schemaKeyRef key, ref, pattern to match key/ref or schema object\n   */\n  function removeSchema(schemaKeyRef) {\n    if (schemaKeyRef instanceof RegExp) {\n      _removeAllSchemas(self._schemas, schemaKeyRef);\n      _removeAllSchemas(self._refs, schemaKeyRef);\n      return;\n    }\n    switch (typeof schemaKeyRef) {\n      case 'undefined':\n        _removeAllSchemas(self._schemas);\n        _removeAllSchemas(self._refs);\n        self._cache.clear();\n        return;\n      case 'string':\n        var schemaObj = _getSchemaObj(schemaKeyRef);\n        if (schemaObj) self._cache.del(schemaObj.jsonStr);\n        delete self._schemas[schemaKeyRef];\n        delete self._refs[schemaKeyRef];\n        return;\n      case 'object':\n        var jsonStr = stableStringify(schemaKeyRef);\n        self._cache.del(jsonStr);\n        var id = schemaKeyRef.id;\n        if (id) {\n          id = resolve.normalizeId(id);\n          delete self._schemas[id];\n          delete self._refs[id];\n        }\n    }\n  }\n\n\n  function _removeAllSchemas(schemas, regex) {\n    for (var keyRef in schemas) {\n      var schemaObj = schemas[keyRef];\n      if (!schemaObj.meta && (!regex || regex.test(keyRef))) {\n        self._cache.del(schemaObj.jsonStr);\n        delete schemas[keyRef];\n      }\n    }\n  }\n\n\n  function _addSchema(schema, skipValidation, meta, shouldAddSchema) {\n    if (typeof schema != 'object') throw new Error('schema should be object');\n    var jsonStr = stableStringify(schema);\n    var cached = self._cache.get(jsonStr);\n    if (cached) return cached;\n\n    shouldAddSchema = shouldAddSchema || self._opts.addUsedSchema !== false;\n\n    var id = resolve.normalizeId(schema.id);\n    if (id && shouldAddSchema) checkUnique(id);\n\n    var willValidate = self._opts.validateSchema !== false && !skipValidation;\n    var recursiveMeta;\n    if (willValidate && !(recursiveMeta = schema.id && schema.id == schema.$schema))\n      validateSchema(schema, true);\n\n    var localRefs = resolve.ids.call(self, schema);\n\n    var schemaObj = new SchemaObject({\n      id: id,\n      schema: schema,\n      localRefs: localRefs,\n      jsonStr: jsonStr,\n      meta: meta\n    });\n\n    if (id[0] != '#' && shouldAddSchema) self._refs[id] = schemaObj;\n    self._cache.put(jsonStr, schemaObj);\n\n    if (willValidate && recursiveMeta) validateSchema(schema, true);\n\n    return schemaObj;\n  }\n\n\n  function _compile(schemaObj, root) {\n    if (schemaObj.compiling) {\n      schemaObj.validate = callValidate;\n      callValidate.schema = schemaObj.schema;\n      callValidate.errors = null;\n      callValidate.root = root ? root : callValidate;\n      if (schemaObj.schema.$async === true)\n        callValidate.$async = true;\n      return callValidate;\n    }\n    schemaObj.compiling = true;\n\n    var currentOpts;\n    if (schemaObj.meta) {\n      currentOpts = self._opts;\n      self._opts = self._metaOpts;\n    }\n\n    var v;\n    try { v = compileSchema.call(self, schemaObj.schema, root, schemaObj.localRefs); }\n    finally {\n      schemaObj.compiling = false;\n      if (schemaObj.meta) self._opts = currentOpts;\n    }\n\n    schemaObj.validate = v;\n    schemaObj.refs = v.refs;\n    schemaObj.refVal = v.refVal;\n    schemaObj.root = v.root;\n    return v;\n\n\n    function callValidate() {\n      var _validate = schemaObj.validate;\n      var result = _validate.apply(null, arguments);\n      callValidate.errors = _validate.errors;\n      return result;\n    }\n  }\n\n\n  /**\n   * Convert array of error message objects to string\n   * @param  {Array<Object>} errors optional array of validation errors, if not passed errors from the instance are used.\n   * @param  {Object} options optional options with properties `separator` and `dataVar`.\n   * @return {String} human readable string with all errors descriptions\n   */\n  function errorsText(errors, options) {\n    errors = errors || self.errors;\n    if (!errors) return 'No errors';\n    options = options || {};\n    var separator = options.separator === undefined ? ', ' : options.separator;\n    var dataVar = options.dataVar === undefined ? 'data' : options.dataVar;\n\n    var text = '';\n    for (var i=0; i<errors.length; i++) {\n      var e = errors[i];\n      if (e) text += dataVar + e.dataPath + ' ' + e.message + separator;\n    }\n    return text.slice(0, -separator.length);\n  }\n\n\n  /**\n   * Add custom format\n   * @param {String} name format name\n   * @param {String|RegExp|Function} format string is converted to RegExp; function should return boolean (true when valid)\n   */\n  function addFormat(name, format) {\n    if (typeof format == 'string') format = new RegExp(format);\n    self._formats[name] = format;\n  }\n\n\n  function addDraft4MetaSchema() {\n    if (self._opts.meta !== false) {\n      var metaSchema = require('./refs/json-schema-draft-04.json');\n      addMetaSchema(metaSchema, META_SCHEMA_ID, true);\n      self._refs['http://json-schema.org/schema'] = META_SCHEMA_ID;\n    }\n  }\n\n\n  function addInitialSchemas() {\n    var optsSchemas = self._opts.schemas;\n    if (!optsSchemas) return;\n    if (Array.isArray(optsSchemas)) addSchema(optsSchemas);\n    else for (var key in optsSchemas) addSchema(optsSchemas[key], key);\n  }\n\n\n  function addInitialFormats() {\n    for (var name in self._opts.formats) {\n      var format = self._opts.formats[name];\n      addFormat(name, format);\n    }\n  }\n\n\n  function checkUnique(id) {\n    if (self._schemas[id] || self._refs[id])\n      throw new Error('schema with key or id \"' + id + '\" already exists');\n  }\n\n\n  function getMetaSchemaOptions() {\n    var metaOpts = util.copy(self._opts);\n    for (var i=0; i<META_IGNORE_OPTIONS.length; i++)\n      delete metaOpts[META_IGNORE_OPTIONS[i]];\n    return metaOpts;\n  }\n}\n"]}