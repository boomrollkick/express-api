{"version":3,"sources":["../../../../../src/node_modules/ajv/lib/compile/resolve.js"],"names":["url","require","equal","util","SchemaObject","module","exports","resolve","normalizeId","fullPath","getFullPath","resolveUrl","ids","resolveIds","inlineRef","schema","resolveSchema","compile","root","ref","refVal","_refs","call","_schemas","_opts","inlineRefs","validate","_compile","res","v","baseId","undefined","p","parse","refPath","_getFullPath","id","resolveRecursive","getJsonPointer","parsedRef","PREVENT_SCOPE_CHANGE","toHash","hash","slice","parts","split","i","length","part","unescapeFragment","$ref","SIMPLE_INLINED","limit","checkNoRef","countKeys","item","Array","isArray","key","count","Infinity","normalize","protocolSeparator","protocol","href","host","path","TRAILING_SLASH_HASH","replace","localRefs","_resolveIds","Error","escapeFragment"],"mappings":"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","file":"resolve.js","sourcesContent":["'use strict';\n\nvar url = require('url')\n  , equal = require('./equal')\n  , util = require('./util')\n  , SchemaObject = require('./schema_obj');\n\nmodule.exports = resolve;\n\nresolve.normalizeId = normalizeId;\nresolve.fullPath = getFullPath;\nresolve.url = resolveUrl;\nresolve.ids = resolveIds;\nresolve.inlineRef = inlineRef;\nresolve.schema = resolveSchema;\n\n/**\n * [resolve and compile the references ($ref)]\n * @this   Ajv\n * @param  {Function} compile reference to schema compilation funciton (localCompile)\n * @param  {Object} root object with information about the root schema for the current schema\n * @param  {String} ref reference to resolve\n * @return {Object|Function} schema object (if the schema can be inlined) or validation function\n */\nfunction resolve(compile, root, ref) {\n  /* jshint validthis: true */\n  var refVal = this._refs[ref];\n  if (typeof refVal == 'string') {\n    if (this._refs[refVal]) refVal = this._refs[refVal];\n    else return resolve.call(this, compile, root, refVal);\n  }\n\n  refVal = refVal || this._schemas[ref];\n  if (refVal instanceof SchemaObject) {\n    return inlineRef(refVal.schema, this._opts.inlineRefs)\n            ? refVal.schema\n            : refVal.validate || this._compile(refVal);\n  }\n\n  var res = resolveSchema.call(this, root, ref);\n  var schema, v, baseId;\n  if (res) {\n    schema = res.schema;\n    root = res.root;\n    baseId = res.baseId;\n  }\n\n  if (schema instanceof SchemaObject) {\n    v = schema.validate || compile.call(this, schema.schema, root, undefined, baseId);\n  } else if (schema) {\n    v = inlineRef(schema, this._opts.inlineRefs)\n        ? schema\n        : compile.call(this, schema, root, undefined, baseId);\n  }\n\n  return v;\n}\n\n\n/**\n * Resolve schema, its root and baseId\n * @this Ajv\n * @param  {Object} root root object with properties schema, refVal, refs\n * @param  {String} ref  reference to resolve\n * @return {Object} object with properties schema, root, baseId\n */\nfunction resolveSchema(root, ref) {\n  /* jshint validthis: true */\n  var p = url.parse(ref, false, true)\n    , refPath = _getFullPath(p)\n    , baseId = getFullPath(root.schema.id);\n  if (refPath !== baseId) {\n    var id = normalizeId(refPath);\n    var refVal = this._refs[id];\n    if (typeof refVal == 'string') {\n      return resolveRecursive.call(this, root, refVal, p);\n    } else if (refVal instanceof SchemaObject) {\n      if (!refVal.validate) this._compile(refVal);\n      root = refVal;\n    } else {\n      refVal = this._schemas[id];\n      if (refVal instanceof SchemaObject) {\n        if (!refVal.validate) this._compile(refVal);\n        if (id == normalizeId(ref))\n          return { schema: refVal, root: root, baseId: baseId };\n        root = refVal;\n      } else {\n        return;\n      }\n    }\n    if (!root.schema) return;\n    baseId = getFullPath(root.schema.id);\n  }\n  return getJsonPointer.call(this, p, baseId, root.schema, root);\n}\n\n\n/* @this Ajv */\nfunction resolveRecursive(root, ref, parsedRef) {\n  /* jshint validthis: true */\n  var res = resolveSchema.call(this, root, ref);\n  if (res) {\n    var schema = res.schema;\n    var baseId = res.baseId;\n    root = res.root;\n    if (schema.id) baseId = resolveUrl(baseId, schema.id);\n    return getJsonPointer.call(this, parsedRef, baseId, schema, root);\n  }\n}\n\n\nvar PREVENT_SCOPE_CHANGE = util.toHash(['properties', 'patternProperties', 'enum', 'dependencies', 'definitions']);\n/* @this Ajv */\nfunction getJsonPointer(parsedRef, baseId, schema, root) {\n  /* jshint validthis: true */\n  parsedRef.hash = parsedRef.hash || '';\n  if (parsedRef.hash.slice(0,2) != '#/') return;\n  var parts = parsedRef.hash.split('/');\n\n  for (var i = 1; i < parts.length; i++) {\n    var part = parts[i];\n    if (part) {\n      part = util.unescapeFragment(part);\n      schema = schema[part];\n      if (!schema) break;\n      if (schema.id && !PREVENT_SCOPE_CHANGE[part]) baseId = resolveUrl(baseId, schema.id);\n      if (schema.$ref) {\n        var $ref = resolveUrl(baseId, schema.$ref);\n        var res = resolveSchema.call(this, root, $ref);\n        if (res) {\n          schema = res.schema;\n          root = res.root;\n          baseId = res.baseId;\n        }\n      }\n    }\n  }\n  if (schema && schema != root.schema)\n    return { schema: schema, root: root, baseId: baseId };\n}\n\n\nvar SIMPLE_INLINED = util.toHash([\n  'type', 'format', 'pattern',\n  'maxLength', 'minLength',\n  'maxProperties', 'minProperties',\n  'maxItems', 'minItems',\n  'maximum', 'minimum',\n  'uniqueItems', 'multipleOf',\n  'required', 'enum'\n]);\nfunction inlineRef(schema, limit) {\n  if (limit === false) return false;\n  if (limit === undefined || limit === true) return checkNoRef(schema);\n  else if (limit) return countKeys(schema) <= limit;\n}\n\n\nfunction checkNoRef(schema) {\n  var item;\n  if (Array.isArray(schema)) {\n    for (var i=0; i<schema.length; i++) {\n      item = schema[i];\n      if (typeof item == 'object' && !checkNoRef(item)) return false;\n    }\n  } else {\n    for (var key in schema) {\n      if (key == '$ref') return false;\n      item = schema[key];\n      if (typeof item == 'object' && !checkNoRef(item)) return false;\n    }\n  }\n  return true;\n}\n\n\nfunction countKeys(schema) {\n  var count = 0, item;\n  if (Array.isArray(schema)) {\n    for (var i=0; i<schema.length; i++) {\n      item = schema[i];\n      if (typeof item == 'object') count += countKeys(item);\n      if (count == Infinity) return Infinity;\n    }\n  } else {\n    for (var key in schema) {\n      if (key == '$ref') return Infinity;\n      if (SIMPLE_INLINED[key]) {\n        count++;\n      } else {\n        item = schema[key];\n        if (typeof item == 'object') count += countKeys(item) + 1;\n        if (count == Infinity) return Infinity;\n      }\n    }\n  }\n  return count;\n}\n\n\nfunction getFullPath(id, normalize) {\n  if (normalize !== false) id = normalizeId(id);\n  var p = url.parse(id, false, true);\n  return _getFullPath(p);\n}\n\n\nfunction _getFullPath(p) {\n  var protocolSeparator = p.protocol || p.href.slice(0,2) == '//' ? '//' : '';\n  return (p.protocol||'') + protocolSeparator + (p.host||'') + (p.path||'')  + '#';\n}\n\n\nvar TRAILING_SLASH_HASH = /#\\/?$/;\nfunction normalizeId(id) {\n  return id ? id.replace(TRAILING_SLASH_HASH, '') : '';\n}\n\n\nfunction resolveUrl(baseId, id) {\n  id = normalizeId(id);\n  return url.resolve(baseId, id);\n}\n\n\n/* @this Ajv */\nfunction resolveIds(schema) {\n  /* eslint no-shadow: 0 */\n  /* jshint validthis: true */\n  var id = normalizeId(schema.id);\n  var localRefs = {};\n  _resolveIds.call(this, schema, getFullPath(id, false), id);\n  return localRefs;\n\n  /* @this Ajv */\n  function _resolveIds(schema, fullPath, baseId) {\n    /* jshint validthis: true */\n    if (Array.isArray(schema)) {\n      for (var i=0; i<schema.length; i++)\n        _resolveIds.call(this, schema[i], fullPath+'/'+i, baseId);\n    } else if (schema && typeof schema == 'object') {\n      if (typeof schema.id == 'string') {\n        var id = baseId = baseId\n                          ? url.resolve(baseId, schema.id)\n                          : schema.id;\n        id = normalizeId(id);\n\n        var refVal = this._refs[id];\n        if (typeof refVal == 'string') refVal = this._refs[refVal];\n        if (refVal && refVal.schema) {\n          if (!equal(schema, refVal.schema))\n            throw new Error('id \"' + id + '\" resolves to more than one schema');\n        } else if (id != normalizeId(fullPath)) {\n          if (id[0] == '#') {\n            if (localRefs[id] && !equal(schema, localRefs[id]))\n              throw new Error('id \"' + id + '\" resolves to more than one schema');\n            localRefs[id] = schema;\n          } else {\n            this._refs[id] = fullPath;\n          }\n        }\n      }\n      for (var key in schema)\n        _resolveIds.call(this, schema[key], fullPath+'/'+util.escapeFragment(key), baseId);\n    }\n  }\n}\n"]}