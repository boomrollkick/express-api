{"version":3,"sources":["../../../src/node_modules/async/waterfall.js"],"names":["Object","defineProperty","exports","value","default","tasks","callback","_once2","_noop2","_isArray2","Error","length","taskIndex","nextTask","args","task","_wrapAsync2","push","_onlyOnce2","next","apply","err","arguments","_slice2","_isArray","require","_interopRequireDefault","_noop","_once","_slice","_onlyOnce","_wrapAsync","obj","__esModule","module"],"mappings":"AAAA;;AAEAA,OAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AACzCC,WAAO;AADkC,CAA7C;;AAIAD,QAAQE,OAAR,GAAkB,UAAUC,KAAV,EAAiBC,QAAjB,EAA2B;AACzCA,eAAW,CAAC,GAAGC,OAAOH,OAAX,EAAoBE,YAAYE,OAAOJ,OAAvC,CAAX;AACA,QAAI,CAAC,CAAC,GAAGK,UAAUL,OAAd,EAAuBC,KAAvB,CAAL,EAAoC,OAAOC,SAAS,IAAII,KAAJ,CAAU,2DAAV,CAAT,CAAP;AACpC,QAAI,CAACL,MAAMM,MAAX,EAAmB,OAAOL,UAAP;AACnB,QAAIM,YAAY,CAAhB;;AAEA,aAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACpB,YAAIC,OAAO,CAAC,GAAGC,YAAYZ,OAAhB,EAAyBC,MAAMO,WAAN,CAAzB,CAAX;AACAE,aAAKG,IAAL,CAAU,CAAC,GAAGC,WAAWd,OAAf,EAAwBe,IAAxB,CAAV;AACAJ,aAAKK,KAAL,CAAW,IAAX,EAAiBN,IAAjB;AACH;;AAED,aAASK,IAAT,CAAcE,GAAd,CAAkB,aAAlB,EAAiC;AAC7B,YAAIA,OAAOT,cAAcP,MAAMM,MAA/B,EAAuC;AACnC,mBAAOL,SAASc,KAAT,CAAe,IAAf,EAAqBE,SAArB,CAAP;AACH;AACDT,iBAAS,CAAC,GAAGU,QAAQnB,OAAZ,EAAqBkB,SAArB,EAAgC,CAAhC,CAAT;AACH;;AAEDT,aAAS,EAAT;AACH,CApBD;;AAsBA,IAAIW,WAAWC,QAAQ,gBAAR,CAAf;;AAEA,IAAIhB,YAAYiB,uBAAuBF,QAAvB,CAAhB;;AAEA,IAAIG,QAAQF,QAAQ,aAAR,CAAZ;;AAEA,IAAIjB,SAASkB,uBAAuBC,KAAvB,CAAb;;AAEA,IAAIC,QAAQH,QAAQ,iBAAR,CAAZ;;AAEA,IAAIlB,SAASmB,uBAAuBE,KAAvB,CAAb;;AAEA,IAAIC,SAASJ,QAAQ,kBAAR,CAAb;;AAEA,IAAIF,UAAUG,uBAAuBG,MAAvB,CAAd;;AAEA,IAAIC,YAAYL,QAAQ,qBAAR,CAAhB;;AAEA,IAAIP,aAAaQ,uBAAuBI,SAAvB,CAAjB;;AAEA,IAAIC,aAAaN,QAAQ,sBAAR,CAAjB;;AAEA,IAAIT,cAAcU,uBAAuBK,UAAvB,CAAlB;;AAEA,SAASL,sBAAT,CAAgCM,GAAhC,EAAqC;AAAE,WAAOA,OAAOA,IAAIC,UAAX,GAAwBD,GAAxB,GAA8B,EAAE5B,SAAS4B,GAAX,EAArC;AAAwD;;AAE/FE,OAAOhC,OAAP,GAAiBA,QAAQ,SAAR,CAAjB;;AAEA","file":"waterfall.js","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nexports.default = function (tasks, callback) {\n    callback = (0, _once2.default)(callback || _noop2.default);\n    if (!(0, _isArray2.default)(tasks)) return callback(new Error('First argument to waterfall must be an array of functions'));\n    if (!tasks.length) return callback();\n    var taskIndex = 0;\n\n    function nextTask(args) {\n        var task = (0, _wrapAsync2.default)(tasks[taskIndex++]);\n        args.push((0, _onlyOnce2.default)(next));\n        task.apply(null, args);\n    }\n\n    function next(err /*, ...args*/) {\n        if (err || taskIndex === tasks.length) {\n            return callback.apply(null, arguments);\n        }\n        nextTask((0, _slice2.default)(arguments, 1));\n    }\n\n    nextTask([]);\n};\n\nvar _isArray = require('lodash/isArray');\n\nvar _isArray2 = _interopRequireDefault(_isArray);\n\nvar _noop = require('lodash/noop');\n\nvar _noop2 = _interopRequireDefault(_noop);\n\nvar _once = require('./internal/once');\n\nvar _once2 = _interopRequireDefault(_once);\n\nvar _slice = require('./internal/slice');\n\nvar _slice2 = _interopRequireDefault(_slice);\n\nvar _onlyOnce = require('./internal/onlyOnce');\n\nvar _onlyOnce2 = _interopRequireDefault(_onlyOnce);\n\nvar _wrapAsync = require('./internal/wrapAsync');\n\nvar _wrapAsync2 = _interopRequireDefault(_wrapAsync);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nmodule.exports = exports['default'];\n\n/**\n * Runs the `tasks` array of functions in series, each passing their results to\n * the next in the array. However, if any of the `tasks` pass an error to their\n * own callback, the next function is not executed, and the main `callback` is\n * immediately called with the error.\n *\n * @name waterfall\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array} tasks - An array of [async functions]{@link AsyncFunction}\n * to run.\n * Each function should complete with any number of `result` values.\n * The `result` values will be passed as arguments, in order, to the next task.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed. This will be passed the results of the last task's\n * callback. Invoked with (err, [results]).\n * @returns undefined\n * @example\n *\n * async.waterfall([\n *     function(callback) {\n *         callback(null, 'one', 'two');\n *     },\n *     function(arg1, arg2, callback) {\n *         // arg1 now equals 'one' and arg2 now equals 'two'\n *         callback(null, 'three');\n *     },\n *     function(arg1, callback) {\n *         // arg1 now equals 'three'\n *         callback(null, 'done');\n *     }\n * ], function (err, result) {\n *     // result now equals 'done'\n * });\n *\n * // Or, with named functions:\n * async.waterfall([\n *     myFirstFunction,\n *     mySecondFunction,\n *     myLastFunction,\n * ], function (err, result) {\n *     // result now equals 'done'\n * });\n * function myFirstFunction(callback) {\n *     callback(null, 'one', 'two');\n * }\n * function mySecondFunction(arg1, arg2, callback) {\n *     // arg1 now equals 'one' and arg2 now equals 'two'\n *     callback(null, 'three');\n * }\n * function myLastFunction(arg1, callback) {\n *     // arg1 now equals 'three'\n *     callback(null, 'done');\n * }\n */"]}