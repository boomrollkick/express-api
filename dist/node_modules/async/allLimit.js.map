{"version":3,"sources":["../../../src/node_modules/async/allLimit.js"],"names":["Object","defineProperty","exports","value","_createTester","require","_createTester2","_interopRequireDefault","_doParallelLimit","_doParallelLimit2","_notId","_notId2","obj","__esModule","default","module"],"mappings":"AAAA;;AAEAA,OAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,SAAO;AADoC,CAA7C;;AAIA,IAAIC,gBAAgBC,QAAQ,yBAAR,CAApB;;AAEA,IAAIC,iBAAiBC,uBAAuBH,aAAvB,CAArB;;AAEA,IAAII,mBAAmBH,QAAQ,4BAAR,CAAvB;;AAEA,IAAII,oBAAoBF,uBAAuBC,gBAAvB,CAAxB;;AAEA,IAAIE,SAASL,QAAQ,kBAAR,CAAb;;AAEA,IAAIM,UAAUJ,uBAAuBG,MAAvB,CAAd;;AAEA,SAASH,sBAAT,CAAgCK,GAAhC,EAAqC;AAAE,SAAOA,OAAOA,IAAIC,UAAX,GAAwBD,GAAxB,GAA8B,EAAEE,SAASF,GAAX,EAArC;AAAwD;;AAE/F;;;;;;;;;;;;;;;;;;;;AAoBAV,QAAQY,OAAR,GAAkB,CAAC,GAAGL,kBAAkBK,OAAtB,EAA+B,CAAC,GAAGR,eAAeQ,OAAnB,EAA4BH,QAAQG,OAApC,EAA6CH,QAAQG,OAArD,CAA/B,CAAlB;AACAC,OAAOb,OAAP,GAAiBA,QAAQ,SAAR,CAAjB","file":"allLimit.js","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createTester = require('./internal/createTester');\n\nvar _createTester2 = _interopRequireDefault(_createTester);\n\nvar _doParallelLimit = require('./internal/doParallelLimit');\n\nvar _doParallelLimit2 = _interopRequireDefault(_doParallelLimit);\n\nvar _notId = require('./internal/notId');\n\nvar _notId2 = _interopRequireDefault(_notId);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * The same as [`every`]{@link module:Collections.every} but runs a maximum of `limit` async operations at a time.\n *\n * @name everyLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.every]{@link module:Collections.every}\n * @alias allLimit\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collection in parallel.\n * The iteratee must complete with a boolean result value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result will be either `true` or `false`\n * depending on the values of the async tests. Invoked with (err, result).\n */\nexports.default = (0, _doParallelLimit2.default)((0, _createTester2.default)(_notId2.default, _notId2.default));\nmodule.exports = exports['default'];"]}