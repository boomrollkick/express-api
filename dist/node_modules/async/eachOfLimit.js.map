{"version":3,"sources":["../../../src/node_modules/async/eachOfLimit.js"],"names":["Object","defineProperty","exports","value","default","eachOfLimit","_eachOfLimit2","require","_eachOfLimit3","_interopRequireDefault","_wrapAsync","_wrapAsync2","obj","__esModule","coll","limit","iteratee","callback","module"],"mappings":"AAAA;;AAEAA,OAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,SAAO;AADoC,CAA7C;AAGAD,QAAQE,OAAR,GAAkBC,WAAlB;;AAEA,IAAIC,gBAAgBC,QAAQ,wBAAR,CAApB;;AAEA,IAAIC,gBAAgBC,uBAAuBH,aAAvB,CAApB;;AAEA,IAAII,aAAaH,QAAQ,sBAAR,CAAjB;;AAEA,IAAII,cAAcF,uBAAuBC,UAAvB,CAAlB;;AAEA,SAASD,sBAAT,CAAgCG,GAAhC,EAAqC;AAAE,SAAOA,OAAOA,IAAIC,UAAX,GAAwBD,GAAxB,GAA8B,EAAER,SAASQ,GAAX,EAArC;AAAwD;;AAE/F;;;;;;;;;;;;;;;;;;;;AAoBA,SAASP,WAAT,CAAqBS,IAArB,EAA2BC,KAA3B,EAAkCC,QAAlC,EAA4CC,QAA5C,EAAsD;AACpD,GAAC,GAAGT,cAAcJ,OAAlB,EAA2BW,KAA3B,EAAkCD,IAAlC,EAAwC,CAAC,GAAGH,YAAYP,OAAhB,EAAyBY,QAAzB,CAAxC,EAA4EC,QAA5E;AACD;AACDC,OAAOhB,OAAP,GAAiBA,QAAQ,SAAR,CAAjB","file":"eachOfLimit.js","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = eachOfLimit;\n\nvar _eachOfLimit2 = require('./internal/eachOfLimit');\n\nvar _eachOfLimit3 = _interopRequireDefault(_eachOfLimit2);\n\nvar _wrapAsync = require('./internal/wrapAsync');\n\nvar _wrapAsync2 = _interopRequireDefault(_wrapAsync);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * The same as [`eachOf`]{@link module:Collections.eachOf} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name eachOfLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.eachOf]{@link module:Collections.eachOf}\n * @alias forEachOfLimit\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each\n * item in `coll`. The `key` is the item's key, or index in the case of an\n * array.\n * Invoked with (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n */\nfunction eachOfLimit(coll, limit, iteratee, callback) {\n  (0, _eachOfLimit3.default)(limit)(coll, (0, _wrapAsync2.default)(iteratee), callback);\n}\nmodule.exports = exports['default'];"]}