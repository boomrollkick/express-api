{"version":3,"sources":["../../../src/node_modules/async/timeout.js"],"names":["Object","defineProperty","exports","value","default","timeout","_initialParams","require","_initialParams2","_interopRequireDefault","_wrapAsync","_wrapAsync2","obj","__esModule","asyncFn","milliseconds","info","fn","args","callback","timedOut","timer","timeoutCallback","name","error","Error","code","push","apply","arguments","clearTimeout","setTimeout","module"],"mappings":"AAAA;;AAEAA,OAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AACzCC,WAAO;AADkC,CAA7C;AAGAD,QAAQE,OAAR,GAAkBC,OAAlB;;AAEA,IAAIC,iBAAiBC,QAAQ,0BAAR,CAArB;;AAEA,IAAIC,kBAAkBC,uBAAuBH,cAAvB,CAAtB;;AAEA,IAAII,aAAaH,QAAQ,sBAAR,CAAjB;;AAEA,IAAII,cAAcF,uBAAuBC,UAAvB,CAAlB;;AAEA,SAASD,sBAAT,CAAgCG,GAAhC,EAAqC;AAAE,WAAOA,OAAOA,IAAIC,UAAX,GAAwBD,GAAxB,GAA8B,EAAER,SAASQ,GAAX,EAArC;AAAwD;;AAE/F;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCA,SAASP,OAAT,CAAiBS,OAAjB,EAA0BC,YAA1B,EAAwCC,IAAxC,EAA8C;AAC1C,QAAIC,KAAK,CAAC,GAAGN,YAAYP,OAAhB,EAAyBU,OAAzB,CAAT;;AAEA,WAAO,CAAC,GAAGN,gBAAgBJ,OAApB,EAA6B,UAAUc,IAAV,EAAgBC,QAAhB,EAA0B;AAC1D,YAAIC,WAAW,KAAf;AACA,YAAIC,KAAJ;;AAEA,iBAASC,eAAT,GAA2B;AACvB,gBAAIC,OAAOT,QAAQS,IAAR,IAAgB,WAA3B;AACA,gBAAIC,QAAQ,IAAIC,KAAJ,CAAU,wBAAwBF,IAAxB,GAA+B,cAAzC,CAAZ;AACAC,kBAAME,IAAN,GAAa,WAAb;AACA,gBAAIV,IAAJ,EAAU;AACNQ,sBAAMR,IAAN,GAAaA,IAAb;AACH;AACDI,uBAAW,IAAX;AACAD,qBAASK,KAAT;AACH;;AAEDN,aAAKS,IAAL,CAAU,YAAY;AAClB,gBAAI,CAACP,QAAL,EAAe;AACXD,yBAASS,KAAT,CAAe,IAAf,EAAqBC,SAArB;AACAC,6BAAaT,KAAb;AACH;AACJ,SALD;;AAOA;AACAA,gBAAQU,WAAWT,eAAX,EAA4BP,YAA5B,CAAR;AACAE,WAAGW,KAAH,CAAS,IAAT,EAAeV,IAAf;AACH,KAzBM,CAAP;AA0BH;AACDc,OAAO9B,OAAP,GAAiBA,QAAQ,SAAR,CAAjB","file":"timeout.js","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = timeout;\n\nvar _initialParams = require('./internal/initialParams');\n\nvar _initialParams2 = _interopRequireDefault(_initialParams);\n\nvar _wrapAsync = require('./internal/wrapAsync');\n\nvar _wrapAsync2 = _interopRequireDefault(_wrapAsync);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Sets a time limit on an asynchronous function. If the function does not call\n * its callback within the specified milliseconds, it will be called with a\n * timeout error. The code property for the error object will be `'ETIMEDOUT'`.\n *\n * @name timeout\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} asyncFn - The async function to limit in time.\n * @param {number} milliseconds - The specified time limit.\n * @param {*} [info] - Any variable you want attached (`string`, `object`, etc)\n * to timeout Error for more information..\n * @returns {AsyncFunction} Returns a wrapped function that can be used with any\n * of the control flow functions.\n * Invoke this function with the same parameters as you would `asyncFunc`.\n * @example\n *\n * function myFunction(foo, callback) {\n *     doAsyncTask(foo, function(err, data) {\n *         // handle errors\n *         if (err) return callback(err);\n *\n *         // do some stuff ...\n *\n *         // return processed data\n *         return callback(null, data);\n *     });\n * }\n *\n * var wrapped = async.timeout(myFunction, 1000);\n *\n * // call `wrapped` as you would `myFunction`\n * wrapped({ bar: 'bar' }, function(err, data) {\n *     // if `myFunction` takes < 1000 ms to execute, `err`\n *     // and `data` will have their expected values\n *\n *     // else `err` will be an Error with the code 'ETIMEDOUT'\n * });\n */\nfunction timeout(asyncFn, milliseconds, info) {\n    var fn = (0, _wrapAsync2.default)(asyncFn);\n\n    return (0, _initialParams2.default)(function (args, callback) {\n        var timedOut = false;\n        var timer;\n\n        function timeoutCallback() {\n            var name = asyncFn.name || 'anonymous';\n            var error = new Error('Callback function \"' + name + '\" timed out.');\n            error.code = 'ETIMEDOUT';\n            if (info) {\n                error.info = info;\n            }\n            timedOut = true;\n            callback(error);\n        }\n\n        args.push(function () {\n            if (!timedOut) {\n                callback.apply(null, arguments);\n                clearTimeout(timer);\n            }\n        });\n\n        // setup timer and call original function\n        timer = setTimeout(timeoutCallback, milliseconds);\n        fn.apply(null, args);\n    });\n}\nmodule.exports = exports['default'];"]}