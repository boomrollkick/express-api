{"version":3,"sources":["../../../src/node_modules/async/retryable.js"],"names":["Object","defineProperty","exports","value","default","opts","task","_task","_wrapAsync2","_initialParams2","args","callback","taskFn","cb","apply","concat","_retry2","_retry","require","_interopRequireDefault","_initialParams","_wrapAsync","obj","__esModule","module"],"mappings":"AAAA;;AAEAA,OAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AACzCC,WAAO;AADkC,CAA7C;;AAIAD,QAAQE,OAAR,GAAkB,UAAUC,IAAV,EAAgBC,IAAhB,EAAsB;AACpC,QAAI,CAACA,IAAL,EAAW;AACPA,eAAOD,IAAP;AACAA,eAAO,IAAP;AACH;AACD,QAAIE,QAAQ,CAAC,GAAGC,YAAYJ,OAAhB,EAAyBE,IAAzB,CAAZ;AACA,WAAO,CAAC,GAAGG,gBAAgBL,OAApB,EAA6B,UAAUM,IAAV,EAAgBC,QAAhB,EAA0B;AAC1D,iBAASC,MAAT,CAAgBC,EAAhB,EAAoB;AAChBN,kBAAMO,KAAN,CAAY,IAAZ,EAAkBJ,KAAKK,MAAL,CAAYF,EAAZ,CAAlB;AACH;;AAED,YAAIR,IAAJ,EAAU,CAAC,GAAGW,QAAQZ,OAAZ,EAAqBC,IAArB,EAA2BO,MAA3B,EAAmCD,QAAnC,EAAV,KAA4D,CAAC,GAAGK,QAAQZ,OAAZ,EAAqBQ,MAArB,EAA6BD,QAA7B;AAC/D,KANM,CAAP;AAOH,CAbD;;AAeA,IAAIM,SAASC,QAAQ,SAAR,CAAb;;AAEA,IAAIF,UAAUG,uBAAuBF,MAAvB,CAAd;;AAEA,IAAIG,iBAAiBF,QAAQ,0BAAR,CAArB;;AAEA,IAAIT,kBAAkBU,uBAAuBC,cAAvB,CAAtB;;AAEA,IAAIC,aAAaH,QAAQ,sBAAR,CAAjB;;AAEA,IAAIV,cAAcW,uBAAuBE,UAAvB,CAAlB;;AAEA,SAASF,sBAAT,CAAgCG,GAAhC,EAAqC;AAAE,WAAOA,OAAOA,IAAIC,UAAX,GAAwBD,GAAxB,GAA8B,EAAElB,SAASkB,GAAX,EAArC;AAAwD;;AAE/FE,OAAOtB,OAAP,GAAiBA,QAAQ,SAAR,CAAjB;;AAEA","file":"retryable.js","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nexports.default = function (opts, task) {\n    if (!task) {\n        task = opts;\n        opts = null;\n    }\n    var _task = (0, _wrapAsync2.default)(task);\n    return (0, _initialParams2.default)(function (args, callback) {\n        function taskFn(cb) {\n            _task.apply(null, args.concat(cb));\n        }\n\n        if (opts) (0, _retry2.default)(opts, taskFn, callback);else (0, _retry2.default)(taskFn, callback);\n    });\n};\n\nvar _retry = require('./retry');\n\nvar _retry2 = _interopRequireDefault(_retry);\n\nvar _initialParams = require('./internal/initialParams');\n\nvar _initialParams2 = _interopRequireDefault(_initialParams);\n\nvar _wrapAsync = require('./internal/wrapAsync');\n\nvar _wrapAsync2 = _interopRequireDefault(_wrapAsync);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nmodule.exports = exports['default'];\n\n/**\n * A close relative of [`retry`]{@link module:ControlFlow.retry}.  This method\n * wraps a task and makes it retryable, rather than immediately calling it\n * with retries.\n *\n * @name retryable\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.retry]{@link module:ControlFlow.retry}\n * @category Control Flow\n * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - optional\n * options, exactly the same as from `retry`\n * @param {AsyncFunction} task - the asynchronous function to wrap.\n * This function will be passed any arguments passed to the returned wrapper.\n * Invoked with (...args, callback).\n * @returns {AsyncFunction} The wrapped function, which when invoked, will\n * retry on an error, based on the parameters specified in `opts`.\n * This function will accept the same parameters as `task`.\n * @example\n *\n * async.auto({\n *     dep1: async.retryable(3, getFromFlakyService),\n *     process: [\"dep1\", async.retryable(3, function (results, cb) {\n *         maybeProcessData(results.dep1, cb);\n *     })]\n * }, callback);\n */"]}