{"version":3,"sources":["../../../../src/node_modules/async-listener/test/core-asynclistener-only-add.simple.js"],"names":["process","addAsyncListener","require","assert","net","fs","actualAsync","expectAsync","on","console","log","equal","onAsync","b","setInterval","clearInterval","c","setTimeout","nextTick","setImmediate","interval","i","stat","server","createServer","listen","close"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,IAAI,CAACA,QAAQC,gBAAb,EAA+BC,QAAQ,aAAR;;AAE/B,IAAIC,SAASD,QAAQ,QAAR,CAAb;AACA,IAAIE,MAAMF,QAAQ,KAAR,CAAV;AACA,IAAIG,KAAKH,QAAQ,IAAR,CAAT;;AAEA,IAAII,cAAc,CAAlB;AACA,IAAIC,cAAc,CAAlB;;AAGAP,QAAQQ,EAAR,CAAW,MAAX,EAAmB,YAAW;AAC5BC,UAAQC,GAAR,CAAY,UAAZ,EAAwBH,WAAxB;AACAE,UAAQC,GAAR,CAAY,UAAZ,EAAwBJ,WAAxB;AACAH,SAAOQ,KAAP,CAAaJ,WAAb,EAA0BD,WAA1B;AACAG,UAAQC,GAAR,CAAY,IAAZ;AACD,CALD;;AAQA;;AAEA,SAASE,OAAT,GAAmB;AACjBN;AACD;;AAGDN,QAAQC,gBAAR,CAAyBW,OAAzB;;AAGA;AACA,IAAIC,IAAIC,YAAY,YAAW;AAC7BC,gBAAcF,CAAd;AACD,CAFO,CAAR;AAGAN;;AAEA,IAAIS,IAAIF,YAAY,YAAW;AAC7BC,gBAAcC,CAAd;AACD,CAFO,CAAR;AAGAT;;AAEAU,WAAW,YAAW,CAAG,CAAzB;AACAV;;AAEAU,WAAW,YAAW,CAAG,CAAzB;AACAV;;AAEAP,QAAQkB,QAAR,CAAiB,YAAW,CAAG,CAA/B;AACAX;;AAEAP,QAAQkB,QAAR,CAAiB,YAAW,CAAG,CAA/B;AACAX;;AAEAY,aAAa,YAAW,CAAG,CAA3B;AACAZ;;AAEAY,aAAa,YAAW,CAAG,CAA3B;AACAZ;;AAEAU,WAAW,YAAW,CAAG,CAAzB,EAA2B,GAA3B;AACAV;;AAEAU,WAAW,YAAW,CAAG,CAAzB,EAA2B,GAA3B;AACAV;;AAGA;AACA,IAAIa,WAAW,CAAf;;AAEApB,QAAQkB,QAAR,CAAiB,YAAW;AAC1BD,aAAW,YAAW;AACpBE,iBAAa,YAAW;AACtB,UAAIE,IAAIP,YAAY,YAAW;AAC7B,YAAI,EAAEM,QAAF,IAAc,CAAlB,EACEL,cAAcM,CAAd;AACH,OAHO,CAAR;AAIAd;AACD,KAND;AAOAA;AACAP,YAAQkB,QAAR,CAAiB,YAAW;AAC1BC,mBAAa,YAAW;AACtBF,mBAAW,YAAW,CAAG,CAAzB,EAA2B,GAA3B;AACAV;AACD,OAHD;AAIAA;AACD,KAND;AAOAA;AACD,GAjBD;AAkBAA;AACD,CApBD;AAqBAA;;AAGA;AACAF,GAAGiB,IAAH,CAAQ,kBAAR,EAA4B,YAAW,CAAG,CAA1C;AACAf;;AAEAY,aAAa,YAAW;AACtBd,KAAGiB,IAAH,CAAQ,cAAR,EAAwB,YAAW,CAAG,CAAtC;AACAf;AACD,CAHD;AAIAA;;AAGA;AACA,IAAIgB,SAASnB,IAAIoB,YAAJ,CAAiB,YAAW,CAAG,CAA/B,CAAb;AACAjB;;AAEAgB,OAAOE,MAAP,CAAc,IAAd,EAAoB,YAAW;AAC7BF,SAAOG,KAAP;AACAnB;AACD,CAHD;AAIAA","file":"core-asynclistener-only-add.simple.js","sourcesContent":["// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\nif (!process.addAsyncListener) require('../index.js');\n\nvar assert = require('assert');\nvar net = require('net');\nvar fs = require('fs');\n\nvar actualAsync = 0;\nvar expectAsync = 0;\n\n\nprocess.on('exit', function() {\n  console.log('expected', expectAsync);\n  console.log('actual  ', actualAsync);\n  assert.equal(expectAsync, actualAsync);\n  console.log('ok');\n});\n\n\n// --- Begin Testing --- //\n\nfunction onAsync() {\n  actualAsync++;\n}\n\n\nprocess.addAsyncListener(onAsync);\n\n\n// Test listeners side-by-side\nvar b = setInterval(function() {\n  clearInterval(b);\n});\nexpectAsync++;\n\nvar c = setInterval(function() {\n  clearInterval(c);\n});\nexpectAsync++;\n\nsetTimeout(function() { });\nexpectAsync++;\n\nsetTimeout(function() { });\nexpectAsync++;\n\nprocess.nextTick(function() { });\nexpectAsync++;\n\nprocess.nextTick(function() { });\nexpectAsync++;\n\nsetImmediate(function() { });\nexpectAsync++;\n\nsetImmediate(function() { });\nexpectAsync++;\n\nsetTimeout(function() { }, 100);\nexpectAsync++;\n\nsetTimeout(function() { }, 100);\nexpectAsync++;\n\n\n// Async listeners should propagate with nested callbacks\nvar interval = 3;\n\nprocess.nextTick(function() {\n  setTimeout(function() {\n    setImmediate(function() {\n      var i = setInterval(function() {\n        if (--interval <= 0)\n          clearInterval(i);\n      });\n      expectAsync++;\n    });\n    expectAsync++;\n    process.nextTick(function() {\n      setImmediate(function() {\n        setTimeout(function() { }, 200);\n        expectAsync++;\n      });\n      expectAsync++;\n    });\n    expectAsync++;\n  });\n  expectAsync++;\n});\nexpectAsync++;\n\n\n// Test callbacks from fs I/O\nfs.stat('something random', function() { });\nexpectAsync++;\n\nsetImmediate(function() {\n  fs.stat('random again', function() { });\n  expectAsync++;\n});\nexpectAsync++;\n\n\n// Test net I/O\nvar server = net.createServer(function() { });\nexpectAsync++;\n\nserver.listen(8080, function() {\n  server.close();\n  expectAsync++;\n});\nexpectAsync++;\n"]}