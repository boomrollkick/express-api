{"version":3,"sources":["../../../../src/node_modules/async-listener/test/connection-handler-disconnects.tap.js"],"names":["net","require","test","process","addAsyncListener","PORT","t","plan","client","server","createServer","on","socket","ok","destroy","_handle","err","fail","connect","close","listen"],"mappings":"AAAA;;AAEA,IAAIA,MAAMC,QAAQ,KAAR,CAAV;AACA,IAAIC,OAAOD,QAAQ,KAAR,EAAeC,IAA1B;AACA,IAAI,CAACC,QAAQC,gBAAb,EAA+BH,QAAQ,aAAR;;AAE/B,IAAII,OAAO,KAAX;;AAEAH,KAAK,+CAAL,EAAsD,UAAUI,CAAV,EAAa;AAC/DA,MAAEC,IAAF,CAAO,CAAP;;AAEA,QAAIC,MAAJ;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAIC,SAAST,IAAIU,YAAJ,CAAiB,YAAW,CAAE,CAA9B,CAAb;AACAD,WAAOE,EAAP,CACI,YADJ,EAEI,UAAUC,MAAV,EAAkB;AACdN,UAAEO,EAAF,CAAK,IAAL,EAAW,iCAAX;AACAD,eAAOE,OAAP;AACAR,UAAEO,EAAF,CAAK,CAAED,OAAOG,OAAd,EAAuB,mCAAvB;AACH,KANL;;AASAN,WAAOE,EAAP,CAAU,OAAV,EAAmB,UAAUK,GAAV,EAAe;AAC9BV,UAAEW,IAAF,CAAO,IAAP,EAAa,8BAAb;AACH,KAFD;;AAIAR,WAAOE,EAAP,CACI,WADJ,EAEI,YAAY;AACRL,UAAEO,EAAF,CAAK,IAAL,EAAW,oBAAX;;AAEA;AACA;AACA;AACAL,iBAASR,IAAIkB,OAAJ,CAAYb,IAAZ,CAAT;AACAG,eAAOG,EAAP,CACI,SADJ,EAEI,YAAY;AACRL,cAAEO,EAAF,CAAK,IAAL,EAAW,cAAX;AACH,SAJL;;AAOAL,eAAOG,EAAP,CACI,OADJ,EAEI,YAAY;AACRL,cAAEO,EAAF,CAAK,IAAL,EAAW,iBAAX;AACAP,cAAEO,EAAF,CACI,CAACL,OAAOO,OADZ,EAEI,iCAFJ;;AAKAN,mBAAOU,KAAP,CAAa,YAAY;AACrBb,kBAAEO,EAAF,CACI,CAACJ,OAAOM,OADZ,EAEI,mCAFJ;AAIH,aALD;AAMH,SAfL;AAiBH,KAjCL;;AAoCA;AACAN,WAAOW,MAAP,CAAcf,IAAd;AAEH,CAjED","file":"connection-handler-disconnects.tap.js","sourcesContent":["'use strict';\n\nvar net = require('net');\nvar test = require('tap').test;\nif (!process.addAsyncListener) require('../index.js');\n\nvar PORT = 12346;\n\ntest(\"another connection handler disconnects server\", function (t) {\n    t.plan(7);\n\n    var client;\n\n    // This tests that we don't crash when another connection listener\n    // destroys the socket handle before we try to wrap\n    // socket._handle.onread .\n    // In this case, the connection handler declared below will run first,\n    // because the wrapping event handler doesn't get added until\n    // the server listens below.\n\n    var server = net.createServer(function() {});\n    server.on(\n        'connection',\n        function (socket) {\n            t.ok(true, 'Reached second connection event');\n            socket.destroy();\n            t.ok(! socket._handle, 'Destroy removed the socket handle');\n        }\n    );\n\n    server.on('error', function (err) {\n        t.fail(true, 'It should not produce errors');\n    });\n\n    server.on(\n        'listening',\n        function () {\n            t.ok(true, 'Server listened ok');\n\n            // This will run both 'connection' handlers, with the one above\n            // running first.\n            // This should succeed even though the socket is destroyed.\n            client = net.connect(PORT);\n            client.on(\n                'connect',\n                function () {\n                    t.ok(true, 'connected ok');\n                }\n            );\n\n            client.on(\n                'close',\n                function () {\n                    t.ok(true, 'disconnected ok');\n                    t.ok(\n                        !client._handle,\n                        'close removed the client handle'\n                    );\n\n                    server.close(function () {\n                        t.ok(\n                            !server._handle,\n                            'Destroy removed the server handle'\n                        );\n                    });\n                }\n            )\n        }\n    );\n\n    // Another 'connection' handler is registered during this call.\n    server.listen(PORT);\n\n});\n"]}