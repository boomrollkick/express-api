'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

module.exports = function (Promise, ensureAslWrapper) {
  // Updates to this class should also be applied to the the ES3 version
  // in index.js.
  return function (_Promise) {
    _inherits(WrappedPromise, _Promise);

    function WrappedPromise(executor) {
      var _ret;

      _classCallCheck(this, WrappedPromise);

      var context, args;

      var _this = _possibleConstructorReturn(this, (WrappedPromise.__proto__ || Object.getPrototypeOf(WrappedPromise)).call(this, wrappedExecutor));

      var promise = _this;

      try {
        executor.apply(context, args);
      } catch (err) {
        args[1](err);
      }

      return _ret = promise, _possibleConstructorReturn(_this, _ret);
      function wrappedExecutor(resolve, reject) {
        context = this;
        args = [wrappedResolve, wrappedReject];

        // These wrappers create a function that can be passed a function and an argument to
        // call as a continuation from the resolve or reject.
        function wrappedResolve(val) {
          ensureAslWrapper(promise, false);
          return resolve(val);
        }

        function wrappedReject(val) {
          ensureAslWrapper(promise, false);
          return reject(val);
        }
      }
      return _this;
    }

    return WrappedPromise;
  }(Promise);
};
//# sourceMappingURL=es6-wrapped-promise.js.map