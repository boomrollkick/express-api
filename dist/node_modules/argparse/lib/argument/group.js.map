{"version":3,"sources":["../../../../../src/node_modules/argparse/lib/argument/group.js"],"names":["util","require","ActionContainer","ArgumentGroup","module","exports","container","options","conflictHandler","prefixChars","argumentDefault","call","title","_groupActions","_container","_registries","_actions","_optionStringActions","_defaults","_hasNegativeNumberOptionals","_mutuallyExclusiveGroups","inherits","prototype","_addAction","action","push","_removeAction","actionIndex","indexOf","splice"],"mappings":"AAAA;;;;;;;;;;;;AAYA;;AAEA,IAAIA,OAAOC,QAAQ,MAAR,CAAX;;AAEA,IAAIC,kBAAkBD,QAAQ,qBAAR,CAAtB;;AAGA;;;;;;;;;;;;AAYA,IAAIE,gBAAgBC,OAAOC,OAAP,GAAiB,SAASF,aAAT,CAAuBG,SAAvB,EAAkCC,OAAlC,EAA2C;;AAE9EA,YAAUA,WAAW,EAArB;;AAEA;AACAA,UAAQC,eAAR,GAA2BD,QAAQC,eAAR,IAA2BF,UAAUE,eAAhE;AACAD,UAAQE,WAAR,GAAuBF,QAAQE,WAAR,IAAuBH,UAAUG,WAAxD;AACAF,UAAQG,eAAR,GAA2BH,QAAQG,eAAR,IAA2BJ,UAAUI,eAAhE;;AAEAR,kBAAgBS,IAAhB,CAAqB,IAArB,EAA2BJ,OAA3B;;AAEA;AACA,OAAKK,KAAL,GAAaL,QAAQK,KAArB;AACA,OAAKC,aAAL,GAAqB,EAArB;;AAEA;AACA,OAAKC,UAAL,GAAkBR,SAAlB;AACA,OAAKS,WAAL,GAAmBT,UAAUS,WAA7B;AACA,OAAKC,QAAL,GAAgBV,UAAUU,QAA1B;AACA,OAAKC,oBAAL,GAA4BX,UAAUW,oBAAtC;AACA,OAAKC,SAAL,GAAiBZ,UAAUY,SAA3B;AACA,OAAKC,2BAAL,GAAmCb,UAAUa,2BAA7C;AACA,OAAKC,wBAAL,GAAgCd,UAAUc,wBAA1C;AACD,CAvBD;AAwBApB,KAAKqB,QAAL,CAAclB,aAAd,EAA6BD,eAA7B;;AAGAC,cAAcmB,SAAd,CAAwBC,UAAxB,GAAqC,UAAUC,MAAV,EAAkB;AACrD;AACAA,WAAStB,gBAAgBoB,SAAhB,CAA0BC,UAA1B,CAAqCZ,IAArC,CAA0C,IAA1C,EAAgDa,MAAhD,CAAT;AACA,OAAKX,aAAL,CAAmBY,IAAnB,CAAwBD,MAAxB;AACA,SAAOA,MAAP;AACD,CALD;;AAQArB,cAAcmB,SAAd,CAAwBI,aAAxB,GAAwC,UAAUF,MAAV,EAAkB;AACxD;AACAtB,kBAAgBoB,SAAhB,CAA0BI,aAA1B,CAAwCf,IAAxC,CAA6C,IAA7C,EAAmDa,MAAnD;AACA,MAAIG,cAAc,KAAKd,aAAL,CAAmBe,OAAnB,CAA2BJ,MAA3B,CAAlB;AACA,MAAIG,eAAe,CAAnB,EAAsB;AACpB,SAAKd,aAAL,CAAmBgB,MAAnB,CAA0BF,WAA1B,EAAuC,CAAvC;AACD;AACF,CAPD","file":"group.js","sourcesContent":["/** internal\n * class ArgumentGroup\n *\n * Group arguments.\n * By default, ArgumentParser groups command-line arguments\n * into “positional arguments” and “optional arguments”\n * when displaying help messages. When there is a better\n * conceptual grouping of arguments than this default one,\n * appropriate groups can be created using the addArgumentGroup() method\n *\n * This class inherited from [[ArgumentContainer]]\n **/\n'use strict';\n\nvar util = require('util');\n\nvar ActionContainer = require('../action_container');\n\n\n/**\n * new ArgumentGroup(container, options)\n * - container (object): main container\n * - options (object): hash of group options\n *\n * #### options\n * - **prefixChars**  group name prefix\n * - **argumentDefault**  default argument value\n * - **title**  group title\n * - **description** group description\n *\n **/\nvar ArgumentGroup = module.exports = function ArgumentGroup(container, options) {\n\n  options = options || {};\n\n  // add any missing keyword arguments by checking the container\n  options.conflictHandler = (options.conflictHandler || container.conflictHandler);\n  options.prefixChars = (options.prefixChars || container.prefixChars);\n  options.argumentDefault = (options.argumentDefault || container.argumentDefault);\n\n  ActionContainer.call(this, options);\n\n  // group attributes\n  this.title = options.title;\n  this._groupActions = [];\n\n  // share most attributes with the container\n  this._container = container;\n  this._registries = container._registries;\n  this._actions = container._actions;\n  this._optionStringActions = container._optionStringActions;\n  this._defaults = container._defaults;\n  this._hasNegativeNumberOptionals = container._hasNegativeNumberOptionals;\n  this._mutuallyExclusiveGroups = container._mutuallyExclusiveGroups;\n};\nutil.inherits(ArgumentGroup, ActionContainer);\n\n\nArgumentGroup.prototype._addAction = function (action) {\n  // Parent add action\n  action = ActionContainer.prototype._addAction.call(this, action);\n  this._groupActions.push(action);\n  return action;\n};\n\n\nArgumentGroup.prototype._removeAction = function (action) {\n  // Parent remove action\n  ActionContainer.prototype._removeAction.call(this, action);\n  var actionIndex = this._groupActions.indexOf(action);\n  if (actionIndex >= 0) {\n    this._groupActions.splice(actionIndex, 1);\n  }\n};\n\n"]}