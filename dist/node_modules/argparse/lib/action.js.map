{"version":3,"sources":["../../../../src/node_modules/argparse/lib/action.js"],"names":["c","require","Action","module","exports","options","optionStrings","dest","nargs","constant","defaultValue","type","choices","required","help","metavar","Array","Error","prototype","getName","length","join","SUPPRESS","isOptional","isPositional","call"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA;;AAGA;;AACA,IAAIA,IAAIC,QAAQ,SAAR,CAAR;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA,IAAIC,SAASC,OAAOC,OAAP,GAAiB,SAASF,MAAT,CAAgBG,OAAhB,EAAyB;AACrDA,YAAUA,WAAW,EAArB;AACA,OAAKC,aAAL,GAAqBD,QAAQC,aAAR,IAAyB,EAA9C;AACA,OAAKC,IAAL,GAAYF,QAAQE,IAApB;AACA,OAAKC,KAAL,GAAa,OAAOH,QAAQG,KAAf,KAAyB,WAAzB,GAAuCH,QAAQG,KAA/C,GAAuD,IAApE;AACA,OAAKC,QAAL,GAAgB,OAAOJ,QAAQI,QAAf,KAA4B,WAA5B,GAA0CJ,QAAQI,QAAlD,GAA6D,IAA7E;AACA,OAAKC,YAAL,GAAoBL,QAAQK,YAA5B;AACA,OAAKC,IAAL,GAAY,OAAON,QAAQM,IAAf,KAAwB,WAAxB,GAAsCN,QAAQM,IAA9C,GAAqD,IAAjE;AACA,OAAKC,OAAL,GAAe,OAAOP,QAAQO,OAAf,KAA2B,WAA3B,GAAyCP,QAAQO,OAAjD,GAA2D,IAA1E;AACA,OAAKC,QAAL,GAAgB,OAAOR,QAAQQ,QAAf,KAA4B,WAA5B,GAA0CR,QAAQQ,QAAlD,GAA6D,KAA7E;AACA,OAAKC,IAAL,GAAY,OAAOT,QAAQS,IAAf,KAAwB,WAAxB,GAAsCT,QAAQS,IAA9C,GAAqD,IAAjE;AACA,OAAKC,OAAL,GAAe,OAAOV,QAAQU,OAAf,KAA2B,WAA3B,GAAyCV,QAAQU,OAAjD,GAA2D,IAA1E;;AAEA,MAAI,EAAE,KAAKT,aAAL,YAA8BU,KAAhC,CAAJ,EAA4C;AAC1C,UAAM,IAAIC,KAAJ,CAAU,kCAAV,CAAN;AACD;AACD,MAAI,OAAO,KAAKJ,QAAZ,KAAyB,WAAzB,IAAwC,OAAO,KAAKA,QAAZ,KAAyB,SAArE,EAAgF;AAC9E,UAAM,IAAII,KAAJ,CAAU,8BAAV,CAAN;AACD;AACF,CAnBD;;AAqBA;;;;;AAKAf,OAAOgB,SAAP,CAAiBC,OAAjB,GAA2B,YAAY;AACrC,MAAI,KAAKb,aAAL,CAAmBc,MAAnB,GAA4B,CAAhC,EAAmC;AACjC,WAAO,KAAKd,aAAL,CAAmBe,IAAnB,CAAwB,GAAxB,CAAP;AACD,GAFD,MAEO,IAAI,KAAKN,OAAL,KAAiB,IAAjB,IAAyB,KAAKA,OAAL,KAAiBf,EAAEsB,QAAhD,EAA0D;AAC/D,WAAO,KAAKP,OAAZ;AACD,GAFM,MAEA,IAAI,OAAO,KAAKR,IAAZ,KAAqB,WAArB,IAAoC,KAAKA,IAAL,KAAcP,EAAEsB,QAAxD,EAAkE;AACvE,WAAO,KAAKf,IAAZ;AACD;AACD,SAAO,IAAP;AACD,CATD;;AAWA;;;;;AAKAL,OAAOgB,SAAP,CAAiBK,UAAjB,GAA8B,YAAY;AACxC,SAAO,CAAC,KAAKC,YAAL,EAAR;AACD,CAFD;;AAIA;;;;;AAKAtB,OAAOgB,SAAP,CAAiBM,YAAjB,GAAgC,YAAY;AAC1C,SAAQ,KAAKlB,aAAL,CAAmBc,MAAnB,KAA8B,CAAtC;AACD,CAFD;;AAIA;;;;;;;;;;;;;;;;AAgBAlB,OAAOgB,SAAP,CAAiBO,IAAjB,GAAwB,YAAY;AAClC,QAAM,IAAIR,KAAJ,CAAU,qBAAV,CAAN,CADkC,CACK;AACxC,CAFD","file":"action.js","sourcesContent":["/**\n * class Action\n *\n * Base class for all actions\n * Do not call in your code, use this class only for inherits your own action\n *\n * Information about how to convert command line strings to Javascript objects.\n * Action objects are used by an ArgumentParser to represent the information\n * needed to parse a single argument from one or more strings from the command\n * line. The keyword arguments to the Action constructor are also all attributes\n * of Action instances.\n *\n * ##### Allowed keywords:\n *\n * - `store`\n * - `storeConstant`\n * - `storeTrue`\n * - `storeFalse`\n * - `append`\n * - `appendConstant`\n * - `count`\n * - `help`\n * - `version`\n *\n * Information about action options see [[Action.new]]\n *\n * See also [original guide](http://docs.python.org/dev/library/argparse.html#action)\n *\n **/\n\n'use strict';\n\n\n// Constants\nvar c = require('./const');\n\n\n/**\n * new Action(options)\n *\n * Base class for all actions. Used only for inherits\n *\n *\n * ##### Options:\n *\n * - `optionStrings`  A list of command-line option strings for the action.\n * - `dest`  Attribute to hold the created object(s)\n * - `nargs`  The number of command-line arguments that should be consumed.\n * By default, one argument will be consumed and a single value will be\n * produced.\n * - `constant`  Default value for an action with no value.\n * - `defaultValue`  The value to be produced if the option is not specified.\n * - `type`  Cast to 'string'|'int'|'float'|'complex'|function (string). If\n * None, 'string'.\n * - `choices`  The choices available.\n * - `required`  True if the action must always be specified at the command\n * line.\n * - `help`  The help describing the argument.\n * - `metavar`  The name to be used for the option's argument with the help\n * string. If None, the 'dest' value will be used as the name.\n *\n * ##### nargs supported values:\n *\n * - `N` (an integer) consumes N arguments (and produces a list)\n * - `?`  consumes zero or one arguments\n * - `*` consumes zero or more arguments (and produces a list)\n * - `+` consumes one or more arguments (and produces a list)\n *\n * Note: that the difference between the default and nargs=1 is that with the\n * default, a single value will be produced, while with nargs=1, a list\n * containing a single value will be produced.\n **/\nvar Action = module.exports = function Action(options) {\n  options = options || {};\n  this.optionStrings = options.optionStrings || [];\n  this.dest = options.dest;\n  this.nargs = typeof options.nargs !== 'undefined' ? options.nargs : null;\n  this.constant = typeof options.constant !== 'undefined' ? options.constant : null;\n  this.defaultValue = options.defaultValue;\n  this.type = typeof options.type !== 'undefined' ? options.type : null;\n  this.choices = typeof options.choices !== 'undefined' ? options.choices : null;\n  this.required = typeof options.required !== 'undefined' ? options.required : false;\n  this.help = typeof options.help !== 'undefined' ? options.help : null;\n  this.metavar = typeof options.metavar !== 'undefined' ? options.metavar : null;\n\n  if (!(this.optionStrings instanceof Array)) {\n    throw new Error('optionStrings should be an array');\n  }\n  if (typeof this.required !== 'undefined' && typeof this.required !== 'boolean') {\n    throw new Error('required should be a boolean');\n  }\n};\n\n/**\n * Action#getName -> String\n *\n * Tells action name\n **/\nAction.prototype.getName = function () {\n  if (this.optionStrings.length > 0) {\n    return this.optionStrings.join('/');\n  } else if (this.metavar !== null && this.metavar !== c.SUPPRESS) {\n    return this.metavar;\n  } else if (typeof this.dest !== 'undefined' && this.dest !== c.SUPPRESS) {\n    return this.dest;\n  }\n  return null;\n};\n\n/**\n * Action#isOptional -> Boolean\n *\n * Return true if optional\n **/\nAction.prototype.isOptional = function () {\n  return !this.isPositional();\n};\n\n/**\n * Action#isPositional -> Boolean\n *\n * Return true if positional\n **/\nAction.prototype.isPositional = function () {\n  return (this.optionStrings.length === 0);\n};\n\n/**\n * Action#call(parser, namespace, values, optionString) -> Void\n * - parser (ArgumentParser): current parser\n * - namespace (Namespace): namespace for output data\n * - values (Array): parsed values\n * - optionString (Array): input option string(not parsed)\n *\n * Call the action. Should be implemented in inherited classes\n *\n * ##### Example\n *\n *      ActionCount.prototype.call = function (parser, namespace, values, optionString) {\n *        namespace.set(this.dest, (namespace[this.dest] || 0) + 1);\n *      };\n *\n **/\nAction.prototype.call = function () {\n  throw new Error('.call() not defined');// Not Implemented error\n};\n"]}