{"version":3,"sources":["../../../../../../src/node_modules/argparse/lib/action/append/constant.js"],"names":["util","require","Action","ActionAppendConstant","module","exports","options","nargs","constant","Error","call","inherits","prototype","parser","namespace","items","concat","dest","push","set"],"mappings":"AAAA;;;;;;;;;;;;AAYA;;AAEA,IAAIA,OAAOC,QAAQ,MAAR,CAAX;;AAEA,IAAIC,SAASD,QAAQ,cAAR,CAAb;;AAEA;;;;;AAKA,IAAIE,uBAAuBC,OAAOC,OAAP,GAAiB,SAASF,oBAAT,CAA8BG,OAA9B,EAAuC;AACjFA,YAAUA,WAAW,EAArB;AACAA,UAAQC,KAAR,GAAgB,CAAhB;AACA,MAAI,OAAOD,QAAQE,QAAf,KAA4B,WAAhC,EAA6C;AAC3C,UAAM,IAAIC,KAAJ,CAAU,8CAAV,CAAN;AACD;AACDP,SAAOQ,IAAP,CAAY,IAAZ,EAAkBJ,OAAlB;AACD,CAPD;AAQAN,KAAKW,QAAL,CAAcR,oBAAd,EAAoCD,MAApC;;AAEA;;;;;;;;;AASAC,qBAAqBS,SAArB,CAA+BF,IAA/B,GAAsC,UAAUG,MAAV,EAAkBC,SAAlB,EAA6B;AACjE,MAAIC,QAAQ,GAAGC,MAAH,CAAUF,UAAU,KAAKG,IAAf,KAAwB,EAAlC,CAAZ;AACAF,QAAMG,IAAN,CAAW,KAAKV,QAAhB;AACAM,YAAUK,GAAV,CAAc,KAAKF,IAAnB,EAAyBF,KAAzB;AACD,CAJD","file":"constant.js","sourcesContent":["/*:nodoc:*\n * class ActionAppendConstant\n *\n * This stores a list, and appends the value specified by\n * the const keyword argument to the list.\n * (Note that the const keyword argument defaults to null.)\n * The 'appendConst' action is typically useful when multiple\n * arguments need to store constants to the same list.\n *\n * This class inherited from [[Action]]\n **/\n\n'use strict';\n\nvar util = require('util');\n\nvar Action = require('../../action');\n\n/*:nodoc:*\n * new ActionAppendConstant(options)\n * - options (object): options hash see [[Action.new]]\n *\n **/\nvar ActionAppendConstant = module.exports = function ActionAppendConstant(options) {\n  options = options || {};\n  options.nargs = 0;\n  if (typeof options.constant === 'undefined') {\n    throw new Error('constant option is required for appendAction');\n  }\n  Action.call(this, options);\n};\nutil.inherits(ActionAppendConstant, Action);\n\n/*:nodoc:*\n * ActionAppendConstant#call(parser, namespace, values, optionString) -> Void\n * - parser (ArgumentParser): current parser\n * - namespace (Namespace): namespace for output data\n * - values (Array): parsed values\n * - optionString (Array): input option string(not parsed)\n *\n * Call the action. Save result in namespace object\n **/\nActionAppendConstant.prototype.call = function (parser, namespace) {\n  var items = [].concat(namespace[this.dest] || []);\n  items.push(this.constant);\n  namespace.set(this.dest, items);\n};\n"]}