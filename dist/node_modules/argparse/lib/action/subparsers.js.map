{"version":3,"sources":["../../../../../src/node_modules/argparse/lib/action/subparsers.js"],"names":["util","require","format","Action","c","argumentErrorHelper","ChoicesPseudoAction","name","help","options","optionStrings","dest","call","inherits","ActionSubparsers","SUPPRESS","nargs","PARSER","debug","_progPrefix","prog","_parserClass","parserClass","_nameParserMap","_choicesActions","choices","prototype","addParser","parser","self","aliases","choiceAction","push","forEach","alias","_getSubactions","namespace","values","parserName","argStrings","slice","Object","keys","join","parseArgs","module","exports"],"mappings":"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","file":"subparsers.js","sourcesContent":["/** internal\n * class ActionSubparsers\n *\n * Support the creation of such sub-commands with the addSubparsers()\n *\n * This class inherited from [[Action]]\n **/\n'use strict';\n\nvar util    = require('util');\nvar format  = require('util').format;\n\n\nvar Action = require('../action');\n\n// Constants\nvar c = require('../const');\n\n// Errors\nvar argumentErrorHelper = require('../argument/error');\n\n\n/*:nodoc:*\n * new ChoicesPseudoAction(name, help)\n *\n * Create pseudo action for correct help text\n *\n **/\nfunction ChoicesPseudoAction(name, help) {\n  var options = {\n    optionStrings: [],\n    dest: name,\n    help: help\n  };\n\n  Action.call(this, options);\n}\n\nutil.inherits(ChoicesPseudoAction, Action);\n\n/**\n * new ActionSubparsers(options)\n * - options (object): options hash see [[Action.new]]\n *\n **/\nfunction ActionSubparsers(options) {\n  options = options || {};\n  options.dest = options.dest || c.SUPPRESS;\n  options.nargs = c.PARSER;\n\n  this.debug = (options.debug === true);\n\n  this._progPrefix = options.prog;\n  this._parserClass = options.parserClass;\n  this._nameParserMap = {};\n  this._choicesActions = [];\n\n  options.choices = this._nameParserMap;\n  Action.call(this, options);\n}\n\nutil.inherits(ActionSubparsers, Action);\n\n/*:nodoc:*\n * ActionSubparsers#addParser(name, options) -> ArgumentParser\n * - name (string): sub-command name\n * - options (object): see [[ArgumentParser.new]]\n *\n *  Note:\n *  addParser supports an additional aliases option,\n *  which allows multiple strings to refer to the same subparser.\n *  This example, like svn, aliases co as a shorthand for checkout\n *\n **/\nActionSubparsers.prototype.addParser = function (name, options) {\n  var parser;\n\n  var self = this;\n\n  options = options || {};\n\n  options.debug = (this.debug === true);\n\n  // set program from the existing prefix\n  if (!options.prog) {\n    options.prog = this._progPrefix + ' ' + name;\n  }\n\n  var aliases = options.aliases || [];\n\n  // create a pseudo-action to hold the choice help\n  if (!!options.help || typeof options.help === 'string') {\n    var help = options.help;\n    delete options.help;\n\n    var choiceAction = new ChoicesPseudoAction(name, help);\n    this._choicesActions.push(choiceAction);\n  }\n\n  // create the parser and add it to the map\n  parser = new this._parserClass(options);\n  this._nameParserMap[name] = parser;\n\n  // make parser available under aliases also\n  aliases.forEach(function (alias) {\n    self._nameParserMap[alias] = parser;\n  });\n\n  return parser;\n};\n\nActionSubparsers.prototype._getSubactions = function () {\n  return this._choicesActions;\n};\n\n/*:nodoc:*\n * ActionSubparsers#call(parser, namespace, values, optionString) -> Void\n * - parser (ArgumentParser): current parser\n * - namespace (Namespace): namespace for output data\n * - values (Array): parsed values\n * - optionString (Array): input option string(not parsed)\n *\n * Call the action. Parse input aguments\n **/\nActionSubparsers.prototype.call = function (parser, namespace, values) {\n  var parserName = values[0];\n  var argStrings = values.slice(1);\n\n  // set the parser name if requested\n  if (this.dest !== c.SUPPRESS) {\n    namespace[this.dest] = parserName;\n  }\n\n  // select the parser\n  if (this._nameParserMap[parserName]) {\n    parser = this._nameParserMap[parserName];\n  } else {\n    throw argumentErrorHelper(format(\n      'Unknown parser \"%s\" (choices: [%s]).',\n        parserName,\n        Object.keys(this._nameParserMap).join(', ')\n    ));\n  }\n\n  // parse all the remaining options into the namespace\n  parser.parseArgs(argStrings, namespace);\n};\n\nmodule.exports = ActionSubparsers;\n"]}