{"version":3,"sources":["../../../../src/node_modules/argparse/lib/namespace.js"],"names":["$$","require","Namespace","module","exports","options","extend","prototype","isset","key","has","set","value","get","defaultValue","unset"],"mappings":"AAAA;;;;;;;;;;AAUA;;;;AAEA,IAAIA,KAAKC,QAAQ,SAAR,CAAT;;AAEA;;;;;AAKA,IAAIC,YAAYC,OAAOC,OAAP,GAAiB,SAASF,SAAT,CAAmBG,OAAnB,EAA4B;AAC3DL,KAAGM,MAAH,CAAU,IAAV,EAAgBD,OAAhB;AACD,CAFD;;AAIA;;;;;;AAMAH,UAAUK,SAAV,CAAoBC,KAApB,GAA4B,UAAUC,GAAV,EAAe;AACzC,SAAOT,GAAGU,GAAH,CAAO,IAAP,EAAaD,GAAb,CAAP;AACD,CAFD;;AAIA;;;;;;;;AAQAP,UAAUK,SAAV,CAAoBI,GAApB,GAA0B,UAAUF,GAAV,EAAeG,KAAf,EAAsB;AAC9C,MAAI,QAAQH,GAAR,yCAAQA,GAAR,OAAiB,QAArB,EAA+B;AAC7BT,OAAGM,MAAH,CAAU,IAAV,EAAgBG,GAAhB;AACD,GAFD,MAEO;AACL,SAAKA,GAAL,IAAYG,KAAZ;AACD;AACD,SAAO,IAAP;AACD,CAPD;;AASA;;;;;;;AAOAV,UAAUK,SAAV,CAAoBM,GAApB,GAA0B,UAAUJ,GAAV,EAAeK,YAAf,EAA6B;AACrD,SAAO,CAAC,KAAKL,GAAL,CAAD,GAAaK,YAAb,GAA4B,KAAKL,GAAL,CAAnC;AACD,CAFD;;AAIA;;;;;;;AAOAP,UAAUK,SAAV,CAAoBQ,KAApB,GAA4B,UAAUN,GAAV,EAAeK,YAAf,EAA6B;AACvD,MAAIF,QAAQ,KAAKH,GAAL,CAAZ;AACA,MAAIG,UAAU,IAAd,EAAoB;AAClB,WAAO,KAAKH,GAAL,CAAP;AACA,WAAOG,KAAP;AACD;AACD,SAAOE,YAAP;AACD,CAPD","file":"namespace.js","sourcesContent":["/**\n * class Namespace\n *\n * Simple object for storing attributes. Implements equality by attribute names\n * and values, and provides a simple string representation.\n *\n * See also [original guide][1]\n *\n * [1]:http://docs.python.org/dev/library/argparse.html#the-namespace-object\n **/\n'use strict';\n\nvar $$ = require('./utils');\n\n/**\n * new Namespace(options)\n * - options(object): predefined propertis for result object\n *\n **/\nvar Namespace = module.exports = function Namespace(options) {\n  $$.extend(this, options);\n};\n\n/**\n * Namespace#isset(key) -> Boolean\n * - key (string|number): property name\n *\n * Tells whenever `namespace` contains given `key` or not.\n **/\nNamespace.prototype.isset = function (key) {\n  return $$.has(this, key);\n};\n\n/**\n * Namespace#set(key, value) -> self\n * -key (string|number|object): propery name\n * -value (mixed): new property value\n *\n * Set the property named key with value.\n * If key object then set all key properties to namespace object\n **/\nNamespace.prototype.set = function (key, value) {\n  if (typeof (key) === 'object') {\n    $$.extend(this, key);\n  } else {\n    this[key] = value;\n  }\n  return this;\n};\n\n/**\n * Namespace#get(key, defaultValue) -> mixed\n * - key (string|number): property name\n * - defaultValue (mixed): default value\n *\n * Return the property key or defaulValue if not set\n **/\nNamespace.prototype.get = function (key, defaultValue) {\n  return !this[key] ? defaultValue : this[key];\n};\n\n/**\n * Namespace#unset(key, defaultValue) -> mixed\n * - key (string|number): property name\n * - defaultValue (mixed): default value\n *\n * Return data[key](and delete it) or defaultValue\n **/\nNamespace.prototype.unset = function (key, defaultValue) {\n  var value = this[key];\n  if (value !== null) {\n    delete this[key];\n    return value;\n  }\n  return defaultValue;\n};\n"]}