{"version":3,"sources":["../../../../../../src/node_modules/argparse/node_modules/sprintf-js/test/test.js"],"names":["assert","require","sprintfjs","sprintf","vsprintf","describe","pi","it","equal","foo","Date","now"],"mappings":"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","file":"test.js","sourcesContent":["var assert = require(\"assert\"),\n    sprintfjs = require(\"../src/sprintf.js\"),\n    sprintf = sprintfjs.sprintf,\n    vsprintf = sprintfjs.vsprintf\n\ndescribe(\"sprintfjs\", function() {\n    var pi = 3.141592653589793\n\n    it(\"should return formated strings for simple placeholders\", function() {\n        assert.equal(\"%\", sprintf(\"%%\"))\n        assert.equal(\"10\", sprintf(\"%b\", 2))\n        assert.equal(\"A\", sprintf(\"%c\", 65))\n        assert.equal(\"2\", sprintf(\"%d\", 2))\n        assert.equal(\"2\", sprintf(\"%i\", 2))\n        assert.equal(\"2\", sprintf(\"%d\", \"2\"))\n        assert.equal(\"2\", sprintf(\"%i\", \"2\"))\n        assert.equal('{\"foo\":\"bar\"}', sprintf(\"%j\", {foo: \"bar\"}))\n        assert.equal('[\"foo\",\"bar\"]', sprintf(\"%j\", [\"foo\", \"bar\"]))\n        assert.equal(\"2e+0\", sprintf(\"%e\", 2))\n        assert.equal(\"2\", sprintf(\"%u\", 2))\n        assert.equal(\"4294967294\", sprintf(\"%u\", -2))\n        assert.equal(\"2.2\", sprintf(\"%f\", 2.2))\n        assert.equal(\"3.141592653589793\", sprintf(\"%g\", pi))\n        assert.equal(\"10\", sprintf(\"%o\", 8))\n        assert.equal(\"%s\", sprintf(\"%s\", \"%s\"))\n        assert.equal(\"ff\", sprintf(\"%x\", 255))\n        assert.equal(\"FF\", sprintf(\"%X\", 255))\n        assert.equal(\"Polly wants a cracker\", sprintf(\"%2$s %3$s a %1$s\", \"cracker\", \"Polly\", \"wants\"))\n        assert.equal(\"Hello world!\", sprintf(\"Hello %(who)s!\", {\"who\": \"world\"}))\n    })\n\n    it(\"should return formated strings for complex placeholders\", function() {\n        // sign\n        assert.equal(\"2\", sprintf(\"%d\", 2))\n        assert.equal(\"-2\", sprintf(\"%d\", -2))\n        assert.equal(\"+2\", sprintf(\"%+d\", 2))\n        assert.equal(\"-2\", sprintf(\"%+d\", -2))\n        assert.equal(\"2\", sprintf(\"%i\", 2))\n        assert.equal(\"-2\", sprintf(\"%i\", -2))\n        assert.equal(\"+2\", sprintf(\"%+i\", 2))\n        assert.equal(\"-2\", sprintf(\"%+i\", -2))\n        assert.equal(\"2.2\", sprintf(\"%f\", 2.2))\n        assert.equal(\"-2.2\", sprintf(\"%f\", -2.2))\n        assert.equal(\"+2.2\", sprintf(\"%+f\", 2.2))\n        assert.equal(\"-2.2\", sprintf(\"%+f\", -2.2))\n        assert.equal(\"-2.3\", sprintf(\"%+.1f\", -2.34))\n        assert.equal(\"-0.0\", sprintf(\"%+.1f\", -0.01))\n        assert.equal(\"3.14159\", sprintf(\"%.6g\", pi))\n        assert.equal(\"3.14\", sprintf(\"%.3g\", pi))\n        assert.equal(\"3\", sprintf(\"%.1g\", pi))\n        assert.equal(\"-000000123\", sprintf(\"%+010d\", -123))\n        assert.equal(\"______-123\", sprintf(\"%+'_10d\", -123))\n        assert.equal(\"-234.34 123.2\", sprintf(\"%f %f\", -234.34, 123.2))\n\n        // padding\n        assert.equal(\"-0002\", sprintf(\"%05d\", -2))\n        assert.equal(\"-0002\", sprintf(\"%05i\", -2))\n        assert.equal(\"    <\", sprintf(\"%5s\", \"<\"))\n        assert.equal(\"0000<\", sprintf(\"%05s\", \"<\"))\n        assert.equal(\"____<\", sprintf(\"%'_5s\", \"<\"))\n        assert.equal(\">    \", sprintf(\"%-5s\", \">\"))\n        assert.equal(\">0000\", sprintf(\"%0-5s\", \">\"))\n        assert.equal(\">____\", sprintf(\"%'_-5s\", \">\"))\n        assert.equal(\"xxxxxx\", sprintf(\"%5s\", \"xxxxxx\"))\n        assert.equal(\"1234\", sprintf(\"%02u\", 1234))\n        assert.equal(\" -10.235\", sprintf(\"%8.3f\", -10.23456))\n        assert.equal(\"-12.34 xxx\", sprintf(\"%f %s\", -12.34, \"xxx\"))\n        assert.equal('{\\n  \"foo\": \"bar\"\\n}', sprintf(\"%2j\", {foo: \"bar\"}))\n        assert.equal('[\\n  \"foo\",\\n  \"bar\"\\n]', sprintf(\"%2j\", [\"foo\", \"bar\"]))\n\n        // precision\n        assert.equal(\"2.3\", sprintf(\"%.1f\", 2.345))\n        assert.equal(\"xxxxx\", sprintf(\"%5.5s\", \"xxxxxx\"))\n        assert.equal(\"    x\", sprintf(\"%5.1s\", \"xxxxxx\"))\n\n    })\n\n    it(\"should return formated strings for callbacks\", function() {\n        assert.equal(\"foobar\", sprintf(\"%s\", function() { return \"foobar\" }))\n        assert.equal(Date.now(), sprintf(\"%s\", Date.now)) // should pass...\n    })\n})\n"]}