{"version":3,"sources":["../../../../../../src/node_modules/argparse/node_modules/sprintf-js/src/sprintf.js"],"names":["window","re","not_string","number","json","not_json","text","modulo","placeholder","key","key_access","index_access","sign","sprintf","arguments","cache","hasOwnProperty","parse","format","call","parse_tree","argv","cursor","tree_length","length","node_type","arg","output","i","k","match","pad","pad_character","pad_length","is_positive","get_type","Error","test","isNaN","TypeError","toString","String","fromCharCode","parseInt","JSON","stringify","toExponential","parseFloat","toFixed","toPrecision","substring","toUpperCase","replace","charAt","str_repeat","join","fmt","_fmt","arg_names","exec","field_list","replacement_field","field_match","SyntaxError","vsprintf","_argv","slice","splice","apply","variable","Object","prototype","toLowerCase","input","multiplier","Array","exports","define","amd"],"mappings":"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","file":"sprintf.js","sourcesContent":["(function(window) {\n    var re = {\n        not_string: /[^s]/,\n        number: /[diefg]/,\n        json: /[j]/,\n        not_json: /[^j]/,\n        text: /^[^\\x25]+/,\n        modulo: /^\\x25{2}/,\n        placeholder: /^\\x25(?:([1-9]\\d*)\\$|\\(([^\\)]+)\\))?(\\+)?(0|'[^$])?(-)?(\\d+)?(?:\\.(\\d+))?([b-gijosuxX])/,\n        key: /^([a-z_][a-z_\\d]*)/i,\n        key_access: /^\\.([a-z_][a-z_\\d]*)/i,\n        index_access: /^\\[(\\d+)\\]/,\n        sign: /^[\\+\\-]/\n    }\n\n    function sprintf() {\n        var key = arguments[0], cache = sprintf.cache\n        if (!(cache[key] && cache.hasOwnProperty(key))) {\n            cache[key] = sprintf.parse(key)\n        }\n        return sprintf.format.call(null, cache[key], arguments)\n    }\n\n    sprintf.format = function(parse_tree, argv) {\n        var cursor = 1, tree_length = parse_tree.length, node_type = \"\", arg, output = [], i, k, match, pad, pad_character, pad_length, is_positive = true, sign = \"\"\n        for (i = 0; i < tree_length; i++) {\n            node_type = get_type(parse_tree[i])\n            if (node_type === \"string\") {\n                output[output.length] = parse_tree[i]\n            }\n            else if (node_type === \"array\") {\n                match = parse_tree[i] // convenience purposes only\n                if (match[2]) { // keyword argument\n                    arg = argv[cursor]\n                    for (k = 0; k < match[2].length; k++) {\n                        if (!arg.hasOwnProperty(match[2][k])) {\n                            throw new Error(sprintf(\"[sprintf] property '%s' does not exist\", match[2][k]))\n                        }\n                        arg = arg[match[2][k]]\n                    }\n                }\n                else if (match[1]) { // positional argument (explicit)\n                    arg = argv[match[1]]\n                }\n                else { // positional argument (implicit)\n                    arg = argv[cursor++]\n                }\n\n                if (get_type(arg) == \"function\") {\n                    arg = arg()\n                }\n\n                if (re.not_string.test(match[8]) && re.not_json.test(match[8]) && (get_type(arg) != \"number\" && isNaN(arg))) {\n                    throw new TypeError(sprintf(\"[sprintf] expecting number but found %s\", get_type(arg)))\n                }\n\n                if (re.number.test(match[8])) {\n                    is_positive = arg >= 0\n                }\n\n                switch (match[8]) {\n                    case \"b\":\n                        arg = arg.toString(2)\n                    break\n                    case \"c\":\n                        arg = String.fromCharCode(arg)\n                    break\n                    case \"d\":\n                    case \"i\":\n                        arg = parseInt(arg, 10)\n                    break\n                    case \"j\":\n                        arg = JSON.stringify(arg, null, match[6] ? parseInt(match[6]) : 0)\n                    break\n                    case \"e\":\n                        arg = match[7] ? arg.toExponential(match[7]) : arg.toExponential()\n                    break\n                    case \"f\":\n                        arg = match[7] ? parseFloat(arg).toFixed(match[7]) : parseFloat(arg)\n                    break\n                    case \"g\":\n                        arg = match[7] ? parseFloat(arg).toPrecision(match[7]) : parseFloat(arg)\n                    break\n                    case \"o\":\n                        arg = arg.toString(8)\n                    break\n                    case \"s\":\n                        arg = ((arg = String(arg)) && match[7] ? arg.substring(0, match[7]) : arg)\n                    break\n                    case \"u\":\n                        arg = arg >>> 0\n                    break\n                    case \"x\":\n                        arg = arg.toString(16)\n                    break\n                    case \"X\":\n                        arg = arg.toString(16).toUpperCase()\n                    break\n                }\n                if (re.json.test(match[8])) {\n                    output[output.length] = arg\n                }\n                else {\n                    if (re.number.test(match[8]) && (!is_positive || match[3])) {\n                        sign = is_positive ? \"+\" : \"-\"\n                        arg = arg.toString().replace(re.sign, \"\")\n                    }\n                    else {\n                        sign = \"\"\n                    }\n                    pad_character = match[4] ? match[4] === \"0\" ? \"0\" : match[4].charAt(1) : \" \"\n                    pad_length = match[6] - (sign + arg).length\n                    pad = match[6] ? (pad_length > 0 ? str_repeat(pad_character, pad_length) : \"\") : \"\"\n                    output[output.length] = match[5] ? sign + arg + pad : (pad_character === \"0\" ? sign + pad + arg : pad + sign + arg)\n                }\n            }\n        }\n        return output.join(\"\")\n    }\n\n    sprintf.cache = {}\n\n    sprintf.parse = function(fmt) {\n        var _fmt = fmt, match = [], parse_tree = [], arg_names = 0\n        while (_fmt) {\n            if ((match = re.text.exec(_fmt)) !== null) {\n                parse_tree[parse_tree.length] = match[0]\n            }\n            else if ((match = re.modulo.exec(_fmt)) !== null) {\n                parse_tree[parse_tree.length] = \"%\"\n            }\n            else if ((match = re.placeholder.exec(_fmt)) !== null) {\n                if (match[2]) {\n                    arg_names |= 1\n                    var field_list = [], replacement_field = match[2], field_match = []\n                    if ((field_match = re.key.exec(replacement_field)) !== null) {\n                        field_list[field_list.length] = field_match[1]\n                        while ((replacement_field = replacement_field.substring(field_match[0].length)) !== \"\") {\n                            if ((field_match = re.key_access.exec(replacement_field)) !== null) {\n                                field_list[field_list.length] = field_match[1]\n                            }\n                            else if ((field_match = re.index_access.exec(replacement_field)) !== null) {\n                                field_list[field_list.length] = field_match[1]\n                            }\n                            else {\n                                throw new SyntaxError(\"[sprintf] failed to parse named argument key\")\n                            }\n                        }\n                    }\n                    else {\n                        throw new SyntaxError(\"[sprintf] failed to parse named argument key\")\n                    }\n                    match[2] = field_list\n                }\n                else {\n                    arg_names |= 2\n                }\n                if (arg_names === 3) {\n                    throw new Error(\"[sprintf] mixing positional and named placeholders is not (yet) supported\")\n                }\n                parse_tree[parse_tree.length] = match\n            }\n            else {\n                throw new SyntaxError(\"[sprintf] unexpected placeholder\")\n            }\n            _fmt = _fmt.substring(match[0].length)\n        }\n        return parse_tree\n    }\n\n    var vsprintf = function(fmt, argv, _argv) {\n        _argv = (argv || []).slice(0)\n        _argv.splice(0, 0, fmt)\n        return sprintf.apply(null, _argv)\n    }\n\n    /**\n     * helpers\n     */\n    function get_type(variable) {\n        return Object.prototype.toString.call(variable).slice(8, -1).toLowerCase()\n    }\n\n    function str_repeat(input, multiplier) {\n        return Array(multiplier + 1).join(input)\n    }\n\n    /**\n     * export to either browser or node.js\n     */\n    if (typeof exports !== \"undefined\") {\n        exports.sprintf = sprintf\n        exports.vsprintf = vsprintf\n    }\n    else {\n        window.sprintf = sprintf\n        window.vsprintf = vsprintf\n\n        if (typeof define === \"function\" && define.amd) {\n            define(function() {\n                return {\n                    sprintf: sprintf,\n                    vsprintf: vsprintf\n                }\n            })\n        }\n    }\n})(typeof window === \"undefined\" ? this : window);\n"]}