{"version":3,"sources":["../../../../../../src/node_modules/acorn-jsx/node_modules/acorn/src/tokencontext.js"],"names":["TokContext","token","isExpr","preserveSpace","override","types","b_stat","b_expr","b_tmpl","p_stat","p_expr","q_tmpl","p","readTmplToken","f_expr","pp","Parser","prototype","initialContext","braceIsBlock","prevType","tt","colon","parent","curContext","_return","lineBreak","test","input","slice","lastTokEnd","start","_else","semi","eof","parenR","braceL","exprAllowed","updateContext","update","type","keyword","dot","call","beforeExpr","braceR","context","length","out","pop","push","dollarBraceL","parenL","statementParens","_if","_for","_with","_while","incDec","_function","backQuote"],"mappings":";;;;;;;AAIA;;AACA;;AACA;;0JANA;AACA;AACA;;IAMaA,U,WAAAA,U,GACX,oBAAYC,KAAZ,EAAmBC,MAAnB,EAA2BC,aAA3B,EAA0CC,QAA1C,EAAoD;AAAA;;AAClD,OAAKH,KAAL,GAAaA,KAAb;AACA,OAAKC,MAAL,GAAc,CAAC,CAACA,MAAhB;AACA,OAAKC,aAAL,GAAqB,CAAC,CAACA,aAAvB;AACA,OAAKC,QAAL,GAAgBA,QAAhB;AACD,C;;AAGI,IAAMC,wBAAQ;AACnBC,UAAQ,IAAIN,UAAJ,CAAe,GAAf,EAAoB,KAApB,CADW;AAEnBO,UAAQ,IAAIP,UAAJ,CAAe,GAAf,EAAoB,IAApB,CAFW;AAGnBQ,UAAQ,IAAIR,UAAJ,CAAe,IAAf,EAAqB,IAArB,CAHW;AAInBS,UAAQ,IAAIT,UAAJ,CAAe,GAAf,EAAoB,KAApB,CAJW;AAKnBU,UAAQ,IAAIV,UAAJ,CAAe,GAAf,EAAoB,IAApB,CALW;AAMnBW,UAAQ,IAAIX,UAAJ,CAAe,GAAf,EAAoB,IAApB,EAA0B,IAA1B,EAAgC;AAAA,WAAKY,EAAEC,aAAF,EAAL;AAAA,GAAhC,CANW;AAOnBC,UAAQ,IAAId,UAAJ,CAAe,UAAf,EAA2B,IAA3B;AAPW,CAAd;;AAUP,IAAMe,KAAKC,cAAOC,SAAlB;;AAEAF,GAAGG,cAAH,GAAoB,YAAW;AAC7B,SAAO,CAACb,MAAMC,MAAP,CAAP;AACD,CAFD;;AAIAS,GAAGI,YAAH,GAAkB,UAASC,QAAT,EAAmB;AACnC,MAAIA,aAAaC,iBAAGC,KAApB,EAA2B;AACzB,QAAIC,SAAS,KAAKC,UAAL,EAAb;AACA,QAAID,WAAWlB,MAAMC,MAAjB,IAA2BiB,WAAWlB,MAAME,MAAhD,EACE,OAAO,CAACgB,OAAOrB,MAAf;AACH;AACD,MAAIkB,aAAaC,iBAAGI,OAApB,EACE,OAAOC,sBAAUC,IAAV,CAAe,KAAKC,KAAL,CAAWC,KAAX,CAAiB,KAAKC,UAAtB,EAAkC,KAAKC,KAAvC,CAAf,CAAP;AACF,MAAIX,aAAaC,iBAAGW,KAAhB,IAAyBZ,aAAaC,iBAAGY,IAAzC,IAAiDb,aAAaC,iBAAGa,GAAjE,IAAwEd,aAAaC,iBAAGc,MAA5F,EACE,OAAO,IAAP;AACF,MAAIf,YAAYC,iBAAGe,MAAnB,EACE,OAAO,KAAKZ,UAAL,OAAsBnB,MAAMC,MAAnC;AACF,SAAO,CAAC,KAAK+B,WAAb;AACD,CAbD;;AAeAtB,GAAGuB,aAAH,GAAmB,UAASlB,QAAT,EAAmB;AACpC,MAAImB,eAAJ;AAAA,MAAYC,OAAO,KAAKA,IAAxB;AACA,MAAIA,KAAKC,OAAL,IAAgBrB,YAAYC,iBAAGqB,GAAnC,EACE,KAAKL,WAAL,GAAmB,KAAnB,CADF,KAEK,IAAIE,SAASC,KAAKF,aAAlB,EACHC,OAAOI,IAAP,CAAY,IAAZ,EAAkBvB,QAAlB,EADG,KAGH,KAAKiB,WAAL,GAAmBG,KAAKI,UAAxB;AACH,CARD;;AAUA;;AAEAvB,iBAAGc,MAAH,CAAUG,aAAV,GAA0BjB,iBAAGwB,MAAH,CAAUP,aAAV,GAA0B,YAAW;AAC7D,MAAI,KAAKQ,OAAL,CAAaC,MAAb,IAAuB,CAA3B,EAA8B;AAC5B,SAAKV,WAAL,GAAmB,IAAnB;AACA;AACD;AACD,MAAIW,MAAM,KAAKF,OAAL,CAAaG,GAAb,EAAV;AACA,MAAID,QAAQ3C,MAAMC,MAAd,IAAwB,KAAKkB,UAAL,OAAsBnB,MAAMS,MAAxD,EAAgE;AAC9D,SAAKgC,OAAL,CAAaG,GAAb;AACA,SAAKZ,WAAL,GAAmB,KAAnB;AACD,GAHD,MAGO,IAAIW,QAAQ3C,MAAMG,MAAlB,EAA0B;AAC/B,SAAK6B,WAAL,GAAmB,IAAnB;AACD,GAFM,MAEA;AACL,SAAKA,WAAL,GAAmB,CAACW,IAAI9C,MAAxB;AACD;AACF,CAdD;;AAgBAmB,iBAAGe,MAAH,CAAUE,aAAV,GAA0B,UAASlB,QAAT,EAAmB;AAC3C,OAAK0B,OAAL,CAAaI,IAAb,CAAkB,KAAK/B,YAAL,CAAkBC,QAAlB,IAA8Bf,MAAMC,MAApC,GAA6CD,MAAME,MAArE;AACA,OAAK8B,WAAL,GAAmB,IAAnB;AACD,CAHD;;AAKAhB,iBAAG8B,YAAH,CAAgBb,aAAhB,GAAgC,YAAW;AACzC,OAAKQ,OAAL,CAAaI,IAAb,CAAkB7C,MAAMG,MAAxB;AACA,OAAK6B,WAAL,GAAmB,IAAnB;AACD,CAHD;;AAKAhB,iBAAG+B,MAAH,CAAUd,aAAV,GAA0B,UAASlB,QAAT,EAAmB;AAC3C,MAAIiC,kBAAkBjC,aAAaC,iBAAGiC,GAAhB,IAAuBlC,aAAaC,iBAAGkC,IAAvC,IAA+CnC,aAAaC,iBAAGmC,KAA/D,IAAwEpC,aAAaC,iBAAGoC,MAA9G;AACA,OAAKX,OAAL,CAAaI,IAAb,CAAkBG,kBAAkBhD,MAAMI,MAAxB,GAAiCJ,MAAMK,MAAzD;AACA,OAAK2B,WAAL,GAAmB,IAAnB;AACD,CAJD;;AAMAhB,iBAAGqC,MAAH,CAAUpB,aAAV,GAA0B,YAAW;AACnC;AACD,CAFD;;AAIAjB,iBAAGsC,SAAH,CAAarB,aAAb,GAA6B,UAASlB,QAAT,EAAmB;AAC9C,MAAIA,SAASwB,UAAT,IAAuBxB,aAAaC,iBAAGY,IAAvC,IAA+Cb,aAAaC,iBAAGW,KAA/D,IACA,EAAE,CAACZ,aAAaC,iBAAGC,KAAhB,IAAyBF,aAAaC,iBAAGe,MAA1C,KAAqD,KAAKZ,UAAL,OAAsBnB,MAAMC,MAAnF,CADJ,EAEE,KAAKwC,OAAL,CAAaI,IAAb,CAAkB7C,MAAMS,MAAxB;AACF,OAAKuB,WAAL,GAAmB,KAAnB;AACD,CALD;;AAOAhB,iBAAGuC,SAAH,CAAatB,aAAb,GAA6B,YAAW;AACtC,MAAI,KAAKd,UAAL,OAAsBnB,MAAMM,MAAhC,EACE,KAAKmC,OAAL,CAAaG,GAAb,GADF,KAGE,KAAKH,OAAL,CAAaI,IAAb,CAAkB7C,MAAMM,MAAxB;AACF,OAAK0B,WAAL,GAAmB,KAAnB;AACD,CAND","file":"tokencontext.js","sourcesContent":["// The algorithm used to determine whether a regexp can appear at a\n// given point in the program is loosely based on sweet.js' approach.\n// See https://github.com/mozilla/sweet.js/wiki/design\n\nimport {Parser} from \"./state\"\nimport {types as tt} from \"./tokentype\"\nimport {lineBreak} from \"./whitespace\"\n\nexport class TokContext {\n  constructor(token, isExpr, preserveSpace, override) {\n    this.token = token\n    this.isExpr = !!isExpr\n    this.preserveSpace = !!preserveSpace\n    this.override = override\n  }\n}\n\nexport const types = {\n  b_stat: new TokContext(\"{\", false),\n  b_expr: new TokContext(\"{\", true),\n  b_tmpl: new TokContext(\"${\", true),\n  p_stat: new TokContext(\"(\", false),\n  p_expr: new TokContext(\"(\", true),\n  q_tmpl: new TokContext(\"`\", true, true, p => p.readTmplToken()),\n  f_expr: new TokContext(\"function\", true)\n}\n\nconst pp = Parser.prototype\n\npp.initialContext = function() {\n  return [types.b_stat]\n}\n\npp.braceIsBlock = function(prevType) {\n  if (prevType === tt.colon) {\n    let parent = this.curContext()\n    if (parent === types.b_stat || parent === types.b_expr)\n      return !parent.isExpr\n  }\n  if (prevType === tt._return)\n    return lineBreak.test(this.input.slice(this.lastTokEnd, this.start))\n  if (prevType === tt._else || prevType === tt.semi || prevType === tt.eof || prevType === tt.parenR)\n    return true\n  if (prevType == tt.braceL)\n    return this.curContext() === types.b_stat\n  return !this.exprAllowed\n}\n\npp.updateContext = function(prevType) {\n  let update, type = this.type\n  if (type.keyword && prevType == tt.dot)\n    this.exprAllowed = false\n  else if (update = type.updateContext)\n    update.call(this, prevType)\n  else\n    this.exprAllowed = type.beforeExpr\n}\n\n// Token-specific context update code\n\ntt.parenR.updateContext = tt.braceR.updateContext = function() {\n  if (this.context.length == 1) {\n    this.exprAllowed = true\n    return\n  }\n  let out = this.context.pop()\n  if (out === types.b_stat && this.curContext() === types.f_expr) {\n    this.context.pop()\n    this.exprAllowed = false\n  } else if (out === types.b_tmpl) {\n    this.exprAllowed = true\n  } else {\n    this.exprAllowed = !out.isExpr\n  }\n}\n\ntt.braceL.updateContext = function(prevType) {\n  this.context.push(this.braceIsBlock(prevType) ? types.b_stat : types.b_expr)\n  this.exprAllowed = true\n}\n\ntt.dollarBraceL.updateContext = function() {\n  this.context.push(types.b_tmpl)\n  this.exprAllowed = true\n}\n\ntt.parenL.updateContext = function(prevType) {\n  let statementParens = prevType === tt._if || prevType === tt._for || prevType === tt._with || prevType === tt._while\n  this.context.push(statementParens ? types.p_stat : types.p_expr)\n  this.exprAllowed = true\n}\n\ntt.incDec.updateContext = function() {\n  // tokExprAllowed stays unchanged\n}\n\ntt._function.updateContext = function(prevType) {\n  if (prevType.beforeExpr && prevType !== tt.semi && prevType !== tt._else &&\n      !((prevType === tt.colon || prevType === tt.braceL) && this.curContext() === types.b_stat))\n    this.context.push(types.f_expr)\n  this.exprAllowed = false\n}\n\ntt.backQuote.updateContext = function() {\n  if (this.curContext() === types.q_tmpl)\n    this.context.pop()\n  else\n    this.context.push(types.q_tmpl)\n  this.exprAllowed = false\n}\n"]}