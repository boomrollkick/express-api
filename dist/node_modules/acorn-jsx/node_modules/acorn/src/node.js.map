{"version":3,"sources":["../../../../../../src/node_modules/acorn-jsx/node_modules/acorn/src/node.js"],"names":["Node","parser","pos","loc","type","start","end","options","locations","SourceLocation","directSourceFile","sourceFile","ranges","range","pp","Parser","prototype","startNode","startLoc","startNodeAt","finishNodeAt","node","finishNode","call","lastTokEnd","lastTokEndLoc"],"mappings":";;;;;;;AAAA;;AACA;;;;IAEaA,I,WAAAA,I,GACX,cAAYC,MAAZ,EAAoBC,GAApB,EAAyBC,GAAzB,EAA8B;AAAA;;AAC5B,OAAKC,IAAL,GAAY,EAAZ;AACA,OAAKC,KAAL,GAAaH,GAAb;AACA,OAAKI,GAAL,GAAW,CAAX;AACA,MAAIL,OAAOM,OAAP,CAAeC,SAAnB,EACE,KAAKL,GAAL,GAAW,IAAIM,uBAAJ,CAAmBR,MAAnB,EAA2BE,GAA3B,CAAX;AACF,MAAIF,OAAOM,OAAP,CAAeG,gBAAnB,EACE,KAAKC,UAAL,GAAkBV,OAAOM,OAAP,CAAeG,gBAAjC;AACF,MAAIT,OAAOM,OAAP,CAAeK,MAAnB,EACE,KAAKC,KAAL,GAAa,CAACX,GAAD,EAAM,CAAN,CAAb;AACH,C;;AAGH;;AAEA,IAAMY,KAAKC,cAAOC,SAAlB;;AAEAF,GAAGG,SAAH,GAAe,YAAW;AACxB,SAAO,IAAIjB,IAAJ,CAAS,IAAT,EAAe,KAAKK,KAApB,EAA2B,KAAKa,QAAhC,CAAP;AACD,CAFD;;AAIAJ,GAAGK,WAAH,GAAiB,UAASjB,GAAT,EAAcC,GAAd,EAAmB;AAClC,SAAO,IAAIH,IAAJ,CAAS,IAAT,EAAeE,GAAf,EAAoBC,GAApB,CAAP;AACD,CAFD;;AAIA;;AAEA,SAASiB,YAAT,CAAsBC,IAAtB,EAA4BjB,IAA5B,EAAkCF,GAAlC,EAAuCC,GAAvC,EAA4C;AAC1CkB,OAAKjB,IAAL,GAAYA,IAAZ;AACAiB,OAAKf,GAAL,GAAWJ,GAAX;AACA,MAAI,KAAKK,OAAL,CAAaC,SAAjB,EACEa,KAAKlB,GAAL,CAASG,GAAT,GAAeH,GAAf;AACF,MAAI,KAAKI,OAAL,CAAaK,MAAjB,EACES,KAAKR,KAAL,CAAW,CAAX,IAAgBX,GAAhB;AACF,SAAOmB,IAAP;AACD;;AAEDP,GAAGQ,UAAH,GAAgB,UAASD,IAAT,EAAejB,IAAf,EAAqB;AACnC,SAAOgB,aAAaG,IAAb,CAAkB,IAAlB,EAAwBF,IAAxB,EAA8BjB,IAA9B,EAAoC,KAAKoB,UAAzC,EAAqD,KAAKC,aAA1D,CAAP;AACD,CAFD;;AAIA;;AAEAX,GAAGM,YAAH,GAAkB,UAASC,IAAT,EAAejB,IAAf,EAAqBF,GAArB,EAA0BC,GAA1B,EAA+B;AAC/C,SAAOiB,aAAaG,IAAb,CAAkB,IAAlB,EAAwBF,IAAxB,EAA8BjB,IAA9B,EAAoCF,GAApC,EAAyCC,GAAzC,CAAP;AACD,CAFD","file":"node.js","sourcesContent":["import {Parser} from \"./state\"\nimport {SourceLocation} from \"./locutil\"\n\nexport class Node {\n  constructor(parser, pos, loc) {\n    this.type = \"\"\n    this.start = pos\n    this.end = 0\n    if (parser.options.locations)\n      this.loc = new SourceLocation(parser, loc)\n    if (parser.options.directSourceFile)\n      this.sourceFile = parser.options.directSourceFile\n    if (parser.options.ranges)\n      this.range = [pos, 0]\n  }\n}\n\n// Start an AST node, attaching a start offset.\n\nconst pp = Parser.prototype\n\npp.startNode = function() {\n  return new Node(this, this.start, this.startLoc)\n}\n\npp.startNodeAt = function(pos, loc) {\n  return new Node(this, pos, loc)\n}\n\n// Finish an AST node, adding `type` and `end` properties.\n\nfunction finishNodeAt(node, type, pos, loc) {\n  node.type = type\n  node.end = pos\n  if (this.options.locations)\n    node.loc.end = loc\n  if (this.options.ranges)\n    node.range[1] = pos\n  return node\n}\n\npp.finishNode = function(node, type) {\n  return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc)\n}\n\n// Finish node at given position\n\npp.finishNodeAt = function(node, type, pos, loc) {\n  return finishNodeAt.call(this, node, type, pos, loc)\n}\n"]}