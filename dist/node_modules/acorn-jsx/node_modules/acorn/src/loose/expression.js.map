{"version":3,"sources":["../../../../../../../src/node_modules/acorn-jsx/node_modules/acorn/src/loose/expression.js"],"names":["lp","LooseParser","prototype","checkLVal","expr","type","expression","dummyIdent","parseExpression","noIn","start","storeCurrentPos","parseMaybeAssign","tok","tt","comma","node","startNodeAt","expressions","eat","push","finishNode","parseParenExpression","pushCx","expect","parenL","val","popCx","parenR","toks","isContextual","startNode","next","semicolon","canInsertSemicolon","star","startsExpr","delegate","argument","left","parseMaybeConditional","isAssign","operator","value","eq","toAssignable","right","parseExprOps","question","test","consequent","alternate","colon","indent","curIndent","line","curLineStart","parseExprOp","parseMaybeUnary","minPrec","tokenStartsLine","prec","binop","_in","rightStart","sawUnary","prefix","update","incDec","ellipsis","parseExprSubscripts","postfix","starstar","parseSubscripts","parseExprAtom","base","noCalls","startIndent","dot","object","property","parsePropertyAccessor","computed","bracketL","bracketR","callee","arguments","parseExprList","backQuote","tag","quasi","parseTemplate","_this","_super","name","id","parseIdent","arrow","parseArrowExpression","regexp","regex","pattern","flags","raw","input","slice","end","num","string","_null","_true","_false","keyword","parenStart","inner","options","preserveParens","par","elements","braceL","parseObj","_class","parseClass","_function","parseFunction","_new","parseNew","meta","ecmaVersion","parseTemplateElement","elem","replace","cooked","tail","curElt","quasis","braceR","properties","closes","prop","isGenerator","method","shorthand","parsePropertyName","key","kind","parseMethod","assign","last","locations","loc","initFunction","params","generator","binding","props","i","length","toAssignableList","exprList","parseFunctionParams","body","parseBlock","close","allowEmpty","elts","elt"],"mappings":"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","file":"expression.js","sourcesContent":["import {LooseParser} from \"./state\"\nimport {isDummy} from \"./parseutil\"\nimport {tokTypes as tt} from \"acorn\"\n\nconst lp = LooseParser.prototype\n\nlp.checkLVal = function(expr) {\n  if (!expr) return expr\n  switch (expr.type) {\n  case \"Identifier\":\n  case \"MemberExpression\":\n    return expr\n\n  case \"ParenthesizedExpression\":\n    expr.expression = this.checkLVal(expr.expression)\n    return expr\n\n  default:\n    return this.dummyIdent()\n  }\n}\n\nlp.parseExpression = function(noIn) {\n  let start = this.storeCurrentPos()\n  let expr = this.parseMaybeAssign(noIn)\n  if (this.tok.type === tt.comma) {\n    let node = this.startNodeAt(start)\n    node.expressions = [expr]\n    while (this.eat(tt.comma)) node.expressions.push(this.parseMaybeAssign(noIn))\n    return this.finishNode(node, \"SequenceExpression\")\n  }\n  return expr\n}\n\nlp.parseParenExpression = function() {\n  this.pushCx()\n  this.expect(tt.parenL)\n  let val = this.parseExpression()\n  this.popCx()\n  this.expect(tt.parenR)\n  return val\n}\n\nlp.parseMaybeAssign = function(noIn) {\n  if (this.toks.isContextual(\"yield\")) {\n    let node = this.startNode()\n    this.next()\n    if (this.semicolon() || this.canInsertSemicolon() || (this.tok.type != tt.star && !this.tok.type.startsExpr)) {\n      node.delegate = false\n      node.argument = null\n    } else {\n      node.delegate = this.eat(tt.star)\n      node.argument = this.parseMaybeAssign()\n    }\n    return this.finishNode(node, \"YieldExpression\")\n  }\n\n  let start = this.storeCurrentPos()\n  let left = this.parseMaybeConditional(noIn)\n  if (this.tok.type.isAssign) {\n    let node = this.startNodeAt(start)\n    node.operator = this.tok.value\n    node.left = this.tok.type === tt.eq ? this.toAssignable(left) : this.checkLVal(left)\n    this.next()\n    node.right = this.parseMaybeAssign(noIn)\n    return this.finishNode(node, \"AssignmentExpression\")\n  }\n  return left\n}\n\nlp.parseMaybeConditional = function(noIn) {\n  let start = this.storeCurrentPos()\n  let expr = this.parseExprOps(noIn)\n  if (this.eat(tt.question)) {\n    let node = this.startNodeAt(start)\n    node.test = expr\n    node.consequent = this.parseMaybeAssign()\n    node.alternate = this.expect(tt.colon) ? this.parseMaybeAssign(noIn) : this.dummyIdent()\n    return this.finishNode(node, \"ConditionalExpression\")\n  }\n  return expr\n}\n\nlp.parseExprOps = function(noIn) {\n  let start = this.storeCurrentPos()\n  let indent = this.curIndent, line = this.curLineStart\n  return this.parseExprOp(this.parseMaybeUnary(false), start, -1, noIn, indent, line)\n}\n\nlp.parseExprOp = function(left, start, minPrec, noIn, indent, line) {\n  if (this.curLineStart != line && this.curIndent < indent && this.tokenStartsLine()) return left\n  let prec = this.tok.type.binop\n  if (prec != null && (!noIn || this.tok.type !== tt._in)) {\n    if (prec > minPrec) {\n      let node = this.startNodeAt(start)\n      node.left = left\n      node.operator = this.tok.value\n      this.next()\n      if (this.curLineStart != line && this.curIndent < indent && this.tokenStartsLine()) {\n        node.right = this.dummyIdent()\n      } else {\n        let rightStart = this.storeCurrentPos()\n        node.right = this.parseExprOp(this.parseMaybeUnary(false), rightStart, prec, noIn, indent, line)\n      }\n      this.finishNode(node, /&&|\\|\\|/.test(node.operator) ? \"LogicalExpression\" : \"BinaryExpression\")\n      return this.parseExprOp(node, start, minPrec, noIn, indent, line)\n    }\n  }\n  return left\n}\n\nlp.parseMaybeUnary = function(sawUnary) {\n  let start = this.storeCurrentPos(), expr\n  if (this.tok.type.prefix) {\n    let node = this.startNode(), update = this.tok.type === tt.incDec\n    if (!update) sawUnary = true\n    node.operator = this.tok.value\n    node.prefix = true\n    this.next()\n    node.argument = this.parseMaybeUnary(true)\n    if (update) node.argument = this.checkLVal(node.argument)\n    expr = this.finishNode(node, update ? \"UpdateExpression\" : \"UnaryExpression\")\n  } else if (this.tok.type === tt.ellipsis) {\n    let node = this.startNode()\n    this.next()\n    node.argument = this.parseMaybeUnary(sawUnary)\n    expr = this.finishNode(node, \"SpreadElement\")\n  } else {\n    expr = this.parseExprSubscripts()\n    while (this.tok.type.postfix && !this.canInsertSemicolon()) {\n      let node = this.startNodeAt(start)\n      node.operator = this.tok.value\n      node.prefix = false\n      node.argument = this.checkLVal(expr)\n      this.next()\n      expr = this.finishNode(node, \"UpdateExpression\")\n    }\n  }\n\n  if (!sawUnary && this.eat(tt.starstar)) {\n    let node = this.startNodeAt(start)\n    node.operator = \"**\"\n    node.left = expr\n    node.right = this.parseMaybeUnary(false)\n    return this.finishNode(node, \"BinaryExpression\")\n  }\n\n  return expr\n}\n\nlp.parseExprSubscripts = function() {\n  let start = this.storeCurrentPos()\n  return this.parseSubscripts(this.parseExprAtom(), start, false, this.curIndent, this.curLineStart)\n}\n\nlp.parseSubscripts = function(base, start, noCalls, startIndent, line) {\n  for (;;) {\n    if (this.curLineStart != line && this.curIndent <= startIndent && this.tokenStartsLine()) {\n      if (this.tok.type == tt.dot && this.curIndent == startIndent)\n        --startIndent\n      else\n        return base\n    }\n\n    if (this.eat(tt.dot)) {\n      let node = this.startNodeAt(start)\n      node.object = base\n      if (this.curLineStart != line && this.curIndent <= startIndent && this.tokenStartsLine())\n        node.property = this.dummyIdent()\n      else\n        node.property = this.parsePropertyAccessor() || this.dummyIdent()\n      node.computed = false\n      base = this.finishNode(node, \"MemberExpression\")\n    } else if (this.tok.type == tt.bracketL) {\n      this.pushCx()\n      this.next()\n      let node = this.startNodeAt(start)\n      node.object = base\n      node.property = this.parseExpression()\n      node.computed = true\n      this.popCx()\n      this.expect(tt.bracketR)\n      base = this.finishNode(node, \"MemberExpression\")\n    } else if (!noCalls && this.tok.type == tt.parenL) {\n      let node = this.startNodeAt(start)\n      node.callee = base\n      node.arguments = this.parseExprList(tt.parenR)\n      base = this.finishNode(node, \"CallExpression\")\n    } else if (this.tok.type == tt.backQuote) {\n      let node = this.startNodeAt(start)\n      node.tag = base\n      node.quasi = this.parseTemplate()\n      base = this.finishNode(node, \"TaggedTemplateExpression\")\n    } else {\n      return base\n    }\n  }\n}\n\nlp.parseExprAtom = function() {\n  let node\n  switch (this.tok.type) {\n  case tt._this:\n  case tt._super:\n    let type = this.tok.type === tt._this ? \"ThisExpression\" : \"Super\"\n    node = this.startNode()\n    this.next()\n    return this.finishNode(node, type)\n\n  case tt.name:\n    let start = this.storeCurrentPos()\n    let id = this.parseIdent()\n    return this.eat(tt.arrow) ? this.parseArrowExpression(this.startNodeAt(start), [id]) : id\n\n  case tt.regexp:\n    node = this.startNode()\n    let val = this.tok.value\n    node.regex = {pattern: val.pattern, flags: val.flags}\n    node.value = val.value\n    node.raw = this.input.slice(this.tok.start, this.tok.end)\n    this.next()\n    return this.finishNode(node, \"Literal\")\n\n  case tt.num: case tt.string:\n    node = this.startNode()\n    node.value = this.tok.value\n    node.raw = this.input.slice(this.tok.start, this.tok.end)\n    this.next()\n    return this.finishNode(node, \"Literal\")\n\n  case tt._null: case tt._true: case tt._false:\n    node = this.startNode()\n    node.value = this.tok.type === tt._null ? null : this.tok.type === tt._true\n    node.raw = this.tok.type.keyword\n    this.next()\n    return this.finishNode(node, \"Literal\")\n\n  case tt.parenL:\n    let parenStart = this.storeCurrentPos()\n    this.next()\n    let inner = this.parseExpression()\n    this.expect(tt.parenR)\n    if (this.eat(tt.arrow)) {\n      return this.parseArrowExpression(this.startNodeAt(parenStart), inner.expressions || (isDummy(inner) ? [] : [inner]))\n    }\n    if (this.options.preserveParens) {\n      let par = this.startNodeAt(parenStart)\n      par.expression = inner\n      inner = this.finishNode(par, \"ParenthesizedExpression\")\n    }\n    return inner\n\n  case tt.bracketL:\n    node = this.startNode()\n    node.elements = this.parseExprList(tt.bracketR, true)\n    return this.finishNode(node, \"ArrayExpression\")\n\n  case tt.braceL:\n    return this.parseObj()\n\n  case tt._class:\n    return this.parseClass()\n\n  case tt._function:\n    node = this.startNode()\n    this.next()\n    return this.parseFunction(node, false)\n\n  case tt._new:\n    return this.parseNew()\n\n  case tt.backQuote:\n    return this.parseTemplate()\n\n  default:\n    return this.dummyIdent()\n  }\n}\n\nlp.parseNew = function() {\n  let node = this.startNode(), startIndent = this.curIndent, line = this.curLineStart\n  let meta = this.parseIdent(true)\n  if (this.options.ecmaVersion >= 6 && this.eat(tt.dot)) {\n    node.meta = meta\n    node.property = this.parseIdent(true)\n    return this.finishNode(node, \"MetaProperty\")\n  }\n  let start = this.storeCurrentPos()\n  node.callee = this.parseSubscripts(this.parseExprAtom(), start, true, startIndent, line)\n  if (this.tok.type == tt.parenL) {\n    node.arguments = this.parseExprList(tt.parenR)\n  } else {\n    node.arguments = []\n  }\n  return this.finishNode(node, \"NewExpression\")\n}\n\nlp.parseTemplateElement = function() {\n  let elem = this.startNode()\n  elem.value = {\n    raw: this.input.slice(this.tok.start, this.tok.end).replace(/\\r\\n?/g, '\\n'),\n    cooked: this.tok.value\n  }\n  this.next()\n  elem.tail = this.tok.type === tt.backQuote\n  return this.finishNode(elem, \"TemplateElement\")\n}\n\nlp.parseTemplate = function() {\n  let node = this.startNode()\n  this.next()\n  node.expressions = []\n  let curElt = this.parseTemplateElement()\n  node.quasis = [curElt]\n  while (!curElt.tail) {\n    this.next()\n    node.expressions.push(this.parseExpression())\n    if (this.expect(tt.braceR)) {\n      curElt = this.parseTemplateElement()\n    } else {\n      curElt = this.startNode()\n      curElt.value = {cooked: '', raw: ''}\n      curElt.tail = true\n      this.finishNode(curElt, \"TemplateElement\")\n    }\n    node.quasis.push(curElt)\n  }\n  this.expect(tt.backQuote)\n  return this.finishNode(node, \"TemplateLiteral\")\n}\n\nlp.parseObj = function() {\n  let node = this.startNode()\n  node.properties = []\n  this.pushCx()\n  let indent = this.curIndent + 1, line = this.curLineStart\n  this.eat(tt.braceL)\n  if (this.curIndent + 1 < indent) { indent = this.curIndent; line = this.curLineStart }\n  while (!this.closes(tt.braceR, indent, line)) {\n    let prop = this.startNode(), isGenerator, start\n    if (this.options.ecmaVersion >= 6) {\n      start = this.storeCurrentPos()\n      prop.method = false\n      prop.shorthand = false\n      isGenerator = this.eat(tt.star)\n    }\n    this.parsePropertyName(prop)\n    if (isDummy(prop.key)) { if (isDummy(this.parseMaybeAssign())) this.next(); this.eat(tt.comma); continue }\n    if (this.eat(tt.colon)) {\n      prop.kind = \"init\"\n      prop.value = this.parseMaybeAssign()\n    } else if (this.options.ecmaVersion >= 6 && (this.tok.type === tt.parenL || this.tok.type === tt.braceL)) {\n      prop.kind = \"init\"\n      prop.method = true\n      prop.value = this.parseMethod(isGenerator)\n    } else if (this.options.ecmaVersion >= 5 && prop.key.type === \"Identifier\" &&\n               !prop.computed && (prop.key.name === \"get\" || prop.key.name === \"set\") &&\n               (this.tok.type != tt.comma && this.tok.type != tt.braceR)) {\n      prop.kind = prop.key.name\n      this.parsePropertyName(prop)\n      prop.value = this.parseMethod(false)\n    } else {\n      prop.kind = \"init\"\n      if (this.options.ecmaVersion >= 6) {\n        if (this.eat(tt.eq)) {\n          let assign = this.startNodeAt(start)\n          assign.operator = \"=\"\n          assign.left = prop.key\n          assign.right = this.parseMaybeAssign()\n          prop.value = this.finishNode(assign, \"AssignmentExpression\")\n        } else {\n          prop.value = prop.key\n        }\n      } else {\n        prop.value = this.dummyIdent()\n      }\n      prop.shorthand = true\n    }\n    node.properties.push(this.finishNode(prop, \"Property\"))\n    this.eat(tt.comma)\n  }\n  this.popCx()\n  if (!this.eat(tt.braceR)) {\n    // If there is no closing brace, make the node span to the start\n    // of the next token (this is useful for Tern)\n    this.last.end = this.tok.start\n    if (this.options.locations) this.last.loc.end = this.tok.loc.start\n  }\n  return this.finishNode(node, \"ObjectExpression\")\n}\n\nlp.parsePropertyName = function(prop) {\n  if (this.options.ecmaVersion >= 6) {\n    if (this.eat(tt.bracketL)) {\n      prop.computed = true\n      prop.key = this.parseExpression()\n      this.expect(tt.bracketR)\n      return\n    } else {\n      prop.computed = false\n    }\n  }\n  let key = (this.tok.type === tt.num || this.tok.type === tt.string) ? this.parseExprAtom() : this.parseIdent()\n  prop.key = key || this.dummyIdent()\n}\n\nlp.parsePropertyAccessor = function() {\n  if (this.tok.type === tt.name || this.tok.type.keyword) return this.parseIdent()\n}\n\nlp.parseIdent = function() {\n  let name = this.tok.type === tt.name ? this.tok.value : this.tok.type.keyword\n  if (!name) return this.dummyIdent()\n  let node = this.startNode()\n  this.next()\n  node.name = name\n  return this.finishNode(node, \"Identifier\")\n}\n\nlp.initFunction = function(node) {\n  node.id = null\n  node.params = []\n  if (this.options.ecmaVersion >= 6) {\n    node.generator = false\n    node.expression = false\n  }\n}\n\n// Convert existing expression atom to assignable pattern\n// if possible.\n\nlp.toAssignable = function(node, binding) {\n  if (!node || node.type == \"Identifier\" || (node.type == \"MemberExpression\" && !binding)) {\n    // Okay\n  } else if (node.type == \"ParenthesizedExpression\") {\n    node.expression = this.toAssignable(node.expression, binding)\n  } else if (this.options.ecmaVersion < 6) {\n    return this.dummyIdent()\n  } else if (node.type == \"ObjectExpression\") {\n    node.type = \"ObjectPattern\"\n    let props = node.properties\n    for (let i = 0; i < props.length; i++)\n      props[i].value = this.toAssignable(props[i].value, binding)\n  } else if (node.type == \"ArrayExpression\") {\n    node.type = \"ArrayPattern\"\n    this.toAssignableList(node.elements, binding)\n  } else if (node.type == \"SpreadElement\") {\n    node.type = \"RestElement\"\n    node.argument = this.toAssignable(node.argument, binding)\n  } else if (node.type == \"AssignmentExpression\") {\n    node.type = \"AssignmentPattern\"\n    delete node.operator\n  } else {\n    return this.dummyIdent()\n  }\n  return node\n}\n\nlp.toAssignableList = function(exprList, binding) {\n  for (let i = 0; i < exprList.length; i++)\n    exprList[i] = this.toAssignable(exprList[i], binding)\n  return exprList\n}\n\nlp.parseFunctionParams = function(params) {\n  params = this.parseExprList(tt.parenR)\n  return this.toAssignableList(params, true)\n}\n\nlp.parseMethod = function(isGenerator) {\n  let node = this.startNode()\n  this.initFunction(node)\n  node.params = this.parseFunctionParams()\n  node.generator = isGenerator || false\n  node.expression = this.options.ecmaVersion >= 6 && this.tok.type !== tt.braceL\n  node.body = node.expression ? this.parseMaybeAssign() : this.parseBlock()\n  return this.finishNode(node, \"FunctionExpression\")\n}\n\nlp.parseArrowExpression = function(node, params) {\n  this.initFunction(node)\n  node.params = this.toAssignableList(params, true)\n  node.expression = this.tok.type !== tt.braceL\n  node.body = node.expression ? this.parseMaybeAssign() : this.parseBlock()\n  return this.finishNode(node, \"ArrowFunctionExpression\")\n}\n\nlp.parseExprList = function(close, allowEmpty) {\n  this.pushCx()\n  let indent = this.curIndent, line = this.curLineStart, elts = []\n  this.next() // Opening bracket\n  while (!this.closes(close, indent + 1, line)) {\n    if (this.eat(tt.comma)) {\n      elts.push(allowEmpty ? null : this.dummyIdent())\n      continue\n    }\n    let elt = this.parseMaybeAssign()\n    if (isDummy(elt)) {\n      if (this.closes(close, indent, line)) break\n      this.next()\n    } else {\n      elts.push(elt)\n    }\n    this.eat(tt.comma)\n  }\n  this.popCx()\n  if (!this.eat(close)) {\n    // If there is no closing brace, make the node span to the start\n    // of the next token (this is useful for Tern)\n    this.last.end = this.tok.start\n    if (this.options.locations) this.last.loc.end = this.tok.loc.start\n  }\n  return elts\n}\n"]}