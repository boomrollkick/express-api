{"version":3,"sources":["../../../../../../../src/node_modules/acorn-jsx/node_modules/acorn/src/loose/statement.js"],"names":["lp","LooseParser","prototype","parseTopLevel","node","startNodeAt","options","locations","input","body","tok","type","tt","eof","push","parseStatement","last","ecmaVersion","sourceType","finishNode","starttype","startNode","kind","toks","isLet","_var","_break","_continue","next","isBreak","semicolon","canInsertSemicolon","label","name","parseIdent","_debugger","_do","test","eat","_while","parseParenExpression","dummyIdent","_for","pushCx","expect","parenL","semi","parseFor","_const","init","parseVar","value","declarations","length","_in","isContextual","parseForIn","parseExpression","toAssignable","_function","parseFunction","_if","consequent","alternate","_else","_return","argument","_switch","blockIndent","curIndent","line","curLineStart","discriminant","cases","braceL","cur","closes","braceR","_case","_default","isCase","colon","popCx","_throw","_try","block","parseBlock","handler","_catch","clause","param","parseExprAtom","parenR","finalizer","_finally","_with","object","_class","parseClass","_import","parseImport","_export","parseExport","expr","expression","update","left","right","noIn","decl","id","eq","parseMaybeAssign","comma","isStatement","superClass","_extends","indent","method","isGenerator","static","star","parsePropertyName","key","computed","parseMethod","end","start","loc","initFunction","generator","params","parseFunctionParams","source","eatContextual","dummyString","declaration","keyword","specifiers","parseExportSpecifierList","string","elt","local","parseImportSpecifierList","unshift","elts","continuedLine","nextLineStart","imported","exported"],"mappings":"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","file":"statement.js","sourcesContent":["import {LooseParser} from \"./state\"\nimport {isDummy} from \"./parseutil\"\nimport {getLineInfo, tokTypes as tt} from \"acorn\"\n\nconst lp = LooseParser.prototype\n\nlp.parseTopLevel = function() {\n  let node = this.startNodeAt(this.options.locations ? [0, getLineInfo(this.input, 0)] : 0)\n  node.body = []\n  while (this.tok.type !== tt.eof) node.body.push(this.parseStatement())\n  this.last = this.tok\n  if (this.options.ecmaVersion >= 6) {\n    node.sourceType = this.options.sourceType\n  }\n  return this.finishNode(node, \"Program\")\n}\n\nlp.parseStatement = function() {\n  let starttype = this.tok.type, node = this.startNode(), kind\n\n  if (this.toks.isLet()) {\n    starttype = tt._var\n    kind = \"let\"\n  }\n\n  switch (starttype) {\n  case tt._break: case tt._continue:\n    this.next()\n    let isBreak = starttype === tt._break\n    if (this.semicolon() || this.canInsertSemicolon()) {\n      node.label = null\n    } else {\n      node.label = this.tok.type === tt.name ? this.parseIdent() : null\n      this.semicolon()\n    }\n    return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\")\n\n  case tt._debugger:\n    this.next()\n    this.semicolon()\n    return this.finishNode(node, \"DebuggerStatement\")\n\n  case tt._do:\n    this.next()\n    node.body = this.parseStatement()\n    node.test = this.eat(tt._while) ? this.parseParenExpression() : this.dummyIdent()\n    this.semicolon()\n    return this.finishNode(node, \"DoWhileStatement\")\n\n  case tt._for:\n    this.next()\n    this.pushCx()\n    this.expect(tt.parenL)\n    if (this.tok.type === tt.semi) return this.parseFor(node, null)\n    let isLet = this.toks.isLet()\n    if (isLet || this.tok.type === tt._var || this.tok.type === tt._const) {\n      let init = this.parseVar(true, isLet ? \"let\" : this.tok.value)\n      if (init.declarations.length === 1 && (this.tok.type === tt._in || this.isContextual(\"of\"))) {\n        return this.parseForIn(node, init)\n      }\n      return this.parseFor(node, init)\n    }\n    let init = this.parseExpression(true)\n    if (this.tok.type === tt._in || this.isContextual(\"of\"))\n      return this.parseForIn(node, this.toAssignable(init))\n    return this.parseFor(node, init)\n\n  case tt._function:\n    this.next()\n    return this.parseFunction(node, true)\n\n  case tt._if:\n    this.next()\n    node.test = this.parseParenExpression()\n    node.consequent = this.parseStatement()\n    node.alternate = this.eat(tt._else) ? this.parseStatement() : null\n    return this.finishNode(node, \"IfStatement\")\n\n  case tt._return:\n    this.next()\n    if (this.eat(tt.semi) || this.canInsertSemicolon()) node.argument = null\n    else { node.argument = this.parseExpression(); this.semicolon() }\n    return this.finishNode(node, \"ReturnStatement\")\n\n  case tt._switch:\n    let blockIndent = this.curIndent, line = this.curLineStart\n    this.next()\n    node.discriminant = this.parseParenExpression()\n    node.cases = []\n    this.pushCx()\n    this.expect(tt.braceL)\n\n    let cur\n    while (!this.closes(tt.braceR, blockIndent, line, true)) {\n      if (this.tok.type === tt._case || this.tok.type === tt._default) {\n        let isCase = this.tok.type === tt._case\n        if (cur) this.finishNode(cur, \"SwitchCase\")\n        node.cases.push(cur = this.startNode())\n        cur.consequent = []\n        this.next()\n        if (isCase) cur.test = this.parseExpression()\n        else cur.test = null\n        this.expect(tt.colon)\n      } else {\n        if (!cur) {\n          node.cases.push(cur = this.startNode())\n          cur.consequent = []\n          cur.test = null\n        }\n        cur.consequent.push(this.parseStatement())\n      }\n    }\n    if (cur) this.finishNode(cur, \"SwitchCase\")\n    this.popCx()\n    this.eat(tt.braceR)\n    return this.finishNode(node, \"SwitchStatement\")\n\n  case tt._throw:\n    this.next()\n    node.argument = this.parseExpression()\n    this.semicolon()\n    return this.finishNode(node, \"ThrowStatement\")\n\n  case tt._try:\n    this.next()\n    node.block = this.parseBlock()\n    node.handler = null\n    if (this.tok.type === tt._catch) {\n      let clause = this.startNode()\n      this.next()\n      this.expect(tt.parenL)\n      clause.param = this.toAssignable(this.parseExprAtom(), true)\n      this.expect(tt.parenR)\n      clause.body = this.parseBlock()\n      node.handler = this.finishNode(clause, \"CatchClause\")\n    }\n    node.finalizer = this.eat(tt._finally) ? this.parseBlock() : null\n    if (!node.handler && !node.finalizer) return node.block\n    return this.finishNode(node, \"TryStatement\")\n\n  case tt._var:\n  case tt._const:\n    return this.parseVar(false, kind || this.tok.value)\n\n  case tt._while:\n    this.next()\n    node.test = this.parseParenExpression()\n    node.body = this.parseStatement()\n    return this.finishNode(node, \"WhileStatement\")\n\n  case tt._with:\n    this.next()\n    node.object = this.parseParenExpression()\n    node.body = this.parseStatement()\n    return this.finishNode(node, \"WithStatement\")\n\n  case tt.braceL:\n    return this.parseBlock()\n\n  case tt.semi:\n    this.next()\n    return this.finishNode(node, \"EmptyStatement\")\n\n  case tt._class:\n    return this.parseClass(true)\n\n  case tt._import:\n    return this.parseImport()\n\n  case tt._export:\n    return this.parseExport()\n\n  default:\n    let expr = this.parseExpression()\n    if (isDummy(expr)) {\n      this.next()\n      if (this.tok.type === tt.eof) return this.finishNode(node, \"EmptyStatement\")\n      return this.parseStatement()\n    } else if (starttype === tt.name && expr.type === \"Identifier\" && this.eat(tt.colon)) {\n      node.body = this.parseStatement()\n      node.label = expr\n      return this.finishNode(node, \"LabeledStatement\")\n    } else {\n      node.expression = expr\n      this.semicolon()\n      return this.finishNode(node, \"ExpressionStatement\")\n    }\n  }\n}\n\nlp.parseBlock = function() {\n  let node = this.startNode()\n  this.pushCx()\n  this.expect(tt.braceL)\n  let blockIndent = this.curIndent, line = this.curLineStart\n  node.body = []\n  while (!this.closes(tt.braceR, blockIndent, line, true))\n    node.body.push(this.parseStatement())\n  this.popCx()\n  this.eat(tt.braceR)\n  return this.finishNode(node, \"BlockStatement\")\n}\n\nlp.parseFor = function(node, init) {\n  node.init = init\n  node.test = node.update = null\n  if (this.eat(tt.semi) && this.tok.type !== tt.semi) node.test = this.parseExpression()\n  if (this.eat(tt.semi) && this.tok.type !== tt.parenR) node.update = this.parseExpression()\n  this.popCx()\n  this.expect(tt.parenR)\n  node.body = this.parseStatement()\n  return this.finishNode(node, \"ForStatement\")\n}\n\nlp.parseForIn = function(node, init) {\n  let type = this.tok.type === tt._in ? \"ForInStatement\" : \"ForOfStatement\"\n  this.next()\n  node.left = init\n  node.right = this.parseExpression()\n  this.popCx()\n  this.expect(tt.parenR)\n  node.body = this.parseStatement()\n  return this.finishNode(node, type)\n}\n\nlp.parseVar = function(noIn, kind) {\n  let node = this.startNode()\n  node.kind = kind\n  this.next()\n  node.declarations = []\n  do {\n    let decl = this.startNode()\n    decl.id = this.options.ecmaVersion >= 6 ? this.toAssignable(this.parseExprAtom(), true) : this.parseIdent()\n    decl.init = this.eat(tt.eq) ? this.parseMaybeAssign(noIn) : null\n    node.declarations.push(this.finishNode(decl, \"VariableDeclarator\"))\n  } while (this.eat(tt.comma))\n  if (!node.declarations.length) {\n    let decl = this.startNode()\n    decl.id = this.dummyIdent()\n    node.declarations.push(this.finishNode(decl, \"VariableDeclarator\"))\n  }\n  if (!noIn) this.semicolon()\n  return this.finishNode(node, \"VariableDeclaration\")\n}\n\nlp.parseClass = function(isStatement) {\n  let node = this.startNode()\n  this.next()\n  if (this.tok.type === tt.name) node.id = this.parseIdent()\n  else if (isStatement) node.id = this.dummyIdent()\n  else node.id = null\n  node.superClass = this.eat(tt._extends) ? this.parseExpression() : null\n  node.body = this.startNode()\n  node.body.body = []\n  this.pushCx()\n  let indent = this.curIndent + 1, line = this.curLineStart\n  this.eat(tt.braceL)\n  if (this.curIndent + 1 < indent) { indent = this.curIndent; line = this.curLineStart }\n  while (!this.closes(tt.braceR, indent, line)) {\n    if (this.semicolon()) continue\n    let method = this.startNode(), isGenerator\n    if (this.options.ecmaVersion >= 6) {\n      method.static = false\n      isGenerator = this.eat(tt.star)\n    }\n    this.parsePropertyName(method)\n    if (isDummy(method.key)) { if (isDummy(this.parseMaybeAssign())) this.next(); this.eat(tt.comma); continue }\n    if (method.key.type === \"Identifier\" && !method.computed && method.key.name === \"static\" &&\n        (this.tok.type != tt.parenL && this.tok.type != tt.braceL)) {\n      method.static = true\n      isGenerator = this.eat(tt.star)\n      this.parsePropertyName(method)\n    } else {\n      method.static = false\n    }\n    if (this.options.ecmaVersion >= 5 && method.key.type === \"Identifier\" &&\n        !method.computed && (method.key.name === \"get\" || method.key.name === \"set\") &&\n        this.tok.type !== tt.parenL && this.tok.type !== tt.braceL) {\n      method.kind = method.key.name\n      this.parsePropertyName(method)\n      method.value = this.parseMethod(false)\n    } else {\n      if (!method.computed && !method.static && !isGenerator && (\n        method.key.type === \"Identifier\" && method.key.name === \"constructor\" ||\n          method.key.type === \"Literal\" && method.key.value === \"constructor\")) {\n        method.kind = \"constructor\"\n      } else {\n        method.kind =  \"method\"\n      }\n      method.value = this.parseMethod(isGenerator)\n    }\n    node.body.body.push(this.finishNode(method, \"MethodDefinition\"))\n  }\n  this.popCx()\n  if (!this.eat(tt.braceR)) {\n    // If there is no closing brace, make the node span to the start\n    // of the next token (this is useful for Tern)\n    this.last.end = this.tok.start\n    if (this.options.locations) this.last.loc.end = this.tok.loc.start\n  }\n  this.semicolon()\n  this.finishNode(node.body, \"ClassBody\")\n  return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\")\n}\n\nlp.parseFunction = function(node, isStatement) {\n  this.initFunction(node)\n  if (this.options.ecmaVersion >= 6) {\n    node.generator = this.eat(tt.star)\n  }\n  if (this.tok.type === tt.name) node.id = this.parseIdent()\n  else if (isStatement) node.id = this.dummyIdent()\n  node.params = this.parseFunctionParams()\n  node.body = this.parseBlock()\n  return this.finishNode(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\")\n}\n\nlp.parseExport = function() {\n  let node = this.startNode()\n  this.next()\n  if (this.eat(tt.star)) {\n    node.source = this.eatContextual(\"from\") ? this.parseExprAtom() : this.dummyString()\n    return this.finishNode(node, \"ExportAllDeclaration\")\n  }\n  if (this.eat(tt._default)) {\n    let expr = this.parseMaybeAssign()\n    if (expr.id) {\n      switch (expr.type) {\n      case \"FunctionExpression\": expr.type = \"FunctionDeclaration\"; break\n      case \"ClassExpression\": expr.type = \"ClassDeclaration\"; break\n      }\n    }\n    node.declaration = expr\n    this.semicolon()\n    return this.finishNode(node, \"ExportDefaultDeclaration\")\n  }\n  if (this.tok.type.keyword || this.toks.isLet()) {\n    node.declaration = this.parseStatement()\n    node.specifiers = []\n    node.source = null\n  } else {\n    node.declaration = null\n    node.specifiers = this.parseExportSpecifierList()\n    node.source = this.eatContextual(\"from\") ? this.parseExprAtom() : null\n    this.semicolon()\n  }\n  return this.finishNode(node, \"ExportNamedDeclaration\")\n}\n\nlp.parseImport = function() {\n  let node = this.startNode()\n  this.next()\n  if (this.tok.type === tt.string) {\n    node.specifiers = []\n    node.source = this.parseExprAtom()\n    node.kind = ''\n  } else {\n    let elt\n    if (this.tok.type === tt.name && this.tok.value !== \"from\") {\n      elt = this.startNode()\n      elt.local = this.parseIdent()\n      this.finishNode(elt, \"ImportDefaultSpecifier\")\n      this.eat(tt.comma)\n    }\n    node.specifiers = this.parseImportSpecifierList()\n    node.source = this.eatContextual(\"from\") && this.tok.type == tt.string ? this.parseExprAtom() : this.dummyString()\n    if (elt) node.specifiers.unshift(elt)\n  }\n  this.semicolon()\n  return this.finishNode(node, \"ImportDeclaration\")\n}\n\nlp.parseImportSpecifierList = function() {\n  let elts = []\n  if (this.tok.type === tt.star) {\n    let elt = this.startNode()\n    this.next()\n    elt.local = this.eatContextual(\"as\") ? this.parseIdent() : this.dummyIdent()\n    elts.push(this.finishNode(elt, \"ImportNamespaceSpecifier\"))\n  } else {\n    let indent = this.curIndent, line = this.curLineStart, continuedLine = this.nextLineStart\n    this.pushCx()\n    this.eat(tt.braceL)\n    if (this.curLineStart > continuedLine) continuedLine = this.curLineStart\n    while (!this.closes(tt.braceR, indent + (this.curLineStart <= continuedLine ? 1 : 0), line)) {\n      let elt = this.startNode()\n      if (this.eat(tt.star)) {\n        elt.local = this.eatContextual(\"as\") ? this.parseIdent() : this.dummyIdent()\n        this.finishNode(elt, \"ImportNamespaceSpecifier\")\n      } else {\n        if (this.isContextual(\"from\")) break\n        elt.imported = this.parseIdent()\n        if (isDummy(elt.imported)) break\n        elt.local = this.eatContextual(\"as\") ? this.parseIdent() : elt.imported\n        this.finishNode(elt, \"ImportSpecifier\")\n      }\n      elts.push(elt)\n      this.eat(tt.comma)\n    }\n    this.eat(tt.braceR)\n    this.popCx()\n  }\n  return elts\n}\n\nlp.parseExportSpecifierList = function() {\n  let elts = []\n  let indent = this.curIndent, line = this.curLineStart, continuedLine = this.nextLineStart\n  this.pushCx()\n  this.eat(tt.braceL)\n  if (this.curLineStart > continuedLine) continuedLine = this.curLineStart\n  while (!this.closes(tt.braceR, indent + (this.curLineStart <= continuedLine ? 1 : 0), line)) {\n    if (this.isContextual(\"from\")) break\n    let elt = this.startNode()\n    elt.local = this.parseIdent()\n    if (isDummy(elt.local)) break\n    elt.exported = this.eatContextual(\"as\") ? this.parseIdent() : elt.local\n    this.finishNode(elt, \"ExportSpecifier\")\n    elts.push(elt)\n    this.eat(tt.comma)\n  }\n  this.eat(tt.braceR)\n  this.popCx()\n  return elts\n}\n"]}