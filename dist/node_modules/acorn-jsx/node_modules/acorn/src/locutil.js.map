{"version":3,"sources":["../../../../../../src/node_modules/acorn-jsx/node_modules/acorn/src/locutil.js"],"names":["getLineInfo","Position","line","col","column","n","SourceLocation","p","start","end","sourceFile","source","input","offset","cur","lineBreakG","lastIndex","match","exec","index","length"],"mappings":";;;;;;;;;QA8BgBA,W,GAAAA,W;;AA9BhB;;;;AAEA;AACA;;IAEaC,Q,WAAAA,Q;AACX,oBAAYC,IAAZ,EAAkBC,GAAlB,EAAuB;AAAA;;AACrB,SAAKD,IAAL,GAAYA,IAAZ;AACA,SAAKE,MAAL,GAAcD,GAAd;AACD;;;;2BAEME,C,EAAG;AACR,aAAO,IAAIJ,QAAJ,CAAa,KAAKC,IAAlB,EAAwB,KAAKE,MAAL,GAAcC,CAAtC,CAAP;AACD;;;;;;IAGUC,c,WAAAA,c,GACX,wBAAYC,CAAZ,EAAeC,KAAf,EAAsBC,GAAtB,EAA2B;AAAA;;AACzB,OAAKD,KAAL,GAAaA,KAAb;AACA,OAAKC,GAAL,GAAWA,GAAX;AACA,MAAIF,EAAEG,UAAF,KAAiB,IAArB,EAA2B,KAAKC,MAAL,GAAcJ,EAAEG,UAAhB;AAC5B,C;;AAGH;AACA;AACA;AACA;AACA;;AAEO,SAASV,WAAT,CAAqBY,KAArB,EAA4BC,MAA5B,EAAoC;AACzC,OAAK,IAAIX,OAAO,CAAX,EAAcY,MAAM,CAAzB,IAA8B;AAC5BC,2BAAWC,SAAX,GAAuBF,GAAvB;AACA,QAAIG,QAAQF,uBAAWG,IAAX,CAAgBN,KAAhB,CAAZ;AACA,QAAIK,SAASA,MAAME,KAAN,GAAcN,MAA3B,EAAmC;AACjC,QAAEX,IAAF;AACAY,YAAMG,MAAME,KAAN,GAAcF,MAAM,CAAN,EAASG,MAA7B;AACD,KAHD,MAGO;AACL,aAAO,IAAInB,QAAJ,CAAaC,IAAb,EAAmBW,SAASC,GAA5B,CAAP;AACD;AACF;AACF","file":"locutil.js","sourcesContent":["import {lineBreakG} from \"./whitespace\"\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nexport class Position {\n  constructor(line, col) {\n    this.line = line\n    this.column = col\n  }\n\n  offset(n) {\n    return new Position(this.line, this.column + n)\n  }\n}\n\nexport class SourceLocation {\n  constructor(p, start, end) {\n    this.start = start\n    this.end = end\n    if (p.sourceFile !== null) this.source = p.sourceFile\n  }\n}\n\n// The `getLineInfo` function is mostly useful when the\n// `locations` option is off (for performance reasons) and you\n// want to find the line/column position for a given character\n// offset. `input` should be the code string that the offset refers\n// into.\n\nexport function getLineInfo(input, offset) {\n  for (let line = 1, cur = 0;;) {\n    lineBreakG.lastIndex = cur\n    let match = lineBreakG.exec(input)\n    if (match && match.index < offset) {\n      ++line\n      cur = match.index + match[0].length\n    } else {\n      return new Position(line, offset - cur)\n    }\n  }\n}\n"]}