{"version":3,"sources":["../../../../../../src/node_modules/acorn-jsx/node_modules/acorn/src/index.js"],"names":["Parser","plugins","defaultOptions","Position","SourceLocation","getLineInfo","Node","TokenType","types","TokContext","isIdentifierChar","isIdentifierStart","Token","isNewLine","lineBreak","lineBreakG","parse","parseExpressionAt","tokenizer","version","input","options","pos","p","nextToken","parseExpression"],"mappings":";;;;;;;AAqBA;;;;;kBAOQA,M;;;;;;kBAAQC,O;;;;;;;;;oBACRC,c;;;;;;;;;oBACAC,Q;;;;;;oBAAUC,c;;;;;;oBAAgBC,W;;;;;;;;;iBAC1BC,I;;;;;;;;;sBACAC,S;;;;;;sBAAWC,K;;;;;;;;;yBACXC,U;;;;;;yBAAYD,K;;;;;;;;;uBACZE,gB;;;;;;uBAAkBC,iB;;;;;;;;;qBAClBC,K;;;;;;;;;uBACAC,S;;;;;;uBAAWC,S;;;;;;uBAAWC,U;;;QAWdC,K,GAAAA,K;QAQAC,iB,GAAAA,iB;QASAC,S,GAAAA,S;;AA1ChB;;AACA;;AACA;;AACA;;AACA;;AAYO,IAAMC,4BAAU,OAAhB;;AAEP;AACA;AACA;AACA;AACA;AACA;;AAEO,SAASH,KAAT,CAAeI,KAAf,EAAsBC,OAAtB,EAA+B;AACpC,SAAO,IAAIrB,aAAJ,CAAWqB,OAAX,EAAoBD,KAApB,EAA2BJ,KAA3B,EAAP;AACD;;AAED;AACA;AACA;;AAEO,SAASC,iBAAT,CAA2BG,KAA3B,EAAkCE,GAAlC,EAAuCD,OAAvC,EAAgD;AACrD,MAAIE,IAAI,IAAIvB,aAAJ,CAAWqB,OAAX,EAAoBD,KAApB,EAA2BE,GAA3B,CAAR;AACAC,IAAEC,SAAF;AACA,SAAOD,EAAEE,eAAF,EAAP;AACD;;AAED;AACA;;AAEO,SAASP,SAAT,CAAmBE,KAAnB,EAA0BC,OAA1B,EAAmC;AACxC,SAAO,IAAIrB,aAAJ,CAAWqB,OAAX,EAAoBD,KAApB,CAAP;AACD","file":"index.js","sourcesContent":["// Acorn is a tiny, fast JavaScript parser written in JavaScript.\n//\n// Acorn was written by Marijn Haverbeke, Ingvar Stepanyan, and\n// various contributors and released under an MIT license.\n//\n// Git repositories for Acorn are available at\n//\n//     http://marijnhaverbeke.nl/git/acorn\n//     https://github.com/ternjs/acorn.git\n//\n// Please use the [github bug tracker][ghbt] to report issues.\n//\n// [ghbt]: https://github.com/ternjs/acorn/issues\n//\n// This file defines the main parser interface. The library also comes\n// with a [error-tolerant parser][dammit] and an\n// [abstract syntax tree walker][walk], defined in other files.\n//\n// [dammit]: acorn_loose.js\n// [walk]: util/walk.js\n\nimport {Parser} from \"./state\"\nimport \"./parseutil\"\nimport \"./statement\"\nimport \"./lval\"\nimport \"./expression\"\nimport \"./location\"\n\nexport {Parser, plugins} from \"./state\"\nexport {defaultOptions} from \"./options\"\nexport {Position, SourceLocation, getLineInfo} from \"./locutil\"\nexport {Node} from \"./node\"\nexport {TokenType, types as tokTypes} from \"./tokentype\"\nexport {TokContext, types as tokContexts} from \"./tokencontext\"\nexport {isIdentifierChar, isIdentifierStart} from \"./identifier\"\nexport {Token} from \"./tokenize\"\nexport {isNewLine, lineBreak, lineBreakG} from \"./whitespace\"\n\nexport const version = \"3.3.0\"\n\n// The main exported interface (under `self.acorn` when in the\n// browser) is a `parse` function that takes a code string and\n// returns an abstract syntax tree as specified by [Mozilla parser\n// API][api].\n//\n// [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API\n\nexport function parse(input, options) {\n  return new Parser(options, input).parse()\n}\n\n// This function tries to parse a single expression at a given\n// offset in a string. Useful for parsing mixed-language formats\n// that embed JavaScript expressions.\n\nexport function parseExpressionAt(input, pos, options) {\n  let p = new Parser(options, input, pos)\n  p.nextToken()\n  return p.parseExpression()\n}\n\n// Acorn is organized as a tokenizer and a recursive-descent parser.\n// The `tokenizer` export provides an interface to the tokenizer.\n\nexport function tokenizer(input, options) {\n  return new Parser(options, input)\n}\n"]}