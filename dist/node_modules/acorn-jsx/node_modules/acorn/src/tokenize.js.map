{"version":3,"sources":["../../../../../../src/node_modules/acorn-jsx/node_modules/acorn/src/tokenize.js"],"names":["Token","p","type","value","start","end","options","locations","loc","SourceLocation","startLoc","endLoc","ranges","range","pp","Parser","prototype","isRhino","Packages","Object","toString","call","next","onToken","lastTokEnd","lastTokStart","lastTokEndLoc","lastTokStartLoc","nextToken","getToken","Symbol","iterator","self","token","done","tt","eof","setStrict","strict","num","string","pos","lineStart","input","lastIndexOf","curLine","curContext","context","length","preserveSpace","skipSpace","curPosition","finishToken","override","readToken","fullCharCodeAtPos","code","ecmaVersion","readWord","getTokenFromCode","charCodeAt","skipBlockComment","onComment","indexOf","raise","lineBreakG","lastIndex","match","exec","index","slice","skipLineComment","startSkip","ch","loop","nonASCIIwhitespace","test","String","fromCharCode","val","prevType","updateContext","readToken_dot","readNumber","next2","ellipsis","dot","readToken_slash","exprAllowed","readRegexp","finishOp","assign","slash","readToken_mult_modulo_exp","size","tokentype","star","modulo","starstar","readToken_pipe_amp","logicalOR","logicalAND","bitwiseOR","bitwiseAND","readToken_caret","bitwiseXOR","readToken_plus_min","lineBreak","incDec","plusMin","readToken_lt_gt","bitShift","inModule","unexpected","relational","readToken_eq_excl","equality","arrow","eq","prefix","parenL","parenR","semi","comma","bracketL","bracketR","braceL","braceR","colon","question","backQuote","readRadixNumber","readString","codePointToString","str","tryCreateRegexp","src","flags","throwErrorAt","parser","RegExp","e","undefined","SyntaxError","message","regexpUnicodeSupport","escaped","inClass","charAt","content","mods","readWord1","tmp","tmpFlags","validFlags","replace","_match","offset","Number","regexp","pattern","readInt","radix","len","total","i","Infinity","startsWithDot","isFloat","octal","parseFloat","parseInt","readCodePoint","codePos","readHexChar","quote","out","chunkStart","readEscapedChar","readTmplToken","template","dollarBraceL","inTemplate","octalStr","substr","n","containsEsc","word","first","astral","escStart","esc","isIdentifierStart","isIdentifierChar","name","keywords","keywordTypes"],"mappings":"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","file":"tokenize.js","sourcesContent":["import {isIdentifierStart, isIdentifierChar} from \"./identifier\"\nimport {types as tt, keywords as keywordTypes} from \"./tokentype\"\nimport {Parser} from \"./state\"\nimport {SourceLocation} from \"./locutil\"\nimport {lineBreak, lineBreakG, isNewLine, nonASCIIwhitespace} from \"./whitespace\"\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nexport class Token {\n  constructor(p) {\n    this.type = p.type\n    this.value = p.value\n    this.start = p.start\n    this.end = p.end\n    if (p.options.locations)\n      this.loc = new SourceLocation(p, p.startLoc, p.endLoc)\n    if (p.options.ranges)\n      this.range = [p.start, p.end]\n  }\n}\n\n// ## Tokenizer\n\nconst pp = Parser.prototype\n\n// Are we running under Rhino?\nconst isRhino = typeof Packages == \"object\" && Object.prototype.toString.call(Packages) == \"[object JavaPackage]\"\n\n// Move to the next token\n\npp.next = function() {\n  if (this.options.onToken)\n    this.options.onToken(new Token(this))\n\n  this.lastTokEnd = this.end\n  this.lastTokStart = this.start\n  this.lastTokEndLoc = this.endLoc\n  this.lastTokStartLoc = this.startLoc\n  this.nextToken()\n}\n\npp.getToken = function() {\n  this.next()\n  return new Token(this)\n}\n\n// If we're in an ES6 environment, make parsers iterable\nif (typeof Symbol !== \"undefined\")\n  pp[Symbol.iterator] = function () {\n    let self = this\n    return {next: function () {\n      let token = self.getToken()\n      return {\n        done: token.type === tt.eof,\n        value: token\n      }\n    }}\n  }\n\n// Toggle strict mode. Re-reads the next number or string to please\n// pedantic tests (`\"use strict\"; 010;` should fail).\n\npp.setStrict = function(strict) {\n  this.strict = strict\n  if (this.type !== tt.num && this.type !== tt.string) return\n  this.pos = this.start\n  if (this.options.locations) {\n    while (this.pos < this.lineStart) {\n      this.lineStart = this.input.lastIndexOf(\"\\n\", this.lineStart - 2) + 1\n      --this.curLine\n    }\n  }\n  this.nextToken()\n}\n\npp.curContext = function() {\n  return this.context[this.context.length - 1]\n}\n\n// Read a single token, updating the parser object's token-related\n// properties.\n\npp.nextToken = function() {\n  let curContext = this.curContext()\n  if (!curContext || !curContext.preserveSpace) this.skipSpace()\n\n  this.start = this.pos\n  if (this.options.locations) this.startLoc = this.curPosition()\n  if (this.pos >= this.input.length) return this.finishToken(tt.eof)\n\n  if (curContext.override) return curContext.override(this)\n  else this.readToken(this.fullCharCodeAtPos())\n}\n\npp.readToken = function(code) {\n  // Identifier or keyword. '\\uXXXX' sequences are allowed in\n  // identifiers, so '\\' also dispatches to that.\n  if (isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92 /* '\\' */)\n    return this.readWord()\n\n  return this.getTokenFromCode(code)\n}\n\npp.fullCharCodeAtPos = function() {\n  let code = this.input.charCodeAt(this.pos)\n  if (code <= 0xd7ff || code >= 0xe000) return code\n  let next = this.input.charCodeAt(this.pos + 1)\n  return (code << 10) + next - 0x35fdc00\n}\n\npp.skipBlockComment = function() {\n  let startLoc = this.options.onComment && this.curPosition()\n  let start = this.pos, end = this.input.indexOf(\"*/\", this.pos += 2)\n  if (end === -1) this.raise(this.pos - 2, \"Unterminated comment\")\n  this.pos = end + 2\n  if (this.options.locations) {\n    lineBreakG.lastIndex = start\n    let match\n    while ((match = lineBreakG.exec(this.input)) && match.index < this.pos) {\n      ++this.curLine\n      this.lineStart = match.index + match[0].length\n    }\n  }\n  if (this.options.onComment)\n    this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos,\n                           startLoc, this.curPosition())\n}\n\npp.skipLineComment = function(startSkip) {\n  let start = this.pos\n  let startLoc = this.options.onComment && this.curPosition()\n  let ch = this.input.charCodeAt(this.pos+=startSkip)\n  while (this.pos < this.input.length && ch !== 10 && ch !== 13 && ch !== 8232 && ch !== 8233) {\n    ++this.pos\n    ch = this.input.charCodeAt(this.pos)\n  }\n  if (this.options.onComment)\n    this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos,\n                           startLoc, this.curPosition())\n}\n\n// Called at the start of the parse and after every token. Skips\n// whitespace and comments, and.\n\npp.skipSpace = function() {\n  loop: while (this.pos < this.input.length) {\n    let ch = this.input.charCodeAt(this.pos)\n    switch (ch) {\n      case 32: case 160: // ' '\n        ++this.pos\n        break\n      case 13:\n        if (this.input.charCodeAt(this.pos + 1) === 10) {\n          ++this.pos\n        }\n      case 10: case 8232: case 8233:\n        ++this.pos\n        if (this.options.locations) {\n          ++this.curLine\n          this.lineStart = this.pos\n        }\n        break\n      case 47: // '/'\n        switch (this.input.charCodeAt(this.pos + 1)) {\n          case 42: // '*'\n            this.skipBlockComment()\n            break\n          case 47:\n            this.skipLineComment(2)\n            break\n          default:\n            break loop\n        }\n        break\n      default:\n        if (ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {\n          ++this.pos\n        } else {\n          break loop\n        }\n    }\n  }\n}\n\n// Called at the end of every token. Sets `end`, `val`, and\n// maintains `context` and `exprAllowed`, and skips the space after\n// the token, so that the next one's `start` will point at the\n// right position.\n\npp.finishToken = function(type, val) {\n  this.end = this.pos\n  if (this.options.locations) this.endLoc = this.curPosition()\n  let prevType = this.type\n  this.type = type\n  this.value = val\n\n  this.updateContext(prevType)\n}\n\n// ### Token reading\n\n// This is the function that is called to fetch the next token. It\n// is somewhat obscure, because it works in character codes rather\n// than characters, and because operator parsing has been inlined\n// into it.\n//\n// All in the name of speed.\n//\npp.readToken_dot = function() {\n  let next = this.input.charCodeAt(this.pos + 1)\n  if (next >= 48 && next <= 57) return this.readNumber(true)\n  let next2 = this.input.charCodeAt(this.pos + 2)\n  if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) { // 46 = dot '.'\n    this.pos += 3\n    return this.finishToken(tt.ellipsis)\n  } else {\n    ++this.pos\n    return this.finishToken(tt.dot)\n  }\n}\n\npp.readToken_slash = function() { // '/'\n  let next = this.input.charCodeAt(this.pos + 1)\n  if (this.exprAllowed) {++this.pos; return this.readRegexp()}\n  if (next === 61) return this.finishOp(tt.assign, 2)\n  return this.finishOp(tt.slash, 1)\n}\n\npp.readToken_mult_modulo_exp = function(code) { // '%*'\n  let next = this.input.charCodeAt(this.pos + 1)\n  let size = 1\n  let tokentype = code === 42 ? tt.star : tt.modulo\n\n  // exponentiation operator ** and **=\n  if (this.options.ecmaVersion >= 7 && next === 42) {\n    ++size\n    tokentype = tt.starstar\n    next = this.input.charCodeAt(this.pos + 2)\n  }\n\n  if (next === 61) return this.finishOp(tt.assign, size + 1)\n  return this.finishOp(tokentype, size)\n}\n\npp.readToken_pipe_amp = function(code) { // '|&'\n  let next = this.input.charCodeAt(this.pos + 1)\n  if (next === code) return this.finishOp(code === 124 ? tt.logicalOR : tt.logicalAND, 2)\n  if (next === 61) return this.finishOp(tt.assign, 2)\n  return this.finishOp(code === 124 ? tt.bitwiseOR : tt.bitwiseAND, 1)\n}\n\npp.readToken_caret = function() { // '^'\n  let next = this.input.charCodeAt(this.pos + 1)\n  if (next === 61) return this.finishOp(tt.assign, 2)\n  return this.finishOp(tt.bitwiseXOR, 1)\n}\n\npp.readToken_plus_min = function(code) { // '+-'\n  let next = this.input.charCodeAt(this.pos + 1)\n  if (next === code) {\n    if (next == 45 && this.input.charCodeAt(this.pos + 2) == 62 &&\n        lineBreak.test(this.input.slice(this.lastTokEnd, this.pos))) {\n      // A `-->` line comment\n      this.skipLineComment(3)\n      this.skipSpace()\n      return this.nextToken()\n    }\n    return this.finishOp(tt.incDec, 2)\n  }\n  if (next === 61) return this.finishOp(tt.assign, 2)\n  return this.finishOp(tt.plusMin, 1)\n}\n\npp.readToken_lt_gt = function(code) { // '<>'\n  let next = this.input.charCodeAt(this.pos + 1)\n  let size = 1\n  if (next === code) {\n    size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2\n    if (this.input.charCodeAt(this.pos + size) === 61) return this.finishOp(tt.assign, size + 1)\n    return this.finishOp(tt.bitShift, size)\n  }\n  if (next == 33 && code == 60 && this.input.charCodeAt(this.pos + 2) == 45 &&\n      this.input.charCodeAt(this.pos + 3) == 45) {\n    if (this.inModule) this.unexpected()\n    // `<!--`, an XML-style comment that should be interpreted as a line comment\n    this.skipLineComment(4)\n    this.skipSpace()\n    return this.nextToken()\n  }\n  if (next === 61) size = 2\n  return this.finishOp(tt.relational, size)\n}\n\npp.readToken_eq_excl = function(code) { // '=!'\n  let next = this.input.charCodeAt(this.pos + 1)\n  if (next === 61) return this.finishOp(tt.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2)\n  if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) { // '=>'\n    this.pos += 2\n    return this.finishToken(tt.arrow)\n  }\n  return this.finishOp(code === 61 ? tt.eq : tt.prefix, 1)\n}\n\npp.getTokenFromCode = function(code) {\n  switch (code) {\n    // The interpretation of a dot depends on whether it is followed\n    // by a digit or another two dots.\n  case 46: // '.'\n    return this.readToken_dot()\n\n    // Punctuation tokens.\n  case 40: ++this.pos; return this.finishToken(tt.parenL)\n  case 41: ++this.pos; return this.finishToken(tt.parenR)\n  case 59: ++this.pos; return this.finishToken(tt.semi)\n  case 44: ++this.pos; return this.finishToken(tt.comma)\n  case 91: ++this.pos; return this.finishToken(tt.bracketL)\n  case 93: ++this.pos; return this.finishToken(tt.bracketR)\n  case 123: ++this.pos; return this.finishToken(tt.braceL)\n  case 125: ++this.pos; return this.finishToken(tt.braceR)\n  case 58: ++this.pos; return this.finishToken(tt.colon)\n  case 63: ++this.pos; return this.finishToken(tt.question)\n\n  case 96: // '`'\n    if (this.options.ecmaVersion < 6) break\n    ++this.pos\n    return this.finishToken(tt.backQuote)\n\n  case 48: // '0'\n    let next = this.input.charCodeAt(this.pos + 1)\n    if (next === 120 || next === 88) return this.readRadixNumber(16) // '0x', '0X' - hex number\n    if (this.options.ecmaVersion >= 6) {\n      if (next === 111 || next === 79) return this.readRadixNumber(8) // '0o', '0O' - octal number\n      if (next === 98 || next === 66) return this.readRadixNumber(2) // '0b', '0B' - binary number\n    }\n    // Anything else beginning with a digit is an integer, octal\n    // number, or float.\n  case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: // 1-9\n    return this.readNumber(false)\n\n    // Quotes produce strings.\n  case 34: case 39: // '\"', \"'\"\n    return this.readString(code)\n\n    // Operators are parsed inline in tiny state machines. '=' (61) is\n    // often referred to. `finishOp` simply skips the amount of\n    // characters it is given as second argument, and returns a token\n    // of the type given by its first argument.\n\n  case 47: // '/'\n    return this.readToken_slash()\n\n  case 37: case 42: // '%*'\n    return this.readToken_mult_modulo_exp(code)\n\n  case 124: case 38: // '|&'\n    return this.readToken_pipe_amp(code)\n\n  case 94: // '^'\n    return this.readToken_caret()\n\n  case 43: case 45: // '+-'\n    return this.readToken_plus_min(code)\n\n  case 60: case 62: // '<>'\n    return this.readToken_lt_gt(code)\n\n  case 61: case 33: // '=!'\n    return this.readToken_eq_excl(code)\n\n  case 126: // '~'\n    return this.finishOp(tt.prefix, 1)\n  }\n\n  this.raise(this.pos, \"Unexpected character '\" + codePointToString(code) + \"'\")\n}\n\npp.finishOp = function(type, size) {\n  let str = this.input.slice(this.pos, this.pos + size)\n  this.pos += size\n  return this.finishToken(type, str)\n}\n\n// Parse a regular expression. Some context-awareness is necessary,\n// since a '/' inside a '[]' set does not end the expression.\n\nfunction tryCreateRegexp(src, flags, throwErrorAt, parser) {\n  try {\n    return new RegExp(src, flags)\n  } catch (e) {\n    if (throwErrorAt !== undefined) {\n      if (e instanceof SyntaxError) parser.raise(throwErrorAt, \"Error parsing regular expression: \" + e.message)\n      throw e\n    }\n  }\n}\n\nvar regexpUnicodeSupport = !!tryCreateRegexp(\"\\uffff\", \"u\")\n\npp.readRegexp = function() {\n  let escaped, inClass, start = this.pos\n  for (;;) {\n    if (this.pos >= this.input.length) this.raise(start, \"Unterminated regular expression\")\n    let ch = this.input.charAt(this.pos)\n    if (lineBreak.test(ch)) this.raise(start, \"Unterminated regular expression\")\n    if (!escaped) {\n      if (ch === \"[\") inClass = true\n      else if (ch === \"]\" && inClass) inClass = false\n      else if (ch === \"/\" && !inClass) break\n      escaped = ch === \"\\\\\"\n    } else escaped = false\n    ++this.pos\n  }\n  let content = this.input.slice(start, this.pos)\n  ++this.pos\n  // Need to use `readWord1` because '\\uXXXX' sequences are allowed\n  // here (don't ask).\n  let mods = this.readWord1()\n  let tmp = content, tmpFlags = \"\"\n  if (mods) {\n    let validFlags = /^[gim]*$/\n    if (this.options.ecmaVersion >= 6) validFlags = /^[gimuy]*$/\n    if (!validFlags.test(mods)) this.raise(start, \"Invalid regular expression flag\")\n    if (mods.indexOf(\"u\") >= 0) {\n      if (regexpUnicodeSupport) {\n        tmpFlags = \"u\"\n      } else {\n        // Replace each astral symbol and every Unicode escape sequence that\n        // possibly represents an astral symbol or a paired surrogate with a\n        // single ASCII symbol to avoid throwing on regular expressions that\n        // are only valid in combination with the `/u` flag.\n        // Note: replacing with the ASCII symbol `x` might cause false\n        // negatives in unlikely scenarios. For example, `[\\u{61}-b]` is a\n        // perfectly valid pattern that is equivalent to `[a-b]`, but it would\n        // be replaced by `[x-b]` which throws an error.\n        tmp = tmp.replace(/\\\\u\\{([0-9a-fA-F]+)\\}/g, (_match, code, offset) => {\n          code = Number(\"0x\" + code)\n          if (code > 0x10FFFF) this.raise(start + offset + 3, \"Code point out of bounds\")\n          return \"x\"\n        })\n        tmp = tmp.replace(/\\\\u([a-fA-F0-9]{4})|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g, \"x\")\n        tmpFlags = tmpFlags.replace(\"u\", \"\")\n      }\n    }\n  }\n  // Detect invalid regular expressions.\n  let value = null\n  // Rhino's regular expression parser is flaky and throws uncatchable exceptions,\n  // so don't do detection if we are running under Rhino\n  if (!isRhino) {\n    tryCreateRegexp(tmp, tmpFlags, start, this)\n    // Get a regular expression object for this pattern-flag pair, or `null` in\n    // case the current environment doesn't support the flags it uses.\n    value = tryCreateRegexp(content, mods)\n  }\n  return this.finishToken(tt.regexp, {pattern: content, flags: mods, value: value})\n}\n\n// Read an integer in the given radix. Return null if zero digits\n// were read, the integer value otherwise. When `len` is given, this\n// will return `null` unless the integer has exactly `len` digits.\n\npp.readInt = function(radix, len) {\n  let start = this.pos, total = 0\n  for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n    let code = this.input.charCodeAt(this.pos), val\n    if (code >= 97) val = code - 97 + 10 // a\n    else if (code >= 65) val = code - 65 + 10 // A\n    else if (code >= 48 && code <= 57) val = code - 48 // 0-9\n    else val = Infinity\n    if (val >= radix) break\n    ++this.pos\n    total = total * radix + val\n  }\n  if (this.pos === start || len != null && this.pos - start !== len) return null\n\n  return total\n}\n\npp.readRadixNumber = function(radix) {\n  this.pos += 2 // 0x\n  let val = this.readInt(radix)\n  if (val == null) this.raise(this.start + 2, \"Expected number in radix \" + radix)\n  if (isIdentifierStart(this.fullCharCodeAtPos())) this.raise(this.pos, \"Identifier directly after number\")\n  return this.finishToken(tt.num, val)\n}\n\n// Read an integer, octal integer, or floating-point number.\n\npp.readNumber = function(startsWithDot) {\n  let start = this.pos, isFloat = false, octal = this.input.charCodeAt(this.pos) === 48\n  if (!startsWithDot && this.readInt(10) === null) this.raise(start, \"Invalid number\")\n  let next = this.input.charCodeAt(this.pos)\n  if (next === 46) { // '.'\n    ++this.pos\n    this.readInt(10)\n    isFloat = true\n    next = this.input.charCodeAt(this.pos)\n  }\n  if (next === 69 || next === 101) { // 'eE'\n    next = this.input.charCodeAt(++this.pos)\n    if (next === 43 || next === 45) ++this.pos // '+-'\n    if (this.readInt(10) === null) this.raise(start, \"Invalid number\")\n    isFloat = true\n  }\n  if (isIdentifierStart(this.fullCharCodeAtPos())) this.raise(this.pos, \"Identifier directly after number\")\n\n  let str = this.input.slice(start, this.pos), val\n  if (isFloat) val = parseFloat(str)\n  else if (!octal || str.length === 1) val = parseInt(str, 10)\n  else if (/[89]/.test(str) || this.strict) this.raise(start, \"Invalid number\")\n  else val = parseInt(str, 8)\n  return this.finishToken(tt.num, val)\n}\n\n// Read a string value, interpreting backslash-escapes.\n\npp.readCodePoint = function() {\n  let ch = this.input.charCodeAt(this.pos), code\n\n  if (ch === 123) {\n    if (this.options.ecmaVersion < 6) this.unexpected()\n    let codePos = ++this.pos\n    code = this.readHexChar(this.input.indexOf('}', this.pos) - this.pos)\n    ++this.pos\n    if (code > 0x10FFFF) this.raise(codePos, \"Code point out of bounds\")\n  } else {\n    code = this.readHexChar(4)\n  }\n  return code\n}\n\nfunction codePointToString(code) {\n  // UTF-16 Decoding\n  if (code <= 0xFFFF) return String.fromCharCode(code)\n  code -= 0x10000\n  return String.fromCharCode((code >> 10) + 0xD800, (code & 1023) + 0xDC00)\n}\n\npp.readString = function(quote) {\n  let out = \"\", chunkStart = ++this.pos\n  for (;;) {\n    if (this.pos >= this.input.length) this.raise(this.start, \"Unterminated string constant\")\n    let ch = this.input.charCodeAt(this.pos)\n    if (ch === quote) break\n    if (ch === 92) { // '\\'\n      out += this.input.slice(chunkStart, this.pos)\n      out += this.readEscapedChar(false)\n      chunkStart = this.pos\n    } else {\n      if (isNewLine(ch)) this.raise(this.start, \"Unterminated string constant\")\n      ++this.pos\n    }\n  }\n  out += this.input.slice(chunkStart, this.pos++)\n  return this.finishToken(tt.string, out)\n}\n\n// Reads template string tokens.\n\npp.readTmplToken = function() {\n  let out = \"\", chunkStart = this.pos\n  for (;;) {\n    if (this.pos >= this.input.length) this.raise(this.start, \"Unterminated template\")\n    let ch = this.input.charCodeAt(this.pos)\n    if (ch === 96 || ch === 36 && this.input.charCodeAt(this.pos + 1) === 123) { // '`', '${'\n      if (this.pos === this.start && this.type === tt.template) {\n        if (ch === 36) {\n          this.pos += 2\n          return this.finishToken(tt.dollarBraceL)\n        } else {\n          ++this.pos\n          return this.finishToken(tt.backQuote)\n        }\n      }\n      out += this.input.slice(chunkStart, this.pos)\n      return this.finishToken(tt.template, out)\n    }\n    if (ch === 92) { // '\\'\n      out += this.input.slice(chunkStart, this.pos)\n      out += this.readEscapedChar(true)\n      chunkStart = this.pos\n    } else if (isNewLine(ch)) {\n      out += this.input.slice(chunkStart, this.pos)\n      ++this.pos\n      switch (ch) {\n        case 13:\n          if (this.input.charCodeAt(this.pos) === 10) ++this.pos\n        case 10:\n          out += \"\\n\"\n          break\n        default:\n          out += String.fromCharCode(ch)\n          break\n      }\n      if (this.options.locations) {\n        ++this.curLine\n        this.lineStart = this.pos\n      }\n      chunkStart = this.pos\n    } else {\n      ++this.pos\n    }\n  }\n}\n\n// Used to read escaped characters\n\npp.readEscapedChar = function(inTemplate) {\n  let ch = this.input.charCodeAt(++this.pos)\n  ++this.pos\n  switch (ch) {\n  case 110: return \"\\n\" // 'n' -> '\\n'\n  case 114: return \"\\r\" // 'r' -> '\\r'\n  case 120: return String.fromCharCode(this.readHexChar(2)) // 'x'\n  case 117: return codePointToString(this.readCodePoint()) // 'u'\n  case 116: return \"\\t\" // 't' -> '\\t'\n  case 98: return \"\\b\" // 'b' -> '\\b'\n  case 118: return \"\\u000b\" // 'v' -> '\\u000b'\n  case 102: return \"\\f\" // 'f' -> '\\f'\n  case 13: if (this.input.charCodeAt(this.pos) === 10) ++this.pos // '\\r\\n'\n  case 10: // ' \\n'\n    if (this.options.locations) { this.lineStart = this.pos; ++this.curLine }\n    return \"\"\n  default:\n    if (ch >= 48 && ch <= 55) {\n      let octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0]\n      let octal = parseInt(octalStr, 8)\n      if (octal > 255) {\n        octalStr = octalStr.slice(0, -1)\n        octal = parseInt(octalStr, 8)\n      }\n      if (octalStr !== \"0\" && (this.strict || inTemplate)) {\n        this.raise(this.pos - 2, \"Octal literal in strict mode\")\n      }\n      this.pos += octalStr.length - 1\n      return String.fromCharCode(octal)\n    }\n    return String.fromCharCode(ch)\n  }\n}\n\n// Used to read character escape sequences ('\\x', '\\u', '\\U').\n\npp.readHexChar = function(len) {\n  let codePos = this.pos\n  let n = this.readInt(16, len)\n  if (n === null) this.raise(codePos, \"Bad character escape sequence\")\n  return n\n}\n\n// Read an identifier, and return it as a string. Sets `this.containsEsc`\n// to whether the word contained a '\\u' escape.\n//\n// Incrementally adds only escaped chars, adding other chunks as-is\n// as a micro-optimization.\n\npp.readWord1 = function() {\n  this.containsEsc = false\n  let word = \"\", first = true, chunkStart = this.pos\n  let astral = this.options.ecmaVersion >= 6\n  while (this.pos < this.input.length) {\n    let ch = this.fullCharCodeAtPos()\n    if (isIdentifierChar(ch, astral)) {\n      this.pos += ch <= 0xffff ? 1 : 2\n    } else if (ch === 92) { // \"\\\"\n      this.containsEsc = true\n      word += this.input.slice(chunkStart, this.pos)\n      let escStart = this.pos\n      if (this.input.charCodeAt(++this.pos) != 117) // \"u\"\n        this.raise(this.pos, \"Expecting Unicode escape sequence \\\\uXXXX\")\n      ++this.pos\n      let esc = this.readCodePoint()\n      if (!(first ? isIdentifierStart : isIdentifierChar)(esc, astral))\n        this.raise(escStart, \"Invalid Unicode escape\")\n      word += codePointToString(esc)\n      chunkStart = this.pos\n    } else {\n      break\n    }\n    first = false\n  }\n  return word + this.input.slice(chunkStart, this.pos)\n}\n\n// Read an identifier or keyword token. Will check for reserved\n// words when necessary.\n\npp.readWord = function() {\n  let word = this.readWord1()\n  let type = tt.name\n  if ((this.options.ecmaVersion >= 6 || !this.containsEsc) && this.keywords.test(word))\n    type = keywordTypes[word]\n  return this.finishToken(type, word)\n}\n"]}