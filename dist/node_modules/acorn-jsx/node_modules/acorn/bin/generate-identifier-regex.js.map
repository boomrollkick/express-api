{"version":3,"sources":["../../../../../../src/node_modules/acorn-jsx/node_modules/acorn/bin/generate-identifier-regex.js"],"names":["version","start","require","filter","ch","last","cont","concat","search","arr","starting","i","length","pad","str","width","esc","code","hex","toString","generate","chars","astral","re","at","from","to","push","nonASCII","startData","contData","console","log","JSON","stringify"],"mappings":"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","file":"generate-identifier-regex.js","sourcesContent":["'use strict';\n\n// Which Unicode version should be used?\nvar version = '9.0.0';\n\nvar start = require('unicode-' + version + '/Binary_Property/ID_Start/code-points.js')\n    .filter(function(ch) { return ch > 0x7f; });\nvar last = -1;\nvar cont = [0x200c, 0x200d].concat(require('unicode-' + version + '/Binary_Property/ID_Continue/code-points.js')\n    .filter(function(ch) { return ch > 0x7f && search(start, ch, last + 1) == -1; }));\n\nfunction search(arr, ch, starting) {\n  for (var i = starting; arr[i] <= ch && i < arr.length; last = i++)\n    if (arr[i] === ch)\n      return i;\n  return -1;\n}\n\nfunction pad(str, width) {\n  while (str.length < width) str = \"0\" + str;\n  return str;\n}\n\nfunction esc(code) {\n  var hex = code.toString(16);\n  if (hex.length <= 2) return \"\\\\x\" + pad(hex, 2);\n  else return \"\\\\u\" + pad(hex, 4);\n}\n\nfunction generate(chars) {\n  var astral = [], re = \"\";\n  for (var i = 0, at = 0x10000; i < chars.length; i++) {\n    var from = chars[i], to = from;\n    while (i < chars.length - 1 && chars[i + 1] == to + 1) {\n      i++;\n      to++;\n    }\n    if (to <= 0xffff) {\n      if (from == to) re += esc(from);\n      else if (from + 1 == to) re += esc(from) + esc(to);\n      else re += esc(from) + \"-\" + esc(to);\n    } else {\n      astral.push(from - at, to - from);\n      at = to;\n    }\n  }\n  return {nonASCII: re, astral: astral};\n}\n\nvar startData = generate(start), contData = generate(cont);\n\nconsole.log(\"let nonASCIIidentifierStartChars = \\\"\" + startData.nonASCII + \"\\\"\");\nconsole.log(\"let nonASCIIidentifierChars = \\\"\" + contData.nonASCII + \"\\\"\");\nconsole.log(\"const astralIdentifierStartCodes = \" + JSON.stringify(startData.astral));\nconsole.log(\"const astralIdentifierCodes = \" + JSON.stringify(contData.astral));\n"]}