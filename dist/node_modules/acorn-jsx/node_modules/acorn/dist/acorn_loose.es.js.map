{"version":3,"sources":["../../../../../../src/node_modules/acorn-jsx/node_modules/acorn/dist/acorn_loose.es.js"],"names":["pluginsLoose","LooseParser","input","options","toks","tok","last","type","tokTypes","eof","start","end","locations","here","curPosition","loc","SourceLocation","ahead","context","curIndent","curLineStart","nextLineStart","lineEnd","loadPlugins","prototype","startNode","Node","storeCurrentPos","startNodeAt","pos","finishNode","node","ranges","range","dummyNode","dummy","name","dummyIdent","dummyString","value","raw","eat","next","isContextual","eatContextual","canInsertSemicolon","braceR","lineBreak","test","slice","semicolon","semi","expect","this$1","i","lookAhead","j","pushCx","push","popCx","pop","length","charCodeAt","indentationAfter","count","ch","tabSize","closes","closeTok","indent","line","blockHeuristic","tokenStartsLine","p","extend","f","pluginConfigs","plugin","Error","lp","isSpace","shift","readToken","dot","substr","ecmaVersion","ellipsis","Token","e","SyntaxError","msg","message","raisedAt","replace","string","re","RegExp","regexp","template","resetTo","charAt","exprAllowed","curLine","lineStart","lineBreakG","lastIndex","match","exec","index","n","isDummy","lp$1","parseTopLevel","body","parseStatement","sourceType","starttype","kind","isLet","_var","_break","_continue","isBreak","label","parseIdent","_debugger","_do","_while","parseParenExpression","_for","parenL","parseFor","_const","init$1","parseVar","declarations","_in","parseForIn","init","parseExpression","toAssignable","_function","parseFunction","_if","consequent","alternate","_else","_return","argument","_switch","blockIndent","discriminant","cases","braceL","cur","_case","_default","isCase","colon","_throw","_try","block","parseBlock","handler","_catch","clause","param","parseExprAtom","parenR","finalizer","_finally","_with","object","_class","parseClass","_import","parseImport","_export","parseExport","expr","expression","update","left","right","noIn","decl","id","eq","parseMaybeAssign","comma","decl$1","isStatement","superClass","_extends","method","isGenerator","static","star","parsePropertyName","key","computed","parseMethod","initFunction","generator","params","parseFunctionParams","source","declaration","keyword","specifiers","parseExportSpecifierList","elt","local","parseImportSpecifierList","unshift","elts","continuedLine","elt$1","imported","exported","lp$2","checkLVal","expressions","val","startsExpr","delegate","parseMaybeConditional","isAssign","node$1","operator","parseExprOps","question","parseExprOp","parseMaybeUnary","minPrec","prec","binop","rightStart","sawUnary","prefix","incDec","parseExprSubscripts","postfix","node$2","starstar","node$3","parseSubscripts","base","noCalls","startIndent","property","parsePropertyAccessor","bracketL","bracketR","callee","arguments","parseExprList","backQuote","tag","quasi","parseTemplate","_this","_super","arrow","parseArrowExpression","regex","pattern","flags","num","_null","_true","_false","parenStart","inner","preserveParens","par","elements","parseObj","_new","parseNew","meta","parseTemplateElement","elem","cooked","tail","curElt","quasis","properties","prop","shorthand","assign","binding","props","toAssignableList","exprList","close","allowEmpty","acorn","defaultOptions","parse_dammit"],"mappings":"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","file":"acorn_loose.es.js","sourcesContent":["import acorn, { SourceLocation, tokTypes, tokenizer, Node, lineBreak, isNewLine, getLineInfo, Token, lineBreakG } from './acorn.js';\n\n// Registered plugins\nvar pluginsLoose = {}\n\nvar LooseParser = function LooseParser(input, options) {\n  if ( options === void 0 ) options = {};\n\n  this.toks = tokenizer(input, options)\n  this.options = this.toks.options\n  this.input = this.toks.input\n  this.tok = this.last = {type: tokTypes.eof, start: 0, end: 0}\n  if (this.options.locations) {\n    var here = this.toks.curPosition()\n    this.tok.loc = new SourceLocation(this.toks, here, here)\n  }\n  this.ahead = [] // Tokens ahead\n  this.context = [] // Indentation contexted\n  this.curIndent = 0\n  this.curLineStart = 0\n  this.nextLineStart = this.lineEnd(this.curLineStart) + 1\n  // Load plugins\n  this.options.pluginsLoose = options.pluginsLoose || {}\n  this.loadPlugins(this.options.pluginsLoose)\n};\n\nLooseParser.prototype.startNode = function startNode () {\n  return new Node(this.toks, this.tok.start, this.options.locations ? this.tok.loc.start : null)\n};\n\nLooseParser.prototype.storeCurrentPos = function storeCurrentPos () {\n  return this.options.locations ? [this.tok.start, this.tok.loc.start] : this.tok.start\n};\n\nLooseParser.prototype.startNodeAt = function startNodeAt (pos) {\n  if (this.options.locations) {\n    return new Node(this.toks, pos[0], pos[1])\n  } else {\n    return new Node(this.toks, pos)\n  }\n};\n\nLooseParser.prototype.finishNode = function finishNode (node, type) {\n  node.type = type\n  node.end = this.last.end\n  if (this.options.locations)\n    node.loc.end = this.last.loc.end\n  if (this.options.ranges)\n    node.range[1] = this.last.end\n  return node\n};\n\nLooseParser.prototype.dummyNode = function dummyNode (type) {\n  var dummy = this.startNode()\n  dummy.type = type\n  dummy.end = dummy.start\n  if (this.options.locations)\n    dummy.loc.end = dummy.loc.start\n  if (this.options.ranges)\n    dummy.range[1] = dummy.start\n  this.last = {type: tokTypes.name, start: dummy.start, end: dummy.start, loc: dummy.loc}\n  return dummy\n};\n\nLooseParser.prototype.dummyIdent = function dummyIdent () {\n  var dummy = this.dummyNode(\"Identifier\")\n  dummy.name = \"✖\"\n  return dummy\n};\n\nLooseParser.prototype.dummyString = function dummyString () {\n  var dummy = this.dummyNode(\"Literal\")\n  dummy.value = dummy.raw = \"✖\"\n  return dummy\n};\n\nLooseParser.prototype.eat = function eat (type) {\n  if (this.tok.type === type) {\n    this.next()\n    return true\n  } else {\n    return false\n  }\n};\n\nLooseParser.prototype.isContextual = function isContextual (name) {\n  return this.tok.type === tokTypes.name && this.tok.value === name\n};\n\nLooseParser.prototype.eatContextual = function eatContextual (name) {\n  return this.tok.value === name && this.eat(tokTypes.name)\n};\n\nLooseParser.prototype.canInsertSemicolon = function canInsertSemicolon () {\n  return this.tok.type === tokTypes.eof || this.tok.type === tokTypes.braceR ||\n    lineBreak.test(this.input.slice(this.last.end, this.tok.start))\n};\n\nLooseParser.prototype.semicolon = function semicolon () {\n  return this.eat(tokTypes.semi)\n};\n\nLooseParser.prototype.expect = function expect (type) {\n    var this$1 = this;\n\n  if (this.eat(type)) return true\n  for (var i = 1; i <= 2; i++) {\n    if (this$1.lookAhead(i).type == type) {\n      for (var j = 0; j < i; j++) this$1.next()\n      return true\n    }\n  }\n};\n\nLooseParser.prototype.pushCx = function pushCx () {\n  this.context.push(this.curIndent)\n};\n\nLooseParser.prototype.popCx = function popCx () {\n  this.curIndent = this.context.pop()\n};\n\nLooseParser.prototype.lineEnd = function lineEnd (pos) {\n  while (pos < this.input.length && !isNewLine(this.input.charCodeAt(pos))) ++pos\n  return pos\n};\n\nLooseParser.prototype.indentationAfter = function indentationAfter (pos) {\n    var this$1 = this;\n\n  for (var count = 0;; ++pos) {\n    var ch = this$1.input.charCodeAt(pos)\n    if (ch === 32) ++count\n    else if (ch === 9) count += this$1.options.tabSize\n    else return count\n  }\n};\n\nLooseParser.prototype.closes = function closes (closeTok, indent, line, blockHeuristic) {\n  if (this.tok.type === closeTok || this.tok.type === tokTypes.eof) return true\n  return line != this.curLineStart && this.curIndent < indent && this.tokenStartsLine() &&\n    (!blockHeuristic || this.nextLineStart >= this.input.length ||\n     this.indentationAfter(this.nextLineStart) < indent)\n};\n\nLooseParser.prototype.tokenStartsLine = function tokenStartsLine () {\n    var this$1 = this;\n\n  for (var p = this.tok.start - 1; p >= this.curLineStart; --p) {\n    var ch = this$1.input.charCodeAt(p)\n    if (ch !== 9 && ch !== 32) return false\n  }\n  return true\n};\n\nLooseParser.prototype.extend = function extend (name, f) {\n  this[name] = f(this[name])\n};\n\nLooseParser.prototype.loadPlugins = function loadPlugins (pluginConfigs) {\n    var this$1 = this;\n\n  for (var name in pluginConfigs) {\n    var plugin = pluginsLoose[name]\n    if (!plugin) throw new Error(\"Plugin '\" + name + \"' not found\")\n    plugin(this$1, pluginConfigs[name])\n  }\n};\n\nvar lp = LooseParser.prototype\n\nfunction isSpace(ch) {\n  return (ch < 14 && ch > 8) || ch === 32 || ch === 160 || isNewLine(ch)\n}\n\nlp.next = function() {\n  var this$1 = this;\n\n  this.last = this.tok\n  if (this.ahead.length)\n    this.tok = this.ahead.shift()\n  else\n    this.tok = this.readToken()\n\n  if (this.tok.start >= this.nextLineStart) {\n    while (this.tok.start >= this.nextLineStart) {\n      this$1.curLineStart = this$1.nextLineStart\n      this$1.nextLineStart = this$1.lineEnd(this$1.curLineStart) + 1\n    }\n    this.curIndent = this.indentationAfter(this.curLineStart)\n  }\n}\n\nlp.readToken = function() {\n  var this$1 = this;\n\n  for (;;) {\n    try {\n      this$1.toks.next()\n      if (this$1.toks.type === tokTypes.dot &&\n          this$1.input.substr(this$1.toks.end, 1) === \".\" &&\n          this$1.options.ecmaVersion >= 6) {\n        this$1.toks.end++\n        this$1.toks.type = tokTypes.ellipsis\n      }\n      return new Token(this$1.toks)\n    } catch(e) {\n      if (!(e instanceof SyntaxError)) throw e\n\n      // Try to skip some text, based on the error message, and then continue\n      var msg = e.message, pos = e.raisedAt, replace = true\n      if (/unterminated/i.test(msg)) {\n        pos = this$1.lineEnd(e.pos + 1)\n        if (/string/.test(msg)) {\n          replace = {start: e.pos, end: pos, type: tokTypes.string, value: this$1.input.slice(e.pos + 1, pos)}\n        } else if (/regular expr/i.test(msg)) {\n          var re = this$1.input.slice(e.pos, pos)\n          try { re = new RegExp(re) } catch(e) {}\n          replace = {start: e.pos, end: pos, type: tokTypes.regexp, value: re}\n        } else if (/template/.test(msg)) {\n          replace = {start: e.pos, end: pos,\n                     type: tokTypes.template,\n                     value: this$1.input.slice(e.pos, pos)}\n        } else {\n          replace = false\n        }\n      } else if (/invalid (unicode|regexp|number)|expecting unicode|octal literal|is reserved|directly after number|expected number in radix/i.test(msg)) {\n        while (pos < this.input.length && !isSpace(this.input.charCodeAt(pos))) ++pos\n      } else if (/character escape|expected hexadecimal/i.test(msg)) {\n        while (pos < this.input.length) {\n          var ch = this$1.input.charCodeAt(pos++)\n          if (ch === 34 || ch === 39 || isNewLine(ch)) break\n        }\n      } else if (/unexpected character/i.test(msg)) {\n        pos++\n        replace = false\n      } else if (/regular expression/i.test(msg)) {\n        replace = true\n      } else {\n        throw e\n      }\n      this$1.resetTo(pos)\n      if (replace === true) replace = {start: pos, end: pos, type: tokTypes.name, value: \"✖\"}\n      if (replace) {\n        if (this$1.options.locations)\n          replace.loc = new SourceLocation(\n            this$1.toks,\n            getLineInfo(this$1.input, replace.start),\n            getLineInfo(this$1.input, replace.end))\n        return replace\n      }\n    }\n  }\n}\n\nlp.resetTo = function(pos) {\n  var this$1 = this;\n\n  this.toks.pos = pos\n  var ch = this.input.charAt(pos - 1)\n  this.toks.exprAllowed = !ch || /[\\[\\{\\(,;:?\\/*=+\\-~!|&%^<>]/.test(ch) ||\n    /[enwfd]/.test(ch) &&\n    /\\b(keywords|case|else|return|throw|new|in|(instance|type)of|delete|void)$/.test(this.input.slice(pos - 10, pos))\n\n  if (this.options.locations) {\n    this.toks.curLine = 1\n    this.toks.lineStart = lineBreakG.lastIndex = 0\n    var match\n    while ((match = lineBreakG.exec(this.input)) && match.index < pos) {\n      ++this$1.toks.curLine\n      this$1.toks.lineStart = match.index + match[0].length\n    }\n  }\n}\n\nlp.lookAhead = function(n) {\n  var this$1 = this;\n\n  while (n > this.ahead.length)\n    this$1.ahead.push(this$1.readToken())\n  return this.ahead[n - 1]\n}\n\nfunction isDummy(node) { return node.name == \"✖\" }\n\nvar lp$1 = LooseParser.prototype\n\nlp$1.parseTopLevel = function() {\n  var this$1 = this;\n\n  var node = this.startNodeAt(this.options.locations ? [0, getLineInfo(this.input, 0)] : 0)\n  node.body = []\n  while (this.tok.type !== tokTypes.eof) node.body.push(this$1.parseStatement())\n  this.last = this.tok\n  if (this.options.ecmaVersion >= 6) {\n    node.sourceType = this.options.sourceType\n  }\n  return this.finishNode(node, \"Program\")\n}\n\nlp$1.parseStatement = function() {\n  var this$1 = this;\n\n  var starttype = this.tok.type, node = this.startNode(), kind\n\n  if (this.toks.isLet()) {\n    starttype = tokTypes._var\n    kind = \"let\"\n  }\n\n  switch (starttype) {\n  case tokTypes._break: case tokTypes._continue:\n    this.next()\n    var isBreak = starttype === tokTypes._break\n    if (this.semicolon() || this.canInsertSemicolon()) {\n      node.label = null\n    } else {\n      node.label = this.tok.type === tokTypes.name ? this.parseIdent() : null\n      this.semicolon()\n    }\n    return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\")\n\n  case tokTypes._debugger:\n    this.next()\n    this.semicolon()\n    return this.finishNode(node, \"DebuggerStatement\")\n\n  case tokTypes._do:\n    this.next()\n    node.body = this.parseStatement()\n    node.test = this.eat(tokTypes._while) ? this.parseParenExpression() : this.dummyIdent()\n    this.semicolon()\n    return this.finishNode(node, \"DoWhileStatement\")\n\n  case tokTypes._for:\n    this.next()\n    this.pushCx()\n    this.expect(tokTypes.parenL)\n    if (this.tok.type === tokTypes.semi) return this.parseFor(node, null)\n    var isLet = this.toks.isLet()\n    if (isLet || this.tok.type === tokTypes._var || this.tok.type === tokTypes._const) {\n      var init$1 = this.parseVar(true, isLet ? \"let\" : this.tok.value)\n      if (init$1.declarations.length === 1 && (this.tok.type === tokTypes._in || this.isContextual(\"of\"))) {\n        return this.parseForIn(node, init$1)\n      }\n      return this.parseFor(node, init$1)\n    }\n    var init = this.parseExpression(true)\n    if (this.tok.type === tokTypes._in || this.isContextual(\"of\"))\n      return this.parseForIn(node, this.toAssignable(init))\n    return this.parseFor(node, init)\n\n  case tokTypes._function:\n    this.next()\n    return this.parseFunction(node, true)\n\n  case tokTypes._if:\n    this.next()\n    node.test = this.parseParenExpression()\n    node.consequent = this.parseStatement()\n    node.alternate = this.eat(tokTypes._else) ? this.parseStatement() : null\n    return this.finishNode(node, \"IfStatement\")\n\n  case tokTypes._return:\n    this.next()\n    if (this.eat(tokTypes.semi) || this.canInsertSemicolon()) node.argument = null\n    else { node.argument = this.parseExpression(); this.semicolon() }\n    return this.finishNode(node, \"ReturnStatement\")\n\n  case tokTypes._switch:\n    var blockIndent = this.curIndent, line = this.curLineStart\n    this.next()\n    node.discriminant = this.parseParenExpression()\n    node.cases = []\n    this.pushCx()\n    this.expect(tokTypes.braceL)\n\n    var cur\n    while (!this.closes(tokTypes.braceR, blockIndent, line, true)) {\n      if (this$1.tok.type === tokTypes._case || this$1.tok.type === tokTypes._default) {\n        var isCase = this$1.tok.type === tokTypes._case\n        if (cur) this$1.finishNode(cur, \"SwitchCase\")\n        node.cases.push(cur = this$1.startNode())\n        cur.consequent = []\n        this$1.next()\n        if (isCase) cur.test = this$1.parseExpression()\n        else cur.test = null\n        this$1.expect(tokTypes.colon)\n      } else {\n        if (!cur) {\n          node.cases.push(cur = this$1.startNode())\n          cur.consequent = []\n          cur.test = null\n        }\n        cur.consequent.push(this$1.parseStatement())\n      }\n    }\n    if (cur) this.finishNode(cur, \"SwitchCase\")\n    this.popCx()\n    this.eat(tokTypes.braceR)\n    return this.finishNode(node, \"SwitchStatement\")\n\n  case tokTypes._throw:\n    this.next()\n    node.argument = this.parseExpression()\n    this.semicolon()\n    return this.finishNode(node, \"ThrowStatement\")\n\n  case tokTypes._try:\n    this.next()\n    node.block = this.parseBlock()\n    node.handler = null\n    if (this.tok.type === tokTypes._catch) {\n      var clause = this.startNode()\n      this.next()\n      this.expect(tokTypes.parenL)\n      clause.param = this.toAssignable(this.parseExprAtom(), true)\n      this.expect(tokTypes.parenR)\n      clause.body = this.parseBlock()\n      node.handler = this.finishNode(clause, \"CatchClause\")\n    }\n    node.finalizer = this.eat(tokTypes._finally) ? this.parseBlock() : null\n    if (!node.handler && !node.finalizer) return node.block\n    return this.finishNode(node, \"TryStatement\")\n\n  case tokTypes._var:\n  case tokTypes._const:\n    return this.parseVar(false, kind || this.tok.value)\n\n  case tokTypes._while:\n    this.next()\n    node.test = this.parseParenExpression()\n    node.body = this.parseStatement()\n    return this.finishNode(node, \"WhileStatement\")\n\n  case tokTypes._with:\n    this.next()\n    node.object = this.parseParenExpression()\n    node.body = this.parseStatement()\n    return this.finishNode(node, \"WithStatement\")\n\n  case tokTypes.braceL:\n    return this.parseBlock()\n\n  case tokTypes.semi:\n    this.next()\n    return this.finishNode(node, \"EmptyStatement\")\n\n  case tokTypes._class:\n    return this.parseClass(true)\n\n  case tokTypes._import:\n    return this.parseImport()\n\n  case tokTypes._export:\n    return this.parseExport()\n\n  default:\n    var expr = this.parseExpression()\n    if (isDummy(expr)) {\n      this.next()\n      if (this.tok.type === tokTypes.eof) return this.finishNode(node, \"EmptyStatement\")\n      return this.parseStatement()\n    } else if (starttype === tokTypes.name && expr.type === \"Identifier\" && this.eat(tokTypes.colon)) {\n      node.body = this.parseStatement()\n      node.label = expr\n      return this.finishNode(node, \"LabeledStatement\")\n    } else {\n      node.expression = expr\n      this.semicolon()\n      return this.finishNode(node, \"ExpressionStatement\")\n    }\n  }\n}\n\nlp$1.parseBlock = function() {\n  var this$1 = this;\n\n  var node = this.startNode()\n  this.pushCx()\n  this.expect(tokTypes.braceL)\n  var blockIndent = this.curIndent, line = this.curLineStart\n  node.body = []\n  while (!this.closes(tokTypes.braceR, blockIndent, line, true))\n    node.body.push(this$1.parseStatement())\n  this.popCx()\n  this.eat(tokTypes.braceR)\n  return this.finishNode(node, \"BlockStatement\")\n}\n\nlp$1.parseFor = function(node, init) {\n  node.init = init\n  node.test = node.update = null\n  if (this.eat(tokTypes.semi) && this.tok.type !== tokTypes.semi) node.test = this.parseExpression()\n  if (this.eat(tokTypes.semi) && this.tok.type !== tokTypes.parenR) node.update = this.parseExpression()\n  this.popCx()\n  this.expect(tokTypes.parenR)\n  node.body = this.parseStatement()\n  return this.finishNode(node, \"ForStatement\")\n}\n\nlp$1.parseForIn = function(node, init) {\n  var type = this.tok.type === tokTypes._in ? \"ForInStatement\" : \"ForOfStatement\"\n  this.next()\n  node.left = init\n  node.right = this.parseExpression()\n  this.popCx()\n  this.expect(tokTypes.parenR)\n  node.body = this.parseStatement()\n  return this.finishNode(node, type)\n}\n\nlp$1.parseVar = function(noIn, kind) {\n  var this$1 = this;\n\n  var node = this.startNode()\n  node.kind = kind\n  this.next()\n  node.declarations = []\n  do {\n    var decl = this$1.startNode()\n    decl.id = this$1.options.ecmaVersion >= 6 ? this$1.toAssignable(this$1.parseExprAtom(), true) : this$1.parseIdent()\n    decl.init = this$1.eat(tokTypes.eq) ? this$1.parseMaybeAssign(noIn) : null\n    node.declarations.push(this$1.finishNode(decl, \"VariableDeclarator\"))\n  } while (this.eat(tokTypes.comma))\n  if (!node.declarations.length) {\n    var decl$1 = this.startNode()\n    decl$1.id = this.dummyIdent()\n    node.declarations.push(this.finishNode(decl$1, \"VariableDeclarator\"))\n  }\n  if (!noIn) this.semicolon()\n  return this.finishNode(node, \"VariableDeclaration\")\n}\n\nlp$1.parseClass = function(isStatement) {\n  var this$1 = this;\n\n  var node = this.startNode()\n  this.next()\n  if (this.tok.type === tokTypes.name) node.id = this.parseIdent()\n  else if (isStatement) node.id = this.dummyIdent()\n  else node.id = null\n  node.superClass = this.eat(tokTypes._extends) ? this.parseExpression() : null\n  node.body = this.startNode()\n  node.body.body = []\n  this.pushCx()\n  var indent = this.curIndent + 1, line = this.curLineStart\n  this.eat(tokTypes.braceL)\n  if (this.curIndent + 1 < indent) { indent = this.curIndent; line = this.curLineStart }\n  while (!this.closes(tokTypes.braceR, indent, line)) {\n    if (this$1.semicolon()) continue\n    var method = this$1.startNode(), isGenerator\n    if (this$1.options.ecmaVersion >= 6) {\n      method.static = false\n      isGenerator = this$1.eat(tokTypes.star)\n    }\n    this$1.parsePropertyName(method)\n    if (isDummy(method.key)) { if (isDummy(this$1.parseMaybeAssign())) this$1.next(); this$1.eat(tokTypes.comma); continue }\n    if (method.key.type === \"Identifier\" && !method.computed && method.key.name === \"static\" &&\n        (this$1.tok.type != tokTypes.parenL && this$1.tok.type != tokTypes.braceL)) {\n      method.static = true\n      isGenerator = this$1.eat(tokTypes.star)\n      this$1.parsePropertyName(method)\n    } else {\n      method.static = false\n    }\n    if (this$1.options.ecmaVersion >= 5 && method.key.type === \"Identifier\" &&\n        !method.computed && (method.key.name === \"get\" || method.key.name === \"set\") &&\n        this$1.tok.type !== tokTypes.parenL && this$1.tok.type !== tokTypes.braceL) {\n      method.kind = method.key.name\n      this$1.parsePropertyName(method)\n      method.value = this$1.parseMethod(false)\n    } else {\n      if (!method.computed && !method.static && !isGenerator && (\n        method.key.type === \"Identifier\" && method.key.name === \"constructor\" ||\n          method.key.type === \"Literal\" && method.key.value === \"constructor\")) {\n        method.kind = \"constructor\"\n      } else {\n        method.kind =  \"method\"\n      }\n      method.value = this$1.parseMethod(isGenerator)\n    }\n    node.body.body.push(this$1.finishNode(method, \"MethodDefinition\"))\n  }\n  this.popCx()\n  if (!this.eat(tokTypes.braceR)) {\n    // If there is no closing brace, make the node span to the start\n    // of the next token (this is useful for Tern)\n    this.last.end = this.tok.start\n    if (this.options.locations) this.last.loc.end = this.tok.loc.start\n  }\n  this.semicolon()\n  this.finishNode(node.body, \"ClassBody\")\n  return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\")\n}\n\nlp$1.parseFunction = function(node, isStatement) {\n  this.initFunction(node)\n  if (this.options.ecmaVersion >= 6) {\n    node.generator = this.eat(tokTypes.star)\n  }\n  if (this.tok.type === tokTypes.name) node.id = this.parseIdent()\n  else if (isStatement) node.id = this.dummyIdent()\n  node.params = this.parseFunctionParams()\n  node.body = this.parseBlock()\n  return this.finishNode(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\")\n}\n\nlp$1.parseExport = function() {\n  var node = this.startNode()\n  this.next()\n  if (this.eat(tokTypes.star)) {\n    node.source = this.eatContextual(\"from\") ? this.parseExprAtom() : this.dummyString()\n    return this.finishNode(node, \"ExportAllDeclaration\")\n  }\n  if (this.eat(tokTypes._default)) {\n    var expr = this.parseMaybeAssign()\n    if (expr.id) {\n      switch (expr.type) {\n      case \"FunctionExpression\": expr.type = \"FunctionDeclaration\"; break\n      case \"ClassExpression\": expr.type = \"ClassDeclaration\"; break\n      }\n    }\n    node.declaration = expr\n    this.semicolon()\n    return this.finishNode(node, \"ExportDefaultDeclaration\")\n  }\n  if (this.tok.type.keyword || this.toks.isLet()) {\n    node.declaration = this.parseStatement()\n    node.specifiers = []\n    node.source = null\n  } else {\n    node.declaration = null\n    node.specifiers = this.parseExportSpecifierList()\n    node.source = this.eatContextual(\"from\") ? this.parseExprAtom() : null\n    this.semicolon()\n  }\n  return this.finishNode(node, \"ExportNamedDeclaration\")\n}\n\nlp$1.parseImport = function() {\n  var node = this.startNode()\n  this.next()\n  if (this.tok.type === tokTypes.string) {\n    node.specifiers = []\n    node.source = this.parseExprAtom()\n    node.kind = ''\n  } else {\n    var elt\n    if (this.tok.type === tokTypes.name && this.tok.value !== \"from\") {\n      elt = this.startNode()\n      elt.local = this.parseIdent()\n      this.finishNode(elt, \"ImportDefaultSpecifier\")\n      this.eat(tokTypes.comma)\n    }\n    node.specifiers = this.parseImportSpecifierList()\n    node.source = this.eatContextual(\"from\") && this.tok.type == tokTypes.string ? this.parseExprAtom() : this.dummyString()\n    if (elt) node.specifiers.unshift(elt)\n  }\n  this.semicolon()\n  return this.finishNode(node, \"ImportDeclaration\")\n}\n\nlp$1.parseImportSpecifierList = function() {\n  var this$1 = this;\n\n  var elts = []\n  if (this.tok.type === tokTypes.star) {\n    var elt = this.startNode()\n    this.next()\n    elt.local = this.eatContextual(\"as\") ? this.parseIdent() : this.dummyIdent()\n    elts.push(this.finishNode(elt, \"ImportNamespaceSpecifier\"))\n  } else {\n    var indent = this.curIndent, line = this.curLineStart, continuedLine = this.nextLineStart\n    this.pushCx()\n    this.eat(tokTypes.braceL)\n    if (this.curLineStart > continuedLine) continuedLine = this.curLineStart\n    while (!this.closes(tokTypes.braceR, indent + (this.curLineStart <= continuedLine ? 1 : 0), line)) {\n      var elt$1 = this$1.startNode()\n      if (this$1.eat(tokTypes.star)) {\n        elt$1.local = this$1.eatContextual(\"as\") ? this$1.parseIdent() : this$1.dummyIdent()\n        this$1.finishNode(elt$1, \"ImportNamespaceSpecifier\")\n      } else {\n        if (this$1.isContextual(\"from\")) break\n        elt$1.imported = this$1.parseIdent()\n        if (isDummy(elt$1.imported)) break\n        elt$1.local = this$1.eatContextual(\"as\") ? this$1.parseIdent() : elt$1.imported\n        this$1.finishNode(elt$1, \"ImportSpecifier\")\n      }\n      elts.push(elt$1)\n      this$1.eat(tokTypes.comma)\n    }\n    this.eat(tokTypes.braceR)\n    this.popCx()\n  }\n  return elts\n}\n\nlp$1.parseExportSpecifierList = function() {\n  var this$1 = this;\n\n  var elts = []\n  var indent = this.curIndent, line = this.curLineStart, continuedLine = this.nextLineStart\n  this.pushCx()\n  this.eat(tokTypes.braceL)\n  if (this.curLineStart > continuedLine) continuedLine = this.curLineStart\n  while (!this.closes(tokTypes.braceR, indent + (this.curLineStart <= continuedLine ? 1 : 0), line)) {\n    if (this$1.isContextual(\"from\")) break\n    var elt = this$1.startNode()\n    elt.local = this$1.parseIdent()\n    if (isDummy(elt.local)) break\n    elt.exported = this$1.eatContextual(\"as\") ? this$1.parseIdent() : elt.local\n    this$1.finishNode(elt, \"ExportSpecifier\")\n    elts.push(elt)\n    this$1.eat(tokTypes.comma)\n  }\n  this.eat(tokTypes.braceR)\n  this.popCx()\n  return elts\n}\n\nvar lp$2 = LooseParser.prototype\n\nlp$2.checkLVal = function(expr) {\n  if (!expr) return expr\n  switch (expr.type) {\n  case \"Identifier\":\n  case \"MemberExpression\":\n    return expr\n\n  case \"ParenthesizedExpression\":\n    expr.expression = this.checkLVal(expr.expression)\n    return expr\n\n  default:\n    return this.dummyIdent()\n  }\n}\n\nlp$2.parseExpression = function(noIn) {\n  var this$1 = this;\n\n  var start = this.storeCurrentPos()\n  var expr = this.parseMaybeAssign(noIn)\n  if (this.tok.type === tokTypes.comma) {\n    var node = this.startNodeAt(start)\n    node.expressions = [expr]\n    while (this.eat(tokTypes.comma)) node.expressions.push(this$1.parseMaybeAssign(noIn))\n    return this.finishNode(node, \"SequenceExpression\")\n  }\n  return expr\n}\n\nlp$2.parseParenExpression = function() {\n  this.pushCx()\n  this.expect(tokTypes.parenL)\n  var val = this.parseExpression()\n  this.popCx()\n  this.expect(tokTypes.parenR)\n  return val\n}\n\nlp$2.parseMaybeAssign = function(noIn) {\n  if (this.toks.isContextual(\"yield\")) {\n    var node = this.startNode()\n    this.next()\n    if (this.semicolon() || this.canInsertSemicolon() || (this.tok.type != tokTypes.star && !this.tok.type.startsExpr)) {\n      node.delegate = false\n      node.argument = null\n    } else {\n      node.delegate = this.eat(tokTypes.star)\n      node.argument = this.parseMaybeAssign()\n    }\n    return this.finishNode(node, \"YieldExpression\")\n  }\n\n  var start = this.storeCurrentPos()\n  var left = this.parseMaybeConditional(noIn)\n  if (this.tok.type.isAssign) {\n    var node$1 = this.startNodeAt(start)\n    node$1.operator = this.tok.value\n    node$1.left = this.tok.type === tokTypes.eq ? this.toAssignable(left) : this.checkLVal(left)\n    this.next()\n    node$1.right = this.parseMaybeAssign(noIn)\n    return this.finishNode(node$1, \"AssignmentExpression\")\n  }\n  return left\n}\n\nlp$2.parseMaybeConditional = function(noIn) {\n  var start = this.storeCurrentPos()\n  var expr = this.parseExprOps(noIn)\n  if (this.eat(tokTypes.question)) {\n    var node = this.startNodeAt(start)\n    node.test = expr\n    node.consequent = this.parseMaybeAssign()\n    node.alternate = this.expect(tokTypes.colon) ? this.parseMaybeAssign(noIn) : this.dummyIdent()\n    return this.finishNode(node, \"ConditionalExpression\")\n  }\n  return expr\n}\n\nlp$2.parseExprOps = function(noIn) {\n  var start = this.storeCurrentPos()\n  var indent = this.curIndent, line = this.curLineStart\n  return this.parseExprOp(this.parseMaybeUnary(false), start, -1, noIn, indent, line)\n}\n\nlp$2.parseExprOp = function(left, start, minPrec, noIn, indent, line) {\n  if (this.curLineStart != line && this.curIndent < indent && this.tokenStartsLine()) return left\n  var prec = this.tok.type.binop\n  if (prec != null && (!noIn || this.tok.type !== tokTypes._in)) {\n    if (prec > minPrec) {\n      var node = this.startNodeAt(start)\n      node.left = left\n      node.operator = this.tok.value\n      this.next()\n      if (this.curLineStart != line && this.curIndent < indent && this.tokenStartsLine()) {\n        node.right = this.dummyIdent()\n      } else {\n        var rightStart = this.storeCurrentPos()\n        node.right = this.parseExprOp(this.parseMaybeUnary(false), rightStart, prec, noIn, indent, line)\n      }\n      this.finishNode(node, /&&|\\|\\|/.test(node.operator) ? \"LogicalExpression\" : \"BinaryExpression\")\n      return this.parseExprOp(node, start, minPrec, noIn, indent, line)\n    }\n  }\n  return left\n}\n\nlp$2.parseMaybeUnary = function(sawUnary) {\n  var this$1 = this;\n\n  var start = this.storeCurrentPos(), expr\n  if (this.tok.type.prefix) {\n    var node = this.startNode(), update = this.tok.type === tokTypes.incDec\n    if (!update) sawUnary = true\n    node.operator = this.tok.value\n    node.prefix = true\n    this.next()\n    node.argument = this.parseMaybeUnary(true)\n    if (update) node.argument = this.checkLVal(node.argument)\n    expr = this.finishNode(node, update ? \"UpdateExpression\" : \"UnaryExpression\")\n  } else if (this.tok.type === tokTypes.ellipsis) {\n    var node$1 = this.startNode()\n    this.next()\n    node$1.argument = this.parseMaybeUnary(sawUnary)\n    expr = this.finishNode(node$1, \"SpreadElement\")\n  } else {\n    expr = this.parseExprSubscripts()\n    while (this.tok.type.postfix && !this.canInsertSemicolon()) {\n      var node$2 = this$1.startNodeAt(start)\n      node$2.operator = this$1.tok.value\n      node$2.prefix = false\n      node$2.argument = this$1.checkLVal(expr)\n      this$1.next()\n      expr = this$1.finishNode(node$2, \"UpdateExpression\")\n    }\n  }\n\n  if (!sawUnary && this.eat(tokTypes.starstar)) {\n    var node$3 = this.startNodeAt(start)\n    node$3.operator = \"**\"\n    node$3.left = expr\n    node$3.right = this.parseMaybeUnary(false)\n    return this.finishNode(node$3, \"BinaryExpression\")\n  }\n\n  return expr\n}\n\nlp$2.parseExprSubscripts = function() {\n  var start = this.storeCurrentPos()\n  return this.parseSubscripts(this.parseExprAtom(), start, false, this.curIndent, this.curLineStart)\n}\n\nlp$2.parseSubscripts = function(base, start, noCalls, startIndent, line) {\n  var this$1 = this;\n\n  for (;;) {\n    if (this$1.curLineStart != line && this$1.curIndent <= startIndent && this$1.tokenStartsLine()) {\n      if (this$1.tok.type == tokTypes.dot && this$1.curIndent == startIndent)\n        --startIndent\n      else\n        return base\n    }\n\n    if (this$1.eat(tokTypes.dot)) {\n      var node = this$1.startNodeAt(start)\n      node.object = base\n      if (this$1.curLineStart != line && this$1.curIndent <= startIndent && this$1.tokenStartsLine())\n        node.property = this$1.dummyIdent()\n      else\n        node.property = this$1.parsePropertyAccessor() || this$1.dummyIdent()\n      node.computed = false\n      base = this$1.finishNode(node, \"MemberExpression\")\n    } else if (this$1.tok.type == tokTypes.bracketL) {\n      this$1.pushCx()\n      this$1.next()\n      var node$1 = this$1.startNodeAt(start)\n      node$1.object = base\n      node$1.property = this$1.parseExpression()\n      node$1.computed = true\n      this$1.popCx()\n      this$1.expect(tokTypes.bracketR)\n      base = this$1.finishNode(node$1, \"MemberExpression\")\n    } else if (!noCalls && this$1.tok.type == tokTypes.parenL) {\n      var node$2 = this$1.startNodeAt(start)\n      node$2.callee = base\n      node$2.arguments = this$1.parseExprList(tokTypes.parenR)\n      base = this$1.finishNode(node$2, \"CallExpression\")\n    } else if (this$1.tok.type == tokTypes.backQuote) {\n      var node$3 = this$1.startNodeAt(start)\n      node$3.tag = base\n      node$3.quasi = this$1.parseTemplate()\n      base = this$1.finishNode(node$3, \"TaggedTemplateExpression\")\n    } else {\n      return base\n    }\n  }\n}\n\nlp$2.parseExprAtom = function() {\n  var node\n  switch (this.tok.type) {\n  case tokTypes._this:\n  case tokTypes._super:\n    var type = this.tok.type === tokTypes._this ? \"ThisExpression\" : \"Super\"\n    node = this.startNode()\n    this.next()\n    return this.finishNode(node, type)\n\n  case tokTypes.name:\n    var start = this.storeCurrentPos()\n    var id = this.parseIdent()\n    return this.eat(tokTypes.arrow) ? this.parseArrowExpression(this.startNodeAt(start), [id]) : id\n\n  case tokTypes.regexp:\n    node = this.startNode()\n    var val = this.tok.value\n    node.regex = {pattern: val.pattern, flags: val.flags}\n    node.value = val.value\n    node.raw = this.input.slice(this.tok.start, this.tok.end)\n    this.next()\n    return this.finishNode(node, \"Literal\")\n\n  case tokTypes.num: case tokTypes.string:\n    node = this.startNode()\n    node.value = this.tok.value\n    node.raw = this.input.slice(this.tok.start, this.tok.end)\n    this.next()\n    return this.finishNode(node, \"Literal\")\n\n  case tokTypes._null: case tokTypes._true: case tokTypes._false:\n    node = this.startNode()\n    node.value = this.tok.type === tokTypes._null ? null : this.tok.type === tokTypes._true\n    node.raw = this.tok.type.keyword\n    this.next()\n    return this.finishNode(node, \"Literal\")\n\n  case tokTypes.parenL:\n    var parenStart = this.storeCurrentPos()\n    this.next()\n    var inner = this.parseExpression()\n    this.expect(tokTypes.parenR)\n    if (this.eat(tokTypes.arrow)) {\n      return this.parseArrowExpression(this.startNodeAt(parenStart), inner.expressions || (isDummy(inner) ? [] : [inner]))\n    }\n    if (this.options.preserveParens) {\n      var par = this.startNodeAt(parenStart)\n      par.expression = inner\n      inner = this.finishNode(par, \"ParenthesizedExpression\")\n    }\n    return inner\n\n  case tokTypes.bracketL:\n    node = this.startNode()\n    node.elements = this.parseExprList(tokTypes.bracketR, true)\n    return this.finishNode(node, \"ArrayExpression\")\n\n  case tokTypes.braceL:\n    return this.parseObj()\n\n  case tokTypes._class:\n    return this.parseClass()\n\n  case tokTypes._function:\n    node = this.startNode()\n    this.next()\n    return this.parseFunction(node, false)\n\n  case tokTypes._new:\n    return this.parseNew()\n\n  case tokTypes.backQuote:\n    return this.parseTemplate()\n\n  default:\n    return this.dummyIdent()\n  }\n}\n\nlp$2.parseNew = function() {\n  var node = this.startNode(), startIndent = this.curIndent, line = this.curLineStart\n  var meta = this.parseIdent(true)\n  if (this.options.ecmaVersion >= 6 && this.eat(tokTypes.dot)) {\n    node.meta = meta\n    node.property = this.parseIdent(true)\n    return this.finishNode(node, \"MetaProperty\")\n  }\n  var start = this.storeCurrentPos()\n  node.callee = this.parseSubscripts(this.parseExprAtom(), start, true, startIndent, line)\n  if (this.tok.type == tokTypes.parenL) {\n    node.arguments = this.parseExprList(tokTypes.parenR)\n  } else {\n    node.arguments = []\n  }\n  return this.finishNode(node, \"NewExpression\")\n}\n\nlp$2.parseTemplateElement = function() {\n  var elem = this.startNode()\n  elem.value = {\n    raw: this.input.slice(this.tok.start, this.tok.end).replace(/\\r\\n?/g, '\\n'),\n    cooked: this.tok.value\n  }\n  this.next()\n  elem.tail = this.tok.type === tokTypes.backQuote\n  return this.finishNode(elem, \"TemplateElement\")\n}\n\nlp$2.parseTemplate = function() {\n  var this$1 = this;\n\n  var node = this.startNode()\n  this.next()\n  node.expressions = []\n  var curElt = this.parseTemplateElement()\n  node.quasis = [curElt]\n  while (!curElt.tail) {\n    this$1.next()\n    node.expressions.push(this$1.parseExpression())\n    if (this$1.expect(tokTypes.braceR)) {\n      curElt = this$1.parseTemplateElement()\n    } else {\n      curElt = this$1.startNode()\n      curElt.value = {cooked: '', raw: ''}\n      curElt.tail = true\n      this$1.finishNode(curElt, \"TemplateElement\")\n    }\n    node.quasis.push(curElt)\n  }\n  this.expect(tokTypes.backQuote)\n  return this.finishNode(node, \"TemplateLiteral\")\n}\n\nlp$2.parseObj = function() {\n  var this$1 = this;\n\n  var node = this.startNode()\n  node.properties = []\n  this.pushCx()\n  var indent = this.curIndent + 1, line = this.curLineStart\n  this.eat(tokTypes.braceL)\n  if (this.curIndent + 1 < indent) { indent = this.curIndent; line = this.curLineStart }\n  while (!this.closes(tokTypes.braceR, indent, line)) {\n    var prop = this$1.startNode(), isGenerator, start\n    if (this$1.options.ecmaVersion >= 6) {\n      start = this$1.storeCurrentPos()\n      prop.method = false\n      prop.shorthand = false\n      isGenerator = this$1.eat(tokTypes.star)\n    }\n    this$1.parsePropertyName(prop)\n    if (isDummy(prop.key)) { if (isDummy(this$1.parseMaybeAssign())) this$1.next(); this$1.eat(tokTypes.comma); continue }\n    if (this$1.eat(tokTypes.colon)) {\n      prop.kind = \"init\"\n      prop.value = this$1.parseMaybeAssign()\n    } else if (this$1.options.ecmaVersion >= 6 && (this$1.tok.type === tokTypes.parenL || this$1.tok.type === tokTypes.braceL)) {\n      prop.kind = \"init\"\n      prop.method = true\n      prop.value = this$1.parseMethod(isGenerator)\n    } else if (this$1.options.ecmaVersion >= 5 && prop.key.type === \"Identifier\" &&\n               !prop.computed && (prop.key.name === \"get\" || prop.key.name === \"set\") &&\n               (this$1.tok.type != tokTypes.comma && this$1.tok.type != tokTypes.braceR)) {\n      prop.kind = prop.key.name\n      this$1.parsePropertyName(prop)\n      prop.value = this$1.parseMethod(false)\n    } else {\n      prop.kind = \"init\"\n      if (this$1.options.ecmaVersion >= 6) {\n        if (this$1.eat(tokTypes.eq)) {\n          var assign = this$1.startNodeAt(start)\n          assign.operator = \"=\"\n          assign.left = prop.key\n          assign.right = this$1.parseMaybeAssign()\n          prop.value = this$1.finishNode(assign, \"AssignmentExpression\")\n        } else {\n          prop.value = prop.key\n        }\n      } else {\n        prop.value = this$1.dummyIdent()\n      }\n      prop.shorthand = true\n    }\n    node.properties.push(this$1.finishNode(prop, \"Property\"))\n    this$1.eat(tokTypes.comma)\n  }\n  this.popCx()\n  if (!this.eat(tokTypes.braceR)) {\n    // If there is no closing brace, make the node span to the start\n    // of the next token (this is useful for Tern)\n    this.last.end = this.tok.start\n    if (this.options.locations) this.last.loc.end = this.tok.loc.start\n  }\n  return this.finishNode(node, \"ObjectExpression\")\n}\n\nlp$2.parsePropertyName = function(prop) {\n  if (this.options.ecmaVersion >= 6) {\n    if (this.eat(tokTypes.bracketL)) {\n      prop.computed = true\n      prop.key = this.parseExpression()\n      this.expect(tokTypes.bracketR)\n      return\n    } else {\n      prop.computed = false\n    }\n  }\n  var key = (this.tok.type === tokTypes.num || this.tok.type === tokTypes.string) ? this.parseExprAtom() : this.parseIdent()\n  prop.key = key || this.dummyIdent()\n}\n\nlp$2.parsePropertyAccessor = function() {\n  if (this.tok.type === tokTypes.name || this.tok.type.keyword) return this.parseIdent()\n}\n\nlp$2.parseIdent = function() {\n  var name = this.tok.type === tokTypes.name ? this.tok.value : this.tok.type.keyword\n  if (!name) return this.dummyIdent()\n  var node = this.startNode()\n  this.next()\n  node.name = name\n  return this.finishNode(node, \"Identifier\")\n}\n\nlp$2.initFunction = function(node) {\n  node.id = null\n  node.params = []\n  if (this.options.ecmaVersion >= 6) {\n    node.generator = false\n    node.expression = false\n  }\n}\n\n// Convert existing expression atom to assignable pattern\n// if possible.\n\nlp$2.toAssignable = function(node, binding) {\n  var this$1 = this;\n\n  if (!node || node.type == \"Identifier\" || (node.type == \"MemberExpression\" && !binding)) {\n    // Okay\n  } else if (node.type == \"ParenthesizedExpression\") {\n    node.expression = this.toAssignable(node.expression, binding)\n  } else if (this.options.ecmaVersion < 6) {\n    return this.dummyIdent()\n  } else if (node.type == \"ObjectExpression\") {\n    node.type = \"ObjectPattern\"\n    var props = node.properties\n    for (var i = 0; i < props.length; i++)\n      props[i].value = this$1.toAssignable(props[i].value, binding)\n  } else if (node.type == \"ArrayExpression\") {\n    node.type = \"ArrayPattern\"\n    this.toAssignableList(node.elements, binding)\n  } else if (node.type == \"SpreadElement\") {\n    node.type = \"RestElement\"\n    node.argument = this.toAssignable(node.argument, binding)\n  } else if (node.type == \"AssignmentExpression\") {\n    node.type = \"AssignmentPattern\"\n    delete node.operator\n  } else {\n    return this.dummyIdent()\n  }\n  return node\n}\n\nlp$2.toAssignableList = function(exprList, binding) {\n  var this$1 = this;\n\n  for (var i = 0; i < exprList.length; i++)\n    exprList[i] = this$1.toAssignable(exprList[i], binding)\n  return exprList\n}\n\nlp$2.parseFunctionParams = function(params) {\n  params = this.parseExprList(tokTypes.parenR)\n  return this.toAssignableList(params, true)\n}\n\nlp$2.parseMethod = function(isGenerator) {\n  var node = this.startNode()\n  this.initFunction(node)\n  node.params = this.parseFunctionParams()\n  node.generator = isGenerator || false\n  node.expression = this.options.ecmaVersion >= 6 && this.tok.type !== tokTypes.braceL\n  node.body = node.expression ? this.parseMaybeAssign() : this.parseBlock()\n  return this.finishNode(node, \"FunctionExpression\")\n}\n\nlp$2.parseArrowExpression = function(node, params) {\n  this.initFunction(node)\n  node.params = this.toAssignableList(params, true)\n  node.expression = this.tok.type !== tokTypes.braceL\n  node.body = node.expression ? this.parseMaybeAssign() : this.parseBlock()\n  return this.finishNode(node, \"ArrowFunctionExpression\")\n}\n\nlp$2.parseExprList = function(close, allowEmpty) {\n  var this$1 = this;\n\n  this.pushCx()\n  var indent = this.curIndent, line = this.curLineStart, elts = []\n  this.next() // Opening bracket\n  while (!this.closes(close, indent + 1, line)) {\n    if (this$1.eat(tokTypes.comma)) {\n      elts.push(allowEmpty ? null : this$1.dummyIdent())\n      continue\n    }\n    var elt = this$1.parseMaybeAssign()\n    if (isDummy(elt)) {\n      if (this$1.closes(close, indent, line)) break\n      this$1.next()\n    } else {\n      elts.push(elt)\n    }\n    this$1.eat(tokTypes.comma)\n  }\n  this.popCx()\n  if (!this.eat(close)) {\n    // If there is no closing brace, make the node span to the start\n    // of the next token (this is useful for Tern)\n    this.last.end = this.tok.start\n    if (this.options.locations) this.last.loc.end = this.tok.loc.start\n  }\n  return elts\n}\n\nacorn.defaultOptions.tabSize = 4\n\nfunction parse_dammit(input, options) {\n  var p = new LooseParser(input, options)\n  p.next()\n  return p.parseTopLevel()\n}\n\nacorn.parse_dammit = parse_dammit\nacorn.LooseParser = LooseParser\nacorn.pluginsLoose = pluginsLoose\n\nexport { parse_dammit, LooseParser, pluginsLoose };"]}