{"version":3,"sources":["../../../../../../src/node_modules/acorn-jsx/node_modules/acorn/dist/acorn_loose.js"],"names":["global","factory","exports","module","require","define","amd","acorn","loose","acorn__default","pluginsLoose","LooseParser","input","options","toks","tokenizer","tok","last","type","tokTypes","eof","start","end","locations","here","curPosition","loc","SourceLocation","ahead","context","curIndent","curLineStart","nextLineStart","lineEnd","loadPlugins","prototype","startNode","Node","storeCurrentPos","startNodeAt","pos","finishNode","node","ranges","range","dummyNode","dummy","name","dummyIdent","dummyString","value","raw","eat","next","isContextual","eatContextual","canInsertSemicolon","braceR","lineBreak","test","slice","semicolon","semi","expect","this$1","i","lookAhead","j","pushCx","push","popCx","pop","length","isNewLine","charCodeAt","indentationAfter","count","ch","tabSize","closes","closeTok","indent","line","blockHeuristic","tokenStartsLine","p","extend","f","pluginConfigs","plugin","Error","lp","isSpace","shift","readToken","dot","substr","ecmaVersion","ellipsis","Token","e","SyntaxError","msg","message","raisedAt","replace","string","re","RegExp","regexp","template","resetTo","getLineInfo","charAt","exprAllowed","curLine","lineStart","lineBreakG","lastIndex","match","exec","index","n","isDummy","lp$1","parseTopLevel","body","parseStatement","sourceType","starttype","kind","isLet","_var","_break","_continue","isBreak","label","parseIdent","_debugger","_do","_while","parseParenExpression","_for","parenL","parseFor","_const","init$1","parseVar","declarations","_in","parseForIn","init","parseExpression","toAssignable","_function","parseFunction","_if","consequent","alternate","_else","_return","argument","_switch","blockIndent","discriminant","cases","braceL","cur","_case","_default","isCase","colon","_throw","_try","block","parseBlock","handler","_catch","clause","param","parseExprAtom","parenR","finalizer","_finally","_with","object","_class","parseClass","_import","parseImport","_export","parseExport","expr","expression","update","left","right","noIn","decl","id","eq","parseMaybeAssign","comma","decl$1","isStatement","superClass","_extends","method","isGenerator","static","star","parsePropertyName","key","computed","parseMethod","initFunction","generator","params","parseFunctionParams","source","declaration","keyword","specifiers","parseExportSpecifierList","elt","local","parseImportSpecifierList","unshift","elts","continuedLine","elt$1","imported","exported","lp$2","checkLVal","expressions","val","startsExpr","delegate","parseMaybeConditional","isAssign","node$1","operator","parseExprOps","question","parseExprOp","parseMaybeUnary","minPrec","prec","binop","rightStart","sawUnary","prefix","incDec","parseExprSubscripts","postfix","node$2","starstar","node$3","parseSubscripts","base","noCalls","startIndent","property","parsePropertyAccessor","bracketL","bracketR","callee","arguments","parseExprList","backQuote","tag","quasi","parseTemplate","_this","_super","arrow","parseArrowExpression","regex","pattern","flags","num","_null","_true","_false","parenStart","inner","preserveParens","par","elements","parseObj","_new","parseNew","meta","parseTemplateElement","elem","cooked","tail","curElt","quasis","properties","prop","shorthand","assign","binding","props","toAssignableList","exprList","close","allowEmpty","defaultOptions","parse_dammit","Object","defineProperty"],"mappings":"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","file":"acorn_loose.js","sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('./acorn.js')) :\n  typeof define === 'function' && define.amd ? define(['exports', './acorn.js'], factory) :\n  (factory((global.acorn = global.acorn || {}, global.acorn.loose = global.acorn.loose || {}),global.acorn));\n}(this, function (exports,acorn) { 'use strict';\n\n  var acorn__default = 'default' in acorn ? acorn['default'] : acorn;\n\n  // Registered plugins\n  var pluginsLoose = {}\n\n  var LooseParser = function LooseParser(input, options) {\n    if ( options === void 0 ) options = {};\n\n    this.toks = acorn.tokenizer(input, options)\n    this.options = this.toks.options\n    this.input = this.toks.input\n    this.tok = this.last = {type: acorn.tokTypes.eof, start: 0, end: 0}\n    if (this.options.locations) {\n      var here = this.toks.curPosition()\n      this.tok.loc = new acorn.SourceLocation(this.toks, here, here)\n    }\n    this.ahead = [] // Tokens ahead\n    this.context = [] // Indentation contexted\n    this.curIndent = 0\n    this.curLineStart = 0\n    this.nextLineStart = this.lineEnd(this.curLineStart) + 1\n    // Load plugins\n    this.options.pluginsLoose = options.pluginsLoose || {}\n    this.loadPlugins(this.options.pluginsLoose)\n  };\n\n  LooseParser.prototype.startNode = function startNode () {\n    return new acorn.Node(this.toks, this.tok.start, this.options.locations ? this.tok.loc.start : null)\n  };\n\n  LooseParser.prototype.storeCurrentPos = function storeCurrentPos () {\n    return this.options.locations ? [this.tok.start, this.tok.loc.start] : this.tok.start\n  };\n\n  LooseParser.prototype.startNodeAt = function startNodeAt (pos) {\n    if (this.options.locations) {\n      return new acorn.Node(this.toks, pos[0], pos[1])\n    } else {\n      return new acorn.Node(this.toks, pos)\n    }\n  };\n\n  LooseParser.prototype.finishNode = function finishNode (node, type) {\n    node.type = type\n    node.end = this.last.end\n    if (this.options.locations)\n      node.loc.end = this.last.loc.end\n    if (this.options.ranges)\n      node.range[1] = this.last.end\n    return node\n  };\n\n  LooseParser.prototype.dummyNode = function dummyNode (type) {\n    var dummy = this.startNode()\n    dummy.type = type\n    dummy.end = dummy.start\n    if (this.options.locations)\n      dummy.loc.end = dummy.loc.start\n    if (this.options.ranges)\n      dummy.range[1] = dummy.start\n    this.last = {type: acorn.tokTypes.name, start: dummy.start, end: dummy.start, loc: dummy.loc}\n    return dummy\n  };\n\n  LooseParser.prototype.dummyIdent = function dummyIdent () {\n    var dummy = this.dummyNode(\"Identifier\")\n    dummy.name = \"✖\"\n    return dummy\n  };\n\n  LooseParser.prototype.dummyString = function dummyString () {\n    var dummy = this.dummyNode(\"Literal\")\n    dummy.value = dummy.raw = \"✖\"\n    return dummy\n  };\n\n  LooseParser.prototype.eat = function eat (type) {\n    if (this.tok.type === type) {\n      this.next()\n      return true\n    } else {\n      return false\n    }\n  };\n\n  LooseParser.prototype.isContextual = function isContextual (name) {\n    return this.tok.type === acorn.tokTypes.name && this.tok.value === name\n  };\n\n  LooseParser.prototype.eatContextual = function eatContextual (name) {\n    return this.tok.value === name && this.eat(acorn.tokTypes.name)\n  };\n\n  LooseParser.prototype.canInsertSemicolon = function canInsertSemicolon () {\n    return this.tok.type === acorn.tokTypes.eof || this.tok.type === acorn.tokTypes.braceR ||\n      acorn.lineBreak.test(this.input.slice(this.last.end, this.tok.start))\n  };\n\n  LooseParser.prototype.semicolon = function semicolon () {\n    return this.eat(acorn.tokTypes.semi)\n  };\n\n  LooseParser.prototype.expect = function expect (type) {\n      var this$1 = this;\n\n    if (this.eat(type)) return true\n    for (var i = 1; i <= 2; i++) {\n      if (this$1.lookAhead(i).type == type) {\n        for (var j = 0; j < i; j++) this$1.next()\n        return true\n      }\n    }\n  };\n\n  LooseParser.prototype.pushCx = function pushCx () {\n    this.context.push(this.curIndent)\n  };\n\n  LooseParser.prototype.popCx = function popCx () {\n    this.curIndent = this.context.pop()\n  };\n\n  LooseParser.prototype.lineEnd = function lineEnd (pos) {\n    while (pos < this.input.length && !acorn.isNewLine(this.input.charCodeAt(pos))) ++pos\n    return pos\n  };\n\n  LooseParser.prototype.indentationAfter = function indentationAfter (pos) {\n      var this$1 = this;\n\n    for (var count = 0;; ++pos) {\n      var ch = this$1.input.charCodeAt(pos)\n      if (ch === 32) ++count\n      else if (ch === 9) count += this$1.options.tabSize\n      else return count\n    }\n  };\n\n  LooseParser.prototype.closes = function closes (closeTok, indent, line, blockHeuristic) {\n    if (this.tok.type === closeTok || this.tok.type === acorn.tokTypes.eof) return true\n    return line != this.curLineStart && this.curIndent < indent && this.tokenStartsLine() &&\n      (!blockHeuristic || this.nextLineStart >= this.input.length ||\n       this.indentationAfter(this.nextLineStart) < indent)\n  };\n\n  LooseParser.prototype.tokenStartsLine = function tokenStartsLine () {\n      var this$1 = this;\n\n    for (var p = this.tok.start - 1; p >= this.curLineStart; --p) {\n      var ch = this$1.input.charCodeAt(p)\n      if (ch !== 9 && ch !== 32) return false\n    }\n    return true\n  };\n\n  LooseParser.prototype.extend = function extend (name, f) {\n    this[name] = f(this[name])\n  };\n\n  LooseParser.prototype.loadPlugins = function loadPlugins (pluginConfigs) {\n      var this$1 = this;\n\n    for (var name in pluginConfigs) {\n      var plugin = pluginsLoose[name]\n      if (!plugin) throw new Error(\"Plugin '\" + name + \"' not found\")\n      plugin(this$1, pluginConfigs[name])\n    }\n  };\n\n  var lp = LooseParser.prototype\n\n  function isSpace(ch) {\n    return (ch < 14 && ch > 8) || ch === 32 || ch === 160 || acorn.isNewLine(ch)\n  }\n\n  lp.next = function() {\n    var this$1 = this;\n\n    this.last = this.tok\n    if (this.ahead.length)\n      this.tok = this.ahead.shift()\n    else\n      this.tok = this.readToken()\n\n    if (this.tok.start >= this.nextLineStart) {\n      while (this.tok.start >= this.nextLineStart) {\n        this$1.curLineStart = this$1.nextLineStart\n        this$1.nextLineStart = this$1.lineEnd(this$1.curLineStart) + 1\n      }\n      this.curIndent = this.indentationAfter(this.curLineStart)\n    }\n  }\n\n  lp.readToken = function() {\n    var this$1 = this;\n\n    for (;;) {\n      try {\n        this$1.toks.next()\n        if (this$1.toks.type === acorn.tokTypes.dot &&\n            this$1.input.substr(this$1.toks.end, 1) === \".\" &&\n            this$1.options.ecmaVersion >= 6) {\n          this$1.toks.end++\n          this$1.toks.type = acorn.tokTypes.ellipsis\n        }\n        return new acorn.Token(this$1.toks)\n      } catch(e) {\n        if (!(e instanceof SyntaxError)) throw e\n\n        // Try to skip some text, based on the error message, and then continue\n        var msg = e.message, pos = e.raisedAt, replace = true\n        if (/unterminated/i.test(msg)) {\n          pos = this$1.lineEnd(e.pos + 1)\n          if (/string/.test(msg)) {\n            replace = {start: e.pos, end: pos, type: acorn.tokTypes.string, value: this$1.input.slice(e.pos + 1, pos)}\n          } else if (/regular expr/i.test(msg)) {\n            var re = this$1.input.slice(e.pos, pos)\n            try { re = new RegExp(re) } catch(e) {}\n            replace = {start: e.pos, end: pos, type: acorn.tokTypes.regexp, value: re}\n          } else if (/template/.test(msg)) {\n            replace = {start: e.pos, end: pos,\n                       type: acorn.tokTypes.template,\n                       value: this$1.input.slice(e.pos, pos)}\n          } else {\n            replace = false\n          }\n        } else if (/invalid (unicode|regexp|number)|expecting unicode|octal literal|is reserved|directly after number|expected number in radix/i.test(msg)) {\n          while (pos < this.input.length && !isSpace(this.input.charCodeAt(pos))) ++pos\n        } else if (/character escape|expected hexadecimal/i.test(msg)) {\n          while (pos < this.input.length) {\n            var ch = this$1.input.charCodeAt(pos++)\n            if (ch === 34 || ch === 39 || acorn.isNewLine(ch)) break\n          }\n        } else if (/unexpected character/i.test(msg)) {\n          pos++\n          replace = false\n        } else if (/regular expression/i.test(msg)) {\n          replace = true\n        } else {\n          throw e\n        }\n        this$1.resetTo(pos)\n        if (replace === true) replace = {start: pos, end: pos, type: acorn.tokTypes.name, value: \"✖\"}\n        if (replace) {\n          if (this$1.options.locations)\n            replace.loc = new acorn.SourceLocation(\n              this$1.toks,\n              acorn.getLineInfo(this$1.input, replace.start),\n              acorn.getLineInfo(this$1.input, replace.end))\n          return replace\n        }\n      }\n    }\n  }\n\n  lp.resetTo = function(pos) {\n    var this$1 = this;\n\n    this.toks.pos = pos\n    var ch = this.input.charAt(pos - 1)\n    this.toks.exprAllowed = !ch || /[\\[\\{\\(,;:?\\/*=+\\-~!|&%^<>]/.test(ch) ||\n      /[enwfd]/.test(ch) &&\n      /\\b(keywords|case|else|return|throw|new|in|(instance|type)of|delete|void)$/.test(this.input.slice(pos - 10, pos))\n\n    if (this.options.locations) {\n      this.toks.curLine = 1\n      this.toks.lineStart = acorn.lineBreakG.lastIndex = 0\n      var match\n      while ((match = acorn.lineBreakG.exec(this.input)) && match.index < pos) {\n        ++this$1.toks.curLine\n        this$1.toks.lineStart = match.index + match[0].length\n      }\n    }\n  }\n\n  lp.lookAhead = function(n) {\n    var this$1 = this;\n\n    while (n > this.ahead.length)\n      this$1.ahead.push(this$1.readToken())\n    return this.ahead[n - 1]\n  }\n\n  function isDummy(node) { return node.name == \"✖\" }\n\n  var lp$1 = LooseParser.prototype\n\n  lp$1.parseTopLevel = function() {\n    var this$1 = this;\n\n    var node = this.startNodeAt(this.options.locations ? [0, acorn.getLineInfo(this.input, 0)] : 0)\n    node.body = []\n    while (this.tok.type !== acorn.tokTypes.eof) node.body.push(this$1.parseStatement())\n    this.last = this.tok\n    if (this.options.ecmaVersion >= 6) {\n      node.sourceType = this.options.sourceType\n    }\n    return this.finishNode(node, \"Program\")\n  }\n\n  lp$1.parseStatement = function() {\n    var this$1 = this;\n\n    var starttype = this.tok.type, node = this.startNode(), kind\n\n    if (this.toks.isLet()) {\n      starttype = acorn.tokTypes._var\n      kind = \"let\"\n    }\n\n    switch (starttype) {\n    case acorn.tokTypes._break: case acorn.tokTypes._continue:\n      this.next()\n      var isBreak = starttype === acorn.tokTypes._break\n      if (this.semicolon() || this.canInsertSemicolon()) {\n        node.label = null\n      } else {\n        node.label = this.tok.type === acorn.tokTypes.name ? this.parseIdent() : null\n        this.semicolon()\n      }\n      return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\")\n\n    case acorn.tokTypes._debugger:\n      this.next()\n      this.semicolon()\n      return this.finishNode(node, \"DebuggerStatement\")\n\n    case acorn.tokTypes._do:\n      this.next()\n      node.body = this.parseStatement()\n      node.test = this.eat(acorn.tokTypes._while) ? this.parseParenExpression() : this.dummyIdent()\n      this.semicolon()\n      return this.finishNode(node, \"DoWhileStatement\")\n\n    case acorn.tokTypes._for:\n      this.next()\n      this.pushCx()\n      this.expect(acorn.tokTypes.parenL)\n      if (this.tok.type === acorn.tokTypes.semi) return this.parseFor(node, null)\n      var isLet = this.toks.isLet()\n      if (isLet || this.tok.type === acorn.tokTypes._var || this.tok.type === acorn.tokTypes._const) {\n        var init$1 = this.parseVar(true, isLet ? \"let\" : this.tok.value)\n        if (init$1.declarations.length === 1 && (this.tok.type === acorn.tokTypes._in || this.isContextual(\"of\"))) {\n          return this.parseForIn(node, init$1)\n        }\n        return this.parseFor(node, init$1)\n      }\n      var init = this.parseExpression(true)\n      if (this.tok.type === acorn.tokTypes._in || this.isContextual(\"of\"))\n        return this.parseForIn(node, this.toAssignable(init))\n      return this.parseFor(node, init)\n\n    case acorn.tokTypes._function:\n      this.next()\n      return this.parseFunction(node, true)\n\n    case acorn.tokTypes._if:\n      this.next()\n      node.test = this.parseParenExpression()\n      node.consequent = this.parseStatement()\n      node.alternate = this.eat(acorn.tokTypes._else) ? this.parseStatement() : null\n      return this.finishNode(node, \"IfStatement\")\n\n    case acorn.tokTypes._return:\n      this.next()\n      if (this.eat(acorn.tokTypes.semi) || this.canInsertSemicolon()) node.argument = null\n      else { node.argument = this.parseExpression(); this.semicolon() }\n      return this.finishNode(node, \"ReturnStatement\")\n\n    case acorn.tokTypes._switch:\n      var blockIndent = this.curIndent, line = this.curLineStart\n      this.next()\n      node.discriminant = this.parseParenExpression()\n      node.cases = []\n      this.pushCx()\n      this.expect(acorn.tokTypes.braceL)\n\n      var cur\n      while (!this.closes(acorn.tokTypes.braceR, blockIndent, line, true)) {\n        if (this$1.tok.type === acorn.tokTypes._case || this$1.tok.type === acorn.tokTypes._default) {\n          var isCase = this$1.tok.type === acorn.tokTypes._case\n          if (cur) this$1.finishNode(cur, \"SwitchCase\")\n          node.cases.push(cur = this$1.startNode())\n          cur.consequent = []\n          this$1.next()\n          if (isCase) cur.test = this$1.parseExpression()\n          else cur.test = null\n          this$1.expect(acorn.tokTypes.colon)\n        } else {\n          if (!cur) {\n            node.cases.push(cur = this$1.startNode())\n            cur.consequent = []\n            cur.test = null\n          }\n          cur.consequent.push(this$1.parseStatement())\n        }\n      }\n      if (cur) this.finishNode(cur, \"SwitchCase\")\n      this.popCx()\n      this.eat(acorn.tokTypes.braceR)\n      return this.finishNode(node, \"SwitchStatement\")\n\n    case acorn.tokTypes._throw:\n      this.next()\n      node.argument = this.parseExpression()\n      this.semicolon()\n      return this.finishNode(node, \"ThrowStatement\")\n\n    case acorn.tokTypes._try:\n      this.next()\n      node.block = this.parseBlock()\n      node.handler = null\n      if (this.tok.type === acorn.tokTypes._catch) {\n        var clause = this.startNode()\n        this.next()\n        this.expect(acorn.tokTypes.parenL)\n        clause.param = this.toAssignable(this.parseExprAtom(), true)\n        this.expect(acorn.tokTypes.parenR)\n        clause.body = this.parseBlock()\n        node.handler = this.finishNode(clause, \"CatchClause\")\n      }\n      node.finalizer = this.eat(acorn.tokTypes._finally) ? this.parseBlock() : null\n      if (!node.handler && !node.finalizer) return node.block\n      return this.finishNode(node, \"TryStatement\")\n\n    case acorn.tokTypes._var:\n    case acorn.tokTypes._const:\n      return this.parseVar(false, kind || this.tok.value)\n\n    case acorn.tokTypes._while:\n      this.next()\n      node.test = this.parseParenExpression()\n      node.body = this.parseStatement()\n      return this.finishNode(node, \"WhileStatement\")\n\n    case acorn.tokTypes._with:\n      this.next()\n      node.object = this.parseParenExpression()\n      node.body = this.parseStatement()\n      return this.finishNode(node, \"WithStatement\")\n\n    case acorn.tokTypes.braceL:\n      return this.parseBlock()\n\n    case acorn.tokTypes.semi:\n      this.next()\n      return this.finishNode(node, \"EmptyStatement\")\n\n    case acorn.tokTypes._class:\n      return this.parseClass(true)\n\n    case acorn.tokTypes._import:\n      return this.parseImport()\n\n    case acorn.tokTypes._export:\n      return this.parseExport()\n\n    default:\n      var expr = this.parseExpression()\n      if (isDummy(expr)) {\n        this.next()\n        if (this.tok.type === acorn.tokTypes.eof) return this.finishNode(node, \"EmptyStatement\")\n        return this.parseStatement()\n      } else if (starttype === acorn.tokTypes.name && expr.type === \"Identifier\" && this.eat(acorn.tokTypes.colon)) {\n        node.body = this.parseStatement()\n        node.label = expr\n        return this.finishNode(node, \"LabeledStatement\")\n      } else {\n        node.expression = expr\n        this.semicolon()\n        return this.finishNode(node, \"ExpressionStatement\")\n      }\n    }\n  }\n\n  lp$1.parseBlock = function() {\n    var this$1 = this;\n\n    var node = this.startNode()\n    this.pushCx()\n    this.expect(acorn.tokTypes.braceL)\n    var blockIndent = this.curIndent, line = this.curLineStart\n    node.body = []\n    while (!this.closes(acorn.tokTypes.braceR, blockIndent, line, true))\n      node.body.push(this$1.parseStatement())\n    this.popCx()\n    this.eat(acorn.tokTypes.braceR)\n    return this.finishNode(node, \"BlockStatement\")\n  }\n\n  lp$1.parseFor = function(node, init) {\n    node.init = init\n    node.test = node.update = null\n    if (this.eat(acorn.tokTypes.semi) && this.tok.type !== acorn.tokTypes.semi) node.test = this.parseExpression()\n    if (this.eat(acorn.tokTypes.semi) && this.tok.type !== acorn.tokTypes.parenR) node.update = this.parseExpression()\n    this.popCx()\n    this.expect(acorn.tokTypes.parenR)\n    node.body = this.parseStatement()\n    return this.finishNode(node, \"ForStatement\")\n  }\n\n  lp$1.parseForIn = function(node, init) {\n    var type = this.tok.type === acorn.tokTypes._in ? \"ForInStatement\" : \"ForOfStatement\"\n    this.next()\n    node.left = init\n    node.right = this.parseExpression()\n    this.popCx()\n    this.expect(acorn.tokTypes.parenR)\n    node.body = this.parseStatement()\n    return this.finishNode(node, type)\n  }\n\n  lp$1.parseVar = function(noIn, kind) {\n    var this$1 = this;\n\n    var node = this.startNode()\n    node.kind = kind\n    this.next()\n    node.declarations = []\n    do {\n      var decl = this$1.startNode()\n      decl.id = this$1.options.ecmaVersion >= 6 ? this$1.toAssignable(this$1.parseExprAtom(), true) : this$1.parseIdent()\n      decl.init = this$1.eat(acorn.tokTypes.eq) ? this$1.parseMaybeAssign(noIn) : null\n      node.declarations.push(this$1.finishNode(decl, \"VariableDeclarator\"))\n    } while (this.eat(acorn.tokTypes.comma))\n    if (!node.declarations.length) {\n      var decl$1 = this.startNode()\n      decl$1.id = this.dummyIdent()\n      node.declarations.push(this.finishNode(decl$1, \"VariableDeclarator\"))\n    }\n    if (!noIn) this.semicolon()\n    return this.finishNode(node, \"VariableDeclaration\")\n  }\n\n  lp$1.parseClass = function(isStatement) {\n    var this$1 = this;\n\n    var node = this.startNode()\n    this.next()\n    if (this.tok.type === acorn.tokTypes.name) node.id = this.parseIdent()\n    else if (isStatement) node.id = this.dummyIdent()\n    else node.id = null\n    node.superClass = this.eat(acorn.tokTypes._extends) ? this.parseExpression() : null\n    node.body = this.startNode()\n    node.body.body = []\n    this.pushCx()\n    var indent = this.curIndent + 1, line = this.curLineStart\n    this.eat(acorn.tokTypes.braceL)\n    if (this.curIndent + 1 < indent) { indent = this.curIndent; line = this.curLineStart }\n    while (!this.closes(acorn.tokTypes.braceR, indent, line)) {\n      if (this$1.semicolon()) continue\n      var method = this$1.startNode(), isGenerator\n      if (this$1.options.ecmaVersion >= 6) {\n        method.static = false\n        isGenerator = this$1.eat(acorn.tokTypes.star)\n      }\n      this$1.parsePropertyName(method)\n      if (isDummy(method.key)) { if (isDummy(this$1.parseMaybeAssign())) this$1.next(); this$1.eat(acorn.tokTypes.comma); continue }\n      if (method.key.type === \"Identifier\" && !method.computed && method.key.name === \"static\" &&\n          (this$1.tok.type != acorn.tokTypes.parenL && this$1.tok.type != acorn.tokTypes.braceL)) {\n        method.static = true\n        isGenerator = this$1.eat(acorn.tokTypes.star)\n        this$1.parsePropertyName(method)\n      } else {\n        method.static = false\n      }\n      if (this$1.options.ecmaVersion >= 5 && method.key.type === \"Identifier\" &&\n          !method.computed && (method.key.name === \"get\" || method.key.name === \"set\") &&\n          this$1.tok.type !== acorn.tokTypes.parenL && this$1.tok.type !== acorn.tokTypes.braceL) {\n        method.kind = method.key.name\n        this$1.parsePropertyName(method)\n        method.value = this$1.parseMethod(false)\n      } else {\n        if (!method.computed && !method.static && !isGenerator && (\n          method.key.type === \"Identifier\" && method.key.name === \"constructor\" ||\n            method.key.type === \"Literal\" && method.key.value === \"constructor\")) {\n          method.kind = \"constructor\"\n        } else {\n          method.kind =  \"method\"\n        }\n        method.value = this$1.parseMethod(isGenerator)\n      }\n      node.body.body.push(this$1.finishNode(method, \"MethodDefinition\"))\n    }\n    this.popCx()\n    if (!this.eat(acorn.tokTypes.braceR)) {\n      // If there is no closing brace, make the node span to the start\n      // of the next token (this is useful for Tern)\n      this.last.end = this.tok.start\n      if (this.options.locations) this.last.loc.end = this.tok.loc.start\n    }\n    this.semicolon()\n    this.finishNode(node.body, \"ClassBody\")\n    return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\")\n  }\n\n  lp$1.parseFunction = function(node, isStatement) {\n    this.initFunction(node)\n    if (this.options.ecmaVersion >= 6) {\n      node.generator = this.eat(acorn.tokTypes.star)\n    }\n    if (this.tok.type === acorn.tokTypes.name) node.id = this.parseIdent()\n    else if (isStatement) node.id = this.dummyIdent()\n    node.params = this.parseFunctionParams()\n    node.body = this.parseBlock()\n    return this.finishNode(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\")\n  }\n\n  lp$1.parseExport = function() {\n    var node = this.startNode()\n    this.next()\n    if (this.eat(acorn.tokTypes.star)) {\n      node.source = this.eatContextual(\"from\") ? this.parseExprAtom() : this.dummyString()\n      return this.finishNode(node, \"ExportAllDeclaration\")\n    }\n    if (this.eat(acorn.tokTypes._default)) {\n      var expr = this.parseMaybeAssign()\n      if (expr.id) {\n        switch (expr.type) {\n        case \"FunctionExpression\": expr.type = \"FunctionDeclaration\"; break\n        case \"ClassExpression\": expr.type = \"ClassDeclaration\"; break\n        }\n      }\n      node.declaration = expr\n      this.semicolon()\n      return this.finishNode(node, \"ExportDefaultDeclaration\")\n    }\n    if (this.tok.type.keyword || this.toks.isLet()) {\n      node.declaration = this.parseStatement()\n      node.specifiers = []\n      node.source = null\n    } else {\n      node.declaration = null\n      node.specifiers = this.parseExportSpecifierList()\n      node.source = this.eatContextual(\"from\") ? this.parseExprAtom() : null\n      this.semicolon()\n    }\n    return this.finishNode(node, \"ExportNamedDeclaration\")\n  }\n\n  lp$1.parseImport = function() {\n    var node = this.startNode()\n    this.next()\n    if (this.tok.type === acorn.tokTypes.string) {\n      node.specifiers = []\n      node.source = this.parseExprAtom()\n      node.kind = ''\n    } else {\n      var elt\n      if (this.tok.type === acorn.tokTypes.name && this.tok.value !== \"from\") {\n        elt = this.startNode()\n        elt.local = this.parseIdent()\n        this.finishNode(elt, \"ImportDefaultSpecifier\")\n        this.eat(acorn.tokTypes.comma)\n      }\n      node.specifiers = this.parseImportSpecifierList()\n      node.source = this.eatContextual(\"from\") && this.tok.type == acorn.tokTypes.string ? this.parseExprAtom() : this.dummyString()\n      if (elt) node.specifiers.unshift(elt)\n    }\n    this.semicolon()\n    return this.finishNode(node, \"ImportDeclaration\")\n  }\n\n  lp$1.parseImportSpecifierList = function() {\n    var this$1 = this;\n\n    var elts = []\n    if (this.tok.type === acorn.tokTypes.star) {\n      var elt = this.startNode()\n      this.next()\n      elt.local = this.eatContextual(\"as\") ? this.parseIdent() : this.dummyIdent()\n      elts.push(this.finishNode(elt, \"ImportNamespaceSpecifier\"))\n    } else {\n      var indent = this.curIndent, line = this.curLineStart, continuedLine = this.nextLineStart\n      this.pushCx()\n      this.eat(acorn.tokTypes.braceL)\n      if (this.curLineStart > continuedLine) continuedLine = this.curLineStart\n      while (!this.closes(acorn.tokTypes.braceR, indent + (this.curLineStart <= continuedLine ? 1 : 0), line)) {\n        var elt$1 = this$1.startNode()\n        if (this$1.eat(acorn.tokTypes.star)) {\n          elt$1.local = this$1.eatContextual(\"as\") ? this$1.parseIdent() : this$1.dummyIdent()\n          this$1.finishNode(elt$1, \"ImportNamespaceSpecifier\")\n        } else {\n          if (this$1.isContextual(\"from\")) break\n          elt$1.imported = this$1.parseIdent()\n          if (isDummy(elt$1.imported)) break\n          elt$1.local = this$1.eatContextual(\"as\") ? this$1.parseIdent() : elt$1.imported\n          this$1.finishNode(elt$1, \"ImportSpecifier\")\n        }\n        elts.push(elt$1)\n        this$1.eat(acorn.tokTypes.comma)\n      }\n      this.eat(acorn.tokTypes.braceR)\n      this.popCx()\n    }\n    return elts\n  }\n\n  lp$1.parseExportSpecifierList = function() {\n    var this$1 = this;\n\n    var elts = []\n    var indent = this.curIndent, line = this.curLineStart, continuedLine = this.nextLineStart\n    this.pushCx()\n    this.eat(acorn.tokTypes.braceL)\n    if (this.curLineStart > continuedLine) continuedLine = this.curLineStart\n    while (!this.closes(acorn.tokTypes.braceR, indent + (this.curLineStart <= continuedLine ? 1 : 0), line)) {\n      if (this$1.isContextual(\"from\")) break\n      var elt = this$1.startNode()\n      elt.local = this$1.parseIdent()\n      if (isDummy(elt.local)) break\n      elt.exported = this$1.eatContextual(\"as\") ? this$1.parseIdent() : elt.local\n      this$1.finishNode(elt, \"ExportSpecifier\")\n      elts.push(elt)\n      this$1.eat(acorn.tokTypes.comma)\n    }\n    this.eat(acorn.tokTypes.braceR)\n    this.popCx()\n    return elts\n  }\n\n  var lp$2 = LooseParser.prototype\n\n  lp$2.checkLVal = function(expr) {\n    if (!expr) return expr\n    switch (expr.type) {\n    case \"Identifier\":\n    case \"MemberExpression\":\n      return expr\n\n    case \"ParenthesizedExpression\":\n      expr.expression = this.checkLVal(expr.expression)\n      return expr\n\n    default:\n      return this.dummyIdent()\n    }\n  }\n\n  lp$2.parseExpression = function(noIn) {\n    var this$1 = this;\n\n    var start = this.storeCurrentPos()\n    var expr = this.parseMaybeAssign(noIn)\n    if (this.tok.type === acorn.tokTypes.comma) {\n      var node = this.startNodeAt(start)\n      node.expressions = [expr]\n      while (this.eat(acorn.tokTypes.comma)) node.expressions.push(this$1.parseMaybeAssign(noIn))\n      return this.finishNode(node, \"SequenceExpression\")\n    }\n    return expr\n  }\n\n  lp$2.parseParenExpression = function() {\n    this.pushCx()\n    this.expect(acorn.tokTypes.parenL)\n    var val = this.parseExpression()\n    this.popCx()\n    this.expect(acorn.tokTypes.parenR)\n    return val\n  }\n\n  lp$2.parseMaybeAssign = function(noIn) {\n    if (this.toks.isContextual(\"yield\")) {\n      var node = this.startNode()\n      this.next()\n      if (this.semicolon() || this.canInsertSemicolon() || (this.tok.type != acorn.tokTypes.star && !this.tok.type.startsExpr)) {\n        node.delegate = false\n        node.argument = null\n      } else {\n        node.delegate = this.eat(acorn.tokTypes.star)\n        node.argument = this.parseMaybeAssign()\n      }\n      return this.finishNode(node, \"YieldExpression\")\n    }\n\n    var start = this.storeCurrentPos()\n    var left = this.parseMaybeConditional(noIn)\n    if (this.tok.type.isAssign) {\n      var node$1 = this.startNodeAt(start)\n      node$1.operator = this.tok.value\n      node$1.left = this.tok.type === acorn.tokTypes.eq ? this.toAssignable(left) : this.checkLVal(left)\n      this.next()\n      node$1.right = this.parseMaybeAssign(noIn)\n      return this.finishNode(node$1, \"AssignmentExpression\")\n    }\n    return left\n  }\n\n  lp$2.parseMaybeConditional = function(noIn) {\n    var start = this.storeCurrentPos()\n    var expr = this.parseExprOps(noIn)\n    if (this.eat(acorn.tokTypes.question)) {\n      var node = this.startNodeAt(start)\n      node.test = expr\n      node.consequent = this.parseMaybeAssign()\n      node.alternate = this.expect(acorn.tokTypes.colon) ? this.parseMaybeAssign(noIn) : this.dummyIdent()\n      return this.finishNode(node, \"ConditionalExpression\")\n    }\n    return expr\n  }\n\n  lp$2.parseExprOps = function(noIn) {\n    var start = this.storeCurrentPos()\n    var indent = this.curIndent, line = this.curLineStart\n    return this.parseExprOp(this.parseMaybeUnary(false), start, -1, noIn, indent, line)\n  }\n\n  lp$2.parseExprOp = function(left, start, minPrec, noIn, indent, line) {\n    if (this.curLineStart != line && this.curIndent < indent && this.tokenStartsLine()) return left\n    var prec = this.tok.type.binop\n    if (prec != null && (!noIn || this.tok.type !== acorn.tokTypes._in)) {\n      if (prec > minPrec) {\n        var node = this.startNodeAt(start)\n        node.left = left\n        node.operator = this.tok.value\n        this.next()\n        if (this.curLineStart != line && this.curIndent < indent && this.tokenStartsLine()) {\n          node.right = this.dummyIdent()\n        } else {\n          var rightStart = this.storeCurrentPos()\n          node.right = this.parseExprOp(this.parseMaybeUnary(false), rightStart, prec, noIn, indent, line)\n        }\n        this.finishNode(node, /&&|\\|\\|/.test(node.operator) ? \"LogicalExpression\" : \"BinaryExpression\")\n        return this.parseExprOp(node, start, minPrec, noIn, indent, line)\n      }\n    }\n    return left\n  }\n\n  lp$2.parseMaybeUnary = function(sawUnary) {\n    var this$1 = this;\n\n    var start = this.storeCurrentPos(), expr\n    if (this.tok.type.prefix) {\n      var node = this.startNode(), update = this.tok.type === acorn.tokTypes.incDec\n      if (!update) sawUnary = true\n      node.operator = this.tok.value\n      node.prefix = true\n      this.next()\n      node.argument = this.parseMaybeUnary(true)\n      if (update) node.argument = this.checkLVal(node.argument)\n      expr = this.finishNode(node, update ? \"UpdateExpression\" : \"UnaryExpression\")\n    } else if (this.tok.type === acorn.tokTypes.ellipsis) {\n      var node$1 = this.startNode()\n      this.next()\n      node$1.argument = this.parseMaybeUnary(sawUnary)\n      expr = this.finishNode(node$1, \"SpreadElement\")\n    } else {\n      expr = this.parseExprSubscripts()\n      while (this.tok.type.postfix && !this.canInsertSemicolon()) {\n        var node$2 = this$1.startNodeAt(start)\n        node$2.operator = this$1.tok.value\n        node$2.prefix = false\n        node$2.argument = this$1.checkLVal(expr)\n        this$1.next()\n        expr = this$1.finishNode(node$2, \"UpdateExpression\")\n      }\n    }\n\n    if (!sawUnary && this.eat(acorn.tokTypes.starstar)) {\n      var node$3 = this.startNodeAt(start)\n      node$3.operator = \"**\"\n      node$3.left = expr\n      node$3.right = this.parseMaybeUnary(false)\n      return this.finishNode(node$3, \"BinaryExpression\")\n    }\n\n    return expr\n  }\n\n  lp$2.parseExprSubscripts = function() {\n    var start = this.storeCurrentPos()\n    return this.parseSubscripts(this.parseExprAtom(), start, false, this.curIndent, this.curLineStart)\n  }\n\n  lp$2.parseSubscripts = function(base, start, noCalls, startIndent, line) {\n    var this$1 = this;\n\n    for (;;) {\n      if (this$1.curLineStart != line && this$1.curIndent <= startIndent && this$1.tokenStartsLine()) {\n        if (this$1.tok.type == acorn.tokTypes.dot && this$1.curIndent == startIndent)\n          --startIndent\n        else\n          return base\n      }\n\n      if (this$1.eat(acorn.tokTypes.dot)) {\n        var node = this$1.startNodeAt(start)\n        node.object = base\n        if (this$1.curLineStart != line && this$1.curIndent <= startIndent && this$1.tokenStartsLine())\n          node.property = this$1.dummyIdent()\n        else\n          node.property = this$1.parsePropertyAccessor() || this$1.dummyIdent()\n        node.computed = false\n        base = this$1.finishNode(node, \"MemberExpression\")\n      } else if (this$1.tok.type == acorn.tokTypes.bracketL) {\n        this$1.pushCx()\n        this$1.next()\n        var node$1 = this$1.startNodeAt(start)\n        node$1.object = base\n        node$1.property = this$1.parseExpression()\n        node$1.computed = true\n        this$1.popCx()\n        this$1.expect(acorn.tokTypes.bracketR)\n        base = this$1.finishNode(node$1, \"MemberExpression\")\n      } else if (!noCalls && this$1.tok.type == acorn.tokTypes.parenL) {\n        var node$2 = this$1.startNodeAt(start)\n        node$2.callee = base\n        node$2.arguments = this$1.parseExprList(acorn.tokTypes.parenR)\n        base = this$1.finishNode(node$2, \"CallExpression\")\n      } else if (this$1.tok.type == acorn.tokTypes.backQuote) {\n        var node$3 = this$1.startNodeAt(start)\n        node$3.tag = base\n        node$3.quasi = this$1.parseTemplate()\n        base = this$1.finishNode(node$3, \"TaggedTemplateExpression\")\n      } else {\n        return base\n      }\n    }\n  }\n\n  lp$2.parseExprAtom = function() {\n    var node\n    switch (this.tok.type) {\n    case acorn.tokTypes._this:\n    case acorn.tokTypes._super:\n      var type = this.tok.type === acorn.tokTypes._this ? \"ThisExpression\" : \"Super\"\n      node = this.startNode()\n      this.next()\n      return this.finishNode(node, type)\n\n    case acorn.tokTypes.name:\n      var start = this.storeCurrentPos()\n      var id = this.parseIdent()\n      return this.eat(acorn.tokTypes.arrow) ? this.parseArrowExpression(this.startNodeAt(start), [id]) : id\n\n    case acorn.tokTypes.regexp:\n      node = this.startNode()\n      var val = this.tok.value\n      node.regex = {pattern: val.pattern, flags: val.flags}\n      node.value = val.value\n      node.raw = this.input.slice(this.tok.start, this.tok.end)\n      this.next()\n      return this.finishNode(node, \"Literal\")\n\n    case acorn.tokTypes.num: case acorn.tokTypes.string:\n      node = this.startNode()\n      node.value = this.tok.value\n      node.raw = this.input.slice(this.tok.start, this.tok.end)\n      this.next()\n      return this.finishNode(node, \"Literal\")\n\n    case acorn.tokTypes._null: case acorn.tokTypes._true: case acorn.tokTypes._false:\n      node = this.startNode()\n      node.value = this.tok.type === acorn.tokTypes._null ? null : this.tok.type === acorn.tokTypes._true\n      node.raw = this.tok.type.keyword\n      this.next()\n      return this.finishNode(node, \"Literal\")\n\n    case acorn.tokTypes.parenL:\n      var parenStart = this.storeCurrentPos()\n      this.next()\n      var inner = this.parseExpression()\n      this.expect(acorn.tokTypes.parenR)\n      if (this.eat(acorn.tokTypes.arrow)) {\n        return this.parseArrowExpression(this.startNodeAt(parenStart), inner.expressions || (isDummy(inner) ? [] : [inner]))\n      }\n      if (this.options.preserveParens) {\n        var par = this.startNodeAt(parenStart)\n        par.expression = inner\n        inner = this.finishNode(par, \"ParenthesizedExpression\")\n      }\n      return inner\n\n    case acorn.tokTypes.bracketL:\n      node = this.startNode()\n      node.elements = this.parseExprList(acorn.tokTypes.bracketR, true)\n      return this.finishNode(node, \"ArrayExpression\")\n\n    case acorn.tokTypes.braceL:\n      return this.parseObj()\n\n    case acorn.tokTypes._class:\n      return this.parseClass()\n\n    case acorn.tokTypes._function:\n      node = this.startNode()\n      this.next()\n      return this.parseFunction(node, false)\n\n    case acorn.tokTypes._new:\n      return this.parseNew()\n\n    case acorn.tokTypes.backQuote:\n      return this.parseTemplate()\n\n    default:\n      return this.dummyIdent()\n    }\n  }\n\n  lp$2.parseNew = function() {\n    var node = this.startNode(), startIndent = this.curIndent, line = this.curLineStart\n    var meta = this.parseIdent(true)\n    if (this.options.ecmaVersion >= 6 && this.eat(acorn.tokTypes.dot)) {\n      node.meta = meta\n      node.property = this.parseIdent(true)\n      return this.finishNode(node, \"MetaProperty\")\n    }\n    var start = this.storeCurrentPos()\n    node.callee = this.parseSubscripts(this.parseExprAtom(), start, true, startIndent, line)\n    if (this.tok.type == acorn.tokTypes.parenL) {\n      node.arguments = this.parseExprList(acorn.tokTypes.parenR)\n    } else {\n      node.arguments = []\n    }\n    return this.finishNode(node, \"NewExpression\")\n  }\n\n  lp$2.parseTemplateElement = function() {\n    var elem = this.startNode()\n    elem.value = {\n      raw: this.input.slice(this.tok.start, this.tok.end).replace(/\\r\\n?/g, '\\n'),\n      cooked: this.tok.value\n    }\n    this.next()\n    elem.tail = this.tok.type === acorn.tokTypes.backQuote\n    return this.finishNode(elem, \"TemplateElement\")\n  }\n\n  lp$2.parseTemplate = function() {\n    var this$1 = this;\n\n    var node = this.startNode()\n    this.next()\n    node.expressions = []\n    var curElt = this.parseTemplateElement()\n    node.quasis = [curElt]\n    while (!curElt.tail) {\n      this$1.next()\n      node.expressions.push(this$1.parseExpression())\n      if (this$1.expect(acorn.tokTypes.braceR)) {\n        curElt = this$1.parseTemplateElement()\n      } else {\n        curElt = this$1.startNode()\n        curElt.value = {cooked: '', raw: ''}\n        curElt.tail = true\n        this$1.finishNode(curElt, \"TemplateElement\")\n      }\n      node.quasis.push(curElt)\n    }\n    this.expect(acorn.tokTypes.backQuote)\n    return this.finishNode(node, \"TemplateLiteral\")\n  }\n\n  lp$2.parseObj = function() {\n    var this$1 = this;\n\n    var node = this.startNode()\n    node.properties = []\n    this.pushCx()\n    var indent = this.curIndent + 1, line = this.curLineStart\n    this.eat(acorn.tokTypes.braceL)\n    if (this.curIndent + 1 < indent) { indent = this.curIndent; line = this.curLineStart }\n    while (!this.closes(acorn.tokTypes.braceR, indent, line)) {\n      var prop = this$1.startNode(), isGenerator, start\n      if (this$1.options.ecmaVersion >= 6) {\n        start = this$1.storeCurrentPos()\n        prop.method = false\n        prop.shorthand = false\n        isGenerator = this$1.eat(acorn.tokTypes.star)\n      }\n      this$1.parsePropertyName(prop)\n      if (isDummy(prop.key)) { if (isDummy(this$1.parseMaybeAssign())) this$1.next(); this$1.eat(acorn.tokTypes.comma); continue }\n      if (this$1.eat(acorn.tokTypes.colon)) {\n        prop.kind = \"init\"\n        prop.value = this$1.parseMaybeAssign()\n      } else if (this$1.options.ecmaVersion >= 6 && (this$1.tok.type === acorn.tokTypes.parenL || this$1.tok.type === acorn.tokTypes.braceL)) {\n        prop.kind = \"init\"\n        prop.method = true\n        prop.value = this$1.parseMethod(isGenerator)\n      } else if (this$1.options.ecmaVersion >= 5 && prop.key.type === \"Identifier\" &&\n                 !prop.computed && (prop.key.name === \"get\" || prop.key.name === \"set\") &&\n                 (this$1.tok.type != acorn.tokTypes.comma && this$1.tok.type != acorn.tokTypes.braceR)) {\n        prop.kind = prop.key.name\n        this$1.parsePropertyName(prop)\n        prop.value = this$1.parseMethod(false)\n      } else {\n        prop.kind = \"init\"\n        if (this$1.options.ecmaVersion >= 6) {\n          if (this$1.eat(acorn.tokTypes.eq)) {\n            var assign = this$1.startNodeAt(start)\n            assign.operator = \"=\"\n            assign.left = prop.key\n            assign.right = this$1.parseMaybeAssign()\n            prop.value = this$1.finishNode(assign, \"AssignmentExpression\")\n          } else {\n            prop.value = prop.key\n          }\n        } else {\n          prop.value = this$1.dummyIdent()\n        }\n        prop.shorthand = true\n      }\n      node.properties.push(this$1.finishNode(prop, \"Property\"))\n      this$1.eat(acorn.tokTypes.comma)\n    }\n    this.popCx()\n    if (!this.eat(acorn.tokTypes.braceR)) {\n      // If there is no closing brace, make the node span to the start\n      // of the next token (this is useful for Tern)\n      this.last.end = this.tok.start\n      if (this.options.locations) this.last.loc.end = this.tok.loc.start\n    }\n    return this.finishNode(node, \"ObjectExpression\")\n  }\n\n  lp$2.parsePropertyName = function(prop) {\n    if (this.options.ecmaVersion >= 6) {\n      if (this.eat(acorn.tokTypes.bracketL)) {\n        prop.computed = true\n        prop.key = this.parseExpression()\n        this.expect(acorn.tokTypes.bracketR)\n        return\n      } else {\n        prop.computed = false\n      }\n    }\n    var key = (this.tok.type === acorn.tokTypes.num || this.tok.type === acorn.tokTypes.string) ? this.parseExprAtom() : this.parseIdent()\n    prop.key = key || this.dummyIdent()\n  }\n\n  lp$2.parsePropertyAccessor = function() {\n    if (this.tok.type === acorn.tokTypes.name || this.tok.type.keyword) return this.parseIdent()\n  }\n\n  lp$2.parseIdent = function() {\n    var name = this.tok.type === acorn.tokTypes.name ? this.tok.value : this.tok.type.keyword\n    if (!name) return this.dummyIdent()\n    var node = this.startNode()\n    this.next()\n    node.name = name\n    return this.finishNode(node, \"Identifier\")\n  }\n\n  lp$2.initFunction = function(node) {\n    node.id = null\n    node.params = []\n    if (this.options.ecmaVersion >= 6) {\n      node.generator = false\n      node.expression = false\n    }\n  }\n\n  // Convert existing expression atom to assignable pattern\n  // if possible.\n\n  lp$2.toAssignable = function(node, binding) {\n    var this$1 = this;\n\n    if (!node || node.type == \"Identifier\" || (node.type == \"MemberExpression\" && !binding)) {\n      // Okay\n    } else if (node.type == \"ParenthesizedExpression\") {\n      node.expression = this.toAssignable(node.expression, binding)\n    } else if (this.options.ecmaVersion < 6) {\n      return this.dummyIdent()\n    } else if (node.type == \"ObjectExpression\") {\n      node.type = \"ObjectPattern\"\n      var props = node.properties\n      for (var i = 0; i < props.length; i++)\n        props[i].value = this$1.toAssignable(props[i].value, binding)\n    } else if (node.type == \"ArrayExpression\") {\n      node.type = \"ArrayPattern\"\n      this.toAssignableList(node.elements, binding)\n    } else if (node.type == \"SpreadElement\") {\n      node.type = \"RestElement\"\n      node.argument = this.toAssignable(node.argument, binding)\n    } else if (node.type == \"AssignmentExpression\") {\n      node.type = \"AssignmentPattern\"\n      delete node.operator\n    } else {\n      return this.dummyIdent()\n    }\n    return node\n  }\n\n  lp$2.toAssignableList = function(exprList, binding) {\n    var this$1 = this;\n\n    for (var i = 0; i < exprList.length; i++)\n      exprList[i] = this$1.toAssignable(exprList[i], binding)\n    return exprList\n  }\n\n  lp$2.parseFunctionParams = function(params) {\n    params = this.parseExprList(acorn.tokTypes.parenR)\n    return this.toAssignableList(params, true)\n  }\n\n  lp$2.parseMethod = function(isGenerator) {\n    var node = this.startNode()\n    this.initFunction(node)\n    node.params = this.parseFunctionParams()\n    node.generator = isGenerator || false\n    node.expression = this.options.ecmaVersion >= 6 && this.tok.type !== acorn.tokTypes.braceL\n    node.body = node.expression ? this.parseMaybeAssign() : this.parseBlock()\n    return this.finishNode(node, \"FunctionExpression\")\n  }\n\n  lp$2.parseArrowExpression = function(node, params) {\n    this.initFunction(node)\n    node.params = this.toAssignableList(params, true)\n    node.expression = this.tok.type !== acorn.tokTypes.braceL\n    node.body = node.expression ? this.parseMaybeAssign() : this.parseBlock()\n    return this.finishNode(node, \"ArrowFunctionExpression\")\n  }\n\n  lp$2.parseExprList = function(close, allowEmpty) {\n    var this$1 = this;\n\n    this.pushCx()\n    var indent = this.curIndent, line = this.curLineStart, elts = []\n    this.next() // Opening bracket\n    while (!this.closes(close, indent + 1, line)) {\n      if (this$1.eat(acorn.tokTypes.comma)) {\n        elts.push(allowEmpty ? null : this$1.dummyIdent())\n        continue\n      }\n      var elt = this$1.parseMaybeAssign()\n      if (isDummy(elt)) {\n        if (this$1.closes(close, indent, line)) break\n        this$1.next()\n      } else {\n        elts.push(elt)\n      }\n      this$1.eat(acorn.tokTypes.comma)\n    }\n    this.popCx()\n    if (!this.eat(close)) {\n      // If there is no closing brace, make the node span to the start\n      // of the next token (this is useful for Tern)\n      this.last.end = this.tok.start\n      if (this.options.locations) this.last.loc.end = this.tok.loc.start\n    }\n    return elts\n  }\n\n  acorn__default.defaultOptions.tabSize = 4\n\n  function parse_dammit(input, options) {\n    var p = new LooseParser(input, options)\n    p.next()\n    return p.parseTopLevel()\n  }\n\n  acorn__default.parse_dammit = parse_dammit\n  acorn__default.LooseParser = LooseParser\n  acorn__default.pluginsLoose = pluginsLoose\n\n  exports.parse_dammit = parse_dammit;\n  exports.LooseParser = LooseParser;\n  exports.pluginsLoose = pluginsLoose;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n}));"]}