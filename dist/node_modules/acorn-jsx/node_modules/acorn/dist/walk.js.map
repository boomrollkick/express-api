{"version":3,"sources":["../../../../../../src/node_modules/acorn-jsx/node_modules/acorn/dist/walk.js"],"names":["global","factory","exports","module","define","amd","acorn","walk","simple","node","visitors","base","state","override","c","st","type","found","ancestor","ancestors","isNew","length","push","pop","recursive","funcs","visitor","make","makeTest","test","Found","findNodeAt","start","end","e","findNodeAround","pos","findNodeAfter","findNodeBefore","max","create","Object","proto","Ctor","prototype","skipThrough","ignore","_node","_st","_c","Program","BlockStatement","i","body","Statement","EmptyStatement","ExpressionStatement","ParenthesizedExpression","expression","IfStatement","consequent","alternate","LabeledStatement","BreakStatement","ContinueStatement","WithStatement","object","SwitchStatement","discriminant","cases","cs","j","ReturnStatement","YieldExpression","argument","ThrowStatement","SpreadElement","TryStatement","block","handler","finalizer","CatchClause","param","WhileStatement","DoWhileStatement","ForStatement","init","update","ForInStatement","ForOfStatement","left","right","ForInit","DebuggerStatement","FunctionDeclaration","VariableDeclaration","declarations","VariableDeclarator","id","Function","params","ScopeBody","ScopeExpression","Pattern","VariablePattern","MemberPattern","RestElement","ArrayPattern","elements","elt","ObjectPattern","properties","value","Expression","ThisExpression","Super","MetaProperty","ArrayExpression","ObjectExpression","FunctionExpression","ArrowFunctionExpression","SequenceExpression","TemplateLiteral","expressions","UnaryExpression","UpdateExpression","BinaryExpression","LogicalExpression","AssignmentExpression","AssignmentPattern","ConditionalExpression","NewExpression","CallExpression","callee","arguments","MemberExpression","computed","property","ExportNamedDeclaration","ExportDefaultDeclaration","declaration","source","ExportAllDeclaration","ImportDeclaration","specifiers","ImportSpecifier","ImportDefaultSpecifier","ImportNamespaceSpecifier","Identifier","Literal","TaggedTemplateExpression","tag","quasi","ClassDeclaration","ClassExpression","Class","superClass","MethodDefinition","Property","key","defineProperty"],"mappings":";;;;AAAC,WAAUA,MAAV,EAAkBC,OAAlB,EAA2B;AAC1B,UAAOC,OAAP,yCAAOA,OAAP,OAAmB,QAAnB,IAA+B,OAAOC,MAAP,KAAkB,WAAjD,GAA+DF,QAAQC,OAAR,CAA/D,GACA,OAAOE,MAAP,KAAkB,UAAlB,IAAgCA,OAAOC,GAAvC,GAA6CD,OAAO,CAAC,SAAD,CAAP,EAAoBH,OAApB,CAA7C,GACCA,SAASD,OAAOM,KAAP,GAAeN,OAAOM,KAAP,IAAgB,EAA/B,EAAmCN,OAAOM,KAAP,CAAaC,IAAb,GAAoBP,OAAOM,KAAP,CAAaC,IAAb,IAAqB,EAArF,EAFD;AAGD,CAJA,aAIO,UAAUL,OAAV,EAAmB;AAAE;;AAE3B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,WAASM,MAAT,CAAgBC,IAAhB,EAAsBC,QAAtB,EAAgCC,IAAhC,EAAsCC,KAAtC,EAA6CC,QAA7C,EAAuD;AACrD,QAAI,CAACF,IAAL,EAAWA,OAAOT,QAAQS,IAAf,CACV,CAAC,SAASG,CAAT,CAAWL,IAAX,EAAiBM,EAAjB,EAAqBF,QAArB,EAA+B;AAC/B,UAAIG,OAAOH,YAAYJ,KAAKO,IAA5B;AAAA,UAAkCC,QAAQP,SAASM,IAAT,CAA1C;AACAL,WAAKK,IAAL,EAAWP,IAAX,EAAiBM,EAAjB,EAAqBD,CAArB;AACA,UAAIG,KAAJ,EAAWA,MAAMR,IAAN,EAAYM,EAAZ;AACZ,KAJA,EAIEN,IAJF,EAIQG,KAJR,EAIeC,QAJf;AAKF;;AAED;AACA;AACA;AACA,WAASK,QAAT,CAAkBT,IAAlB,EAAwBC,QAAxB,EAAkCC,IAAlC,EAAwCC,KAAxC,EAA+C;AAC7C,QAAI,CAACD,IAAL,EAAWA,OAAOT,QAAQS,IAAf;AACX,QAAIQ,YAAY,EAAhB,CACC,CAAC,SAASL,CAAT,CAAWL,IAAX,EAAiBM,EAAjB,EAAqBF,QAArB,EAA+B;AAC/B,UAAIG,OAAOH,YAAYJ,KAAKO,IAA5B;AAAA,UAAkCC,QAAQP,SAASM,IAAT,CAA1C;AACA,UAAII,QAAQX,QAAQU,UAAUA,UAAUE,MAAV,GAAmB,CAA7B,CAApB;AACA,UAAID,KAAJ,EAAWD,UAAUG,IAAV,CAAeb,IAAf;AACXE,WAAKK,IAAL,EAAWP,IAAX,EAAiBM,EAAjB,EAAqBD,CAArB;AACA,UAAIG,KAAJ,EAAWA,MAAMR,IAAN,EAAYM,MAAMI,SAAlB,EAA6BA,SAA7B;AACX,UAAIC,KAAJ,EAAWD,UAAUI,GAAV;AACZ,KAPA,EAOEd,IAPF,EAOQG,KAPR;AAQF;;AAED;AACA;AACA;AACA;AACA;AACA,WAASY,SAAT,CAAmBf,IAAnB,EAAyBG,KAAzB,EAAgCa,KAAhC,EAAuCd,IAAvC,EAA6CE,QAA7C,EAAuD;AACrD,QAAIa,UAAUD,QAAQvB,QAAQyB,IAAR,CAAaF,KAAb,EAAoBd,IAApB,CAAR,GAAoCA,IAAlD,CACC,CAAC,SAASG,CAAT,CAAWL,IAAX,EAAiBM,EAAjB,EAAqBF,QAArB,EAA+B;AAC/Ba,cAAQb,YAAYJ,KAAKO,IAAzB,EAA+BP,IAA/B,EAAqCM,EAArC,EAAyCD,CAAzC;AACD,KAFA,EAEEL,IAFF,EAEQG,KAFR,EAEeC,QAFf;AAGF;;AAED,WAASe,QAAT,CAAkBC,IAAlB,EAAwB;AACtB,QAAI,OAAOA,IAAP,IAAe,QAAnB,EACE,OAAO,UAAUb,IAAV,EAAgB;AAAE,aAAOA,QAAQa,IAAf;AAAsB,KAA/C,CADF,KAEK,IAAI,CAACA,IAAL,EACH,OAAO,YAAY;AAAE,aAAO,IAAP;AAAc,KAAnC,CADG,KAGH,OAAOA,IAAP;AACH;;AAED,MAAIC,QAAQ,SAASA,KAAT,CAAerB,IAAf,EAAqBG,KAArB,EAA4B;AAAE,SAAKH,IAAL,GAAYA,IAAZ,CAAkB,KAAKG,KAAL,GAAaA,KAAb;AAAoB,GAAhF;;AAEA;AACA;AACA;AACA,WAASmB,UAAT,CAAoBtB,IAApB,EAA0BuB,KAA1B,EAAiCC,GAAjC,EAAsCJ,IAAtC,EAA4ClB,IAA5C,EAAkDC,KAAlD,EAAyD;AACvDiB,WAAOD,SAASC,IAAT,CAAP;AACA,QAAI,CAAClB,IAAL,EAAWA,OAAOT,QAAQS,IAAf;AACX,QAAI;AACF,OAAC,CAAC,SAASG,CAAT,CAAWL,IAAX,EAAiBM,EAAjB,EAAqBF,QAArB,EAA+B;AAC/B,YAAIG,OAAOH,YAAYJ,KAAKO,IAA5B;AACA,YAAI,CAACgB,SAAS,IAAT,IAAiBvB,KAAKuB,KAAL,IAAcA,KAAhC,MACCC,OAAO,IAAP,IAAexB,KAAKwB,GAAL,IAAYA,GAD5B,CAAJ,EAEEtB,KAAKK,IAAL,EAAWP,IAAX,EAAiBM,EAAjB,EAAqBD,CAArB;AACF,YAAI,CAACkB,SAAS,IAAT,IAAiBvB,KAAKuB,KAAL,IAAcA,KAAhC,MACCC,OAAO,IAAP,IAAexB,KAAKwB,GAAL,IAAYA,GAD5B,KAEAJ,KAAKb,IAAL,EAAWP,IAAX,CAFJ,EAGE,MAAM,IAAIqB,KAAJ,CAAUrB,IAAV,EAAgBM,EAAhB,CAAN;AACH,OATA,EASEN,IATF,EASQG,KATR;AAUF,KAXD,CAWE,OAAOsB,CAAP,EAAU;AACV,UAAIA,aAAaJ,KAAjB,EAAwB,OAAOI,CAAP;AACxB,YAAMA,CAAN;AACD;AACF;;AAED;AACA;AACA,WAASC,cAAT,CAAwB1B,IAAxB,EAA8B2B,GAA9B,EAAmCP,IAAnC,EAAyClB,IAAzC,EAA+CC,KAA/C,EAAsD;AACpDiB,WAAOD,SAASC,IAAT,CAAP;AACA,QAAI,CAAClB,IAAL,EAAWA,OAAOT,QAAQS,IAAf;AACX,QAAI;AACF,OAAC,CAAC,SAASG,CAAT,CAAWL,IAAX,EAAiBM,EAAjB,EAAqBF,QAArB,EAA+B;AAC/B,YAAIG,OAAOH,YAAYJ,KAAKO,IAA5B;AACA,YAAIP,KAAKuB,KAAL,GAAaI,GAAb,IAAoB3B,KAAKwB,GAAL,GAAWG,GAAnC,EAAwC;AACxCzB,aAAKK,IAAL,EAAWP,IAAX,EAAiBM,EAAjB,EAAqBD,CAArB;AACA,YAAIe,KAAKb,IAAL,EAAWP,IAAX,CAAJ,EAAsB,MAAM,IAAIqB,KAAJ,CAAUrB,IAAV,EAAgBM,EAAhB,CAAN;AACvB,OALA,EAKEN,IALF,EAKQG,KALR;AAMF,KAPD,CAOE,OAAOsB,CAAP,EAAU;AACV,UAAIA,aAAaJ,KAAjB,EAAwB,OAAOI,CAAP;AACxB,YAAMA,CAAN;AACD;AACF;;AAED;AACA,WAASG,aAAT,CAAuB5B,IAAvB,EAA6B2B,GAA7B,EAAkCP,IAAlC,EAAwClB,IAAxC,EAA8CC,KAA9C,EAAqD;AACnDiB,WAAOD,SAASC,IAAT,CAAP;AACA,QAAI,CAAClB,IAAL,EAAWA,OAAOT,QAAQS,IAAf;AACX,QAAI;AACF,OAAC,CAAC,SAASG,CAAT,CAAWL,IAAX,EAAiBM,EAAjB,EAAqBF,QAArB,EAA+B;AAC/B,YAAIJ,KAAKwB,GAAL,GAAWG,GAAf,EAAoB;AACpB,YAAIpB,OAAOH,YAAYJ,KAAKO,IAA5B;AACA,YAAIP,KAAKuB,KAAL,IAAcI,GAAd,IAAqBP,KAAKb,IAAL,EAAWP,IAAX,CAAzB,EAA2C,MAAM,IAAIqB,KAAJ,CAAUrB,IAAV,EAAgBM,EAAhB,CAAN;AAC3CJ,aAAKK,IAAL,EAAWP,IAAX,EAAiBM,EAAjB,EAAqBD,CAArB;AACD,OALA,EAKEL,IALF,EAKQG,KALR;AAMF,KAPD,CAOE,OAAOsB,CAAP,EAAU;AACV,UAAIA,aAAaJ,KAAjB,EAAwB,OAAOI,CAAP;AACxB,YAAMA,CAAN;AACD;AACF;;AAED;AACA,WAASI,cAAT,CAAwB7B,IAAxB,EAA8B2B,GAA9B,EAAmCP,IAAnC,EAAyClB,IAAzC,EAA+CC,KAA/C,EAAsD;AACpDiB,WAAOD,SAASC,IAAT,CAAP;AACA,QAAI,CAAClB,IAAL,EAAWA,OAAOT,QAAQS,IAAf;AACX,QAAI4B,GAAJ,CACC,CAAC,SAASzB,CAAT,CAAWL,IAAX,EAAiBM,EAAjB,EAAqBF,QAArB,EAA+B;AAC/B,UAAIJ,KAAKuB,KAAL,GAAaI,GAAjB,EAAsB;AACtB,UAAIpB,OAAOH,YAAYJ,KAAKO,IAA5B;AACA,UAAIP,KAAKwB,GAAL,IAAYG,GAAZ,KAAoB,CAACG,GAAD,IAAQA,IAAI9B,IAAJ,CAASwB,GAAT,GAAexB,KAAKwB,GAAhD,KAAwDJ,KAAKb,IAAL,EAAWP,IAAX,CAA5D,EACE8B,MAAM,IAAIT,KAAJ,CAAUrB,IAAV,EAAgBM,EAAhB,CAAN;AACFJ,WAAKK,IAAL,EAAWP,IAAX,EAAiBM,EAAjB,EAAqBD,CAArB;AACD,KANA,EAMEL,IANF,EAMQG,KANR;AAOD,WAAO2B,GAAP;AACD;;AAED;AACA,MAAIC,SAASC,OAAOD,MAAP,IAAiB,UAASE,KAAT,EAAgB;AAC5C,aAASC,IAAT,GAAgB,CAAE;AAClBA,SAAKC,SAAL,GAAiBF,KAAjB;AACA,WAAO,IAAIC,IAAJ,EAAP;AACD,GAJD;;AAMA;AACA;AACA,WAAShB,IAAT,CAAcF,KAAd,EAAqBd,IAArB,EAA2B;AACzB,QAAI,CAACA,IAAL,EAAWA,OAAOT,QAAQS,IAAf;AACX,QAAIe,UAAUc,OAAO7B,IAAP,CAAd;AACA,SAAK,IAAIK,IAAT,IAAiBS,KAAjB;AAAwBC,cAAQV,IAAR,IAAgBS,MAAMT,IAAN,CAAhB;AAAxB,KACA,OAAOU,OAAP;AACD;;AAED,WAASmB,WAAT,CAAqBpC,IAArB,EAA2BM,EAA3B,EAA+BD,CAA/B,EAAkC;AAAEA,MAAEL,IAAF,EAAQM,EAAR;AAAa;AACjD,WAAS+B,MAAT,CAAgBC,KAAhB,EAAuBC,GAAvB,EAA4BC,EAA5B,EAAgC,CAAE;;AAElC;;AAEA,MAAItC,OAAO,EAAX;;AAEAA,OAAKuC,OAAL,GAAevC,KAAKwC,cAAL,GAAsB,UAAU1C,IAAV,EAAgBM,EAAhB,EAAoBD,CAApB,EAAuB;AAC1D,SAAK,IAAIsC,IAAI,CAAb,EAAgBA,IAAI3C,KAAK4C,IAAL,CAAUhC,MAA9B,EAAsC,EAAE+B,CAAxC;AACEtC,QAAEL,KAAK4C,IAAL,CAAUD,CAAV,CAAF,EAAgBrC,EAAhB,EAAoB,WAApB;AADF;AAED,GAHD;AAIAJ,OAAK2C,SAAL,GAAiBT,WAAjB;AACAlC,OAAK4C,cAAL,GAAsBT,MAAtB;AACAnC,OAAK6C,mBAAL,GAA2B7C,KAAK8C,uBAAL,GACzB,UAAUhD,IAAV,EAAgBM,EAAhB,EAAoBD,CAApB,EAAuB;AAAE,WAAOA,EAAEL,KAAKiD,UAAP,EAAmB3C,EAAnB,EAAuB,YAAvB,CAAP;AAA8C,GADzE;AAEAJ,OAAKgD,WAAL,GAAmB,UAAUlD,IAAV,EAAgBM,EAAhB,EAAoBD,CAApB,EAAuB;AACxCA,MAAEL,KAAKoB,IAAP,EAAad,EAAb,EAAiB,YAAjB;AACAD,MAAEL,KAAKmD,UAAP,EAAmB7C,EAAnB,EAAuB,WAAvB;AACA,QAAIN,KAAKoD,SAAT,EAAoB/C,EAAEL,KAAKoD,SAAP,EAAkB9C,EAAlB,EAAsB,WAAtB;AACrB,GAJD;AAKAJ,OAAKmD,gBAAL,GAAwB,UAAUrD,IAAV,EAAgBM,EAAhB,EAAoBD,CAApB,EAAuB;AAAE,WAAOA,EAAEL,KAAK4C,IAAP,EAAatC,EAAb,EAAiB,WAAjB,CAAP;AAAuC,GAAxF;AACAJ,OAAKoD,cAAL,GAAsBpD,KAAKqD,iBAAL,GAAyBlB,MAA/C;AACAnC,OAAKsD,aAAL,GAAqB,UAAUxD,IAAV,EAAgBM,EAAhB,EAAoBD,CAApB,EAAuB;AAC1CA,MAAEL,KAAKyD,MAAP,EAAenD,EAAf,EAAmB,YAAnB;AACAD,MAAEL,KAAK4C,IAAP,EAAatC,EAAb,EAAiB,WAAjB;AACD,GAHD;AAIAJ,OAAKwD,eAAL,GAAuB,UAAU1D,IAAV,EAAgBM,EAAhB,EAAoBD,CAApB,EAAuB;AAC5CA,MAAEL,KAAK2D,YAAP,EAAqBrD,EAArB,EAAyB,YAAzB;AACA,SAAK,IAAIqC,IAAI,CAAb,EAAgBA,IAAI3C,KAAK4D,KAAL,CAAWhD,MAA/B,EAAuC,EAAE+B,CAAzC,EAA4C;AAC1C,UAAIkB,KAAK7D,KAAK4D,KAAL,CAAWjB,CAAX,CAAT;AACA,UAAIkB,GAAGzC,IAAP,EAAaf,EAAEwD,GAAGzC,IAAL,EAAWd,EAAX,EAAe,YAAf;AACb,WAAK,IAAIwD,IAAI,CAAb,EAAgBA,IAAID,GAAGV,UAAH,CAAcvC,MAAlC,EAA0C,EAAEkD,CAA5C;AACEzD,UAAEwD,GAAGV,UAAH,CAAcW,CAAd,CAAF,EAAoBxD,EAApB,EAAwB,WAAxB;AADF;AAED;AACF,GARD;AASAJ,OAAK6D,eAAL,GAAuB7D,KAAK8D,eAAL,GAAuB,UAAUhE,IAAV,EAAgBM,EAAhB,EAAoBD,CAApB,EAAuB;AACnE,QAAIL,KAAKiE,QAAT,EAAmB5D,EAAEL,KAAKiE,QAAP,EAAiB3D,EAAjB,EAAqB,YAArB;AACpB,GAFD;AAGAJ,OAAKgE,cAAL,GAAsBhE,KAAKiE,aAAL,GACpB,UAAUnE,IAAV,EAAgBM,EAAhB,EAAoBD,CAApB,EAAuB;AAAE,WAAOA,EAAEL,KAAKiE,QAAP,EAAiB3D,EAAjB,EAAqB,YAArB,CAAP;AAA4C,GADvE;AAEAJ,OAAKkE,YAAL,GAAoB,UAAUpE,IAAV,EAAgBM,EAAhB,EAAoBD,CAApB,EAAuB;AACzCA,MAAEL,KAAKqE,KAAP,EAAc/D,EAAd,EAAkB,WAAlB;AACA,QAAIN,KAAKsE,OAAT,EAAkBjE,EAAEL,KAAKsE,OAAP,EAAgBhE,EAAhB;AAClB,QAAIN,KAAKuE,SAAT,EAAoBlE,EAAEL,KAAKuE,SAAP,EAAkBjE,EAAlB,EAAsB,WAAtB;AACrB,GAJD;AAKAJ,OAAKsE,WAAL,GAAmB,UAAUxE,IAAV,EAAgBM,EAAhB,EAAoBD,CAApB,EAAuB;AACxCA,MAAEL,KAAKyE,KAAP,EAAcnE,EAAd,EAAkB,SAAlB;AACAD,MAAEL,KAAK4C,IAAP,EAAatC,EAAb,EAAiB,WAAjB;AACD,GAHD;AAIAJ,OAAKwE,cAAL,GAAsBxE,KAAKyE,gBAAL,GAAwB,UAAU3E,IAAV,EAAgBM,EAAhB,EAAoBD,CAApB,EAAuB;AACnEA,MAAEL,KAAKoB,IAAP,EAAad,EAAb,EAAiB,YAAjB;AACAD,MAAEL,KAAK4C,IAAP,EAAatC,EAAb,EAAiB,WAAjB;AACD,GAHD;AAIAJ,OAAK0E,YAAL,GAAoB,UAAU5E,IAAV,EAAgBM,EAAhB,EAAoBD,CAApB,EAAuB;AACzC,QAAIL,KAAK6E,IAAT,EAAexE,EAAEL,KAAK6E,IAAP,EAAavE,EAAb,EAAiB,SAAjB;AACf,QAAIN,KAAKoB,IAAT,EAAef,EAAEL,KAAKoB,IAAP,EAAad,EAAb,EAAiB,YAAjB;AACf,QAAIN,KAAK8E,MAAT,EAAiBzE,EAAEL,KAAK8E,MAAP,EAAexE,EAAf,EAAmB,YAAnB;AACjBD,MAAEL,KAAK4C,IAAP,EAAatC,EAAb,EAAiB,WAAjB;AACD,GALD;AAMAJ,OAAK6E,cAAL,GAAsB7E,KAAK8E,cAAL,GAAsB,UAAUhF,IAAV,EAAgBM,EAAhB,EAAoBD,CAApB,EAAuB;AACjEA,MAAEL,KAAKiF,IAAP,EAAa3E,EAAb,EAAiB,SAAjB;AACAD,MAAEL,KAAKkF,KAAP,EAAc5E,EAAd,EAAkB,YAAlB;AACAD,MAAEL,KAAK4C,IAAP,EAAatC,EAAb,EAAiB,WAAjB;AACD,GAJD;AAKAJ,OAAKiF,OAAL,GAAe,UAAUnF,IAAV,EAAgBM,EAAhB,EAAoBD,CAApB,EAAuB;AACpC,QAAIL,KAAKO,IAAL,IAAa,qBAAjB,EAAwCF,EAAEL,IAAF,EAAQM,EAAR,EAAxC,KACKD,EAAEL,IAAF,EAAQM,EAAR,EAAY,YAAZ;AACN,GAHD;AAIAJ,OAAKkF,iBAAL,GAAyB/C,MAAzB;;AAEAnC,OAAKmF,mBAAL,GAA2B,UAAUrF,IAAV,EAAgBM,EAAhB,EAAoBD,CAApB,EAAuB;AAAE,WAAOA,EAAEL,IAAF,EAAQM,EAAR,EAAY,UAAZ,CAAP;AAAiC,GAArF;AACAJ,OAAKoF,mBAAL,GAA2B,UAAUtF,IAAV,EAAgBM,EAAhB,EAAoBD,CAApB,EAAuB;AAChD,SAAK,IAAIsC,IAAI,CAAb,EAAgBA,IAAI3C,KAAKuF,YAAL,CAAkB3E,MAAtC,EAA8C,EAAE+B,CAAhD;AACEtC,QAAEL,KAAKuF,YAAL,CAAkB5C,CAAlB,CAAF,EAAwBrC,EAAxB;AADF;AAED,GAHD;AAIAJ,OAAKsF,kBAAL,GAA0B,UAAUxF,IAAV,EAAgBM,EAAhB,EAAoBD,CAApB,EAAuB;AAC/CA,MAAEL,KAAKyF,EAAP,EAAWnF,EAAX,EAAe,SAAf;AACA,QAAIN,KAAK6E,IAAT,EAAexE,EAAEL,KAAK6E,IAAP,EAAavE,EAAb,EAAiB,YAAjB;AAChB,GAHD;;AAKAJ,OAAKwF,QAAL,GAAgB,UAAU1F,IAAV,EAAgBM,EAAhB,EAAoBD,CAApB,EAAuB;AACrC,QAAIL,KAAKyF,EAAT,EAAapF,EAAEL,KAAKyF,EAAP,EAAWnF,EAAX,EAAe,SAAf;AACb,SAAK,IAAIqC,IAAI,CAAb,EAAgBA,IAAI3C,KAAK2F,MAAL,CAAY/E,MAAhC,EAAwC+B,GAAxC;AACEtC,QAAEL,KAAK2F,MAAL,CAAYhD,CAAZ,CAAF,EAAkBrC,EAAlB,EAAsB,SAAtB;AADF,KAEAD,EAAEL,KAAK4C,IAAP,EAAatC,EAAb,EAAiBN,KAAKiD,UAAL,GAAkB,iBAAlB,GAAsC,WAAvD;AACD,GALD;AAMA;AACA;AACA/C,OAAK0F,SAAL,GAAiB,UAAU5F,IAAV,EAAgBM,EAAhB,EAAoBD,CAApB,EAAuB;AAAE,WAAOA,EAAEL,IAAF,EAAQM,EAAR,EAAY,WAAZ,CAAP;AAAkC,GAA5E;AACAJ,OAAK2F,eAAL,GAAuB,UAAU7F,IAAV,EAAgBM,EAAhB,EAAoBD,CAApB,EAAuB;AAAE,WAAOA,EAAEL,IAAF,EAAQM,EAAR,EAAY,YAAZ,CAAP;AAAmC,GAAnF;;AAEAJ,OAAK4F,OAAL,GAAe,UAAU9F,IAAV,EAAgBM,EAAhB,EAAoBD,CAApB,EAAuB;AACpC,QAAIL,KAAKO,IAAL,IAAa,YAAjB,EACEF,EAAEL,IAAF,EAAQM,EAAR,EAAY,iBAAZ,EADF,KAEK,IAAIN,KAAKO,IAAL,IAAa,kBAAjB,EACHF,EAAEL,IAAF,EAAQM,EAAR,EAAY,eAAZ,EADG,KAGHD,EAAEL,IAAF,EAAQM,EAAR;AACH,GAPD;AAQAJ,OAAK6F,eAAL,GAAuB1D,MAAvB;AACAnC,OAAK8F,aAAL,GAAqB5D,WAArB;AACAlC,OAAK+F,WAAL,GAAmB,UAAUjG,IAAV,EAAgBM,EAAhB,EAAoBD,CAApB,EAAuB;AAAE,WAAOA,EAAEL,KAAKiE,QAAP,EAAiB3D,EAAjB,EAAqB,SAArB,CAAP;AAAyC,GAArF;AACAJ,OAAKgG,YAAL,GAAqB,UAAUlG,IAAV,EAAgBM,EAAhB,EAAoBD,CAApB,EAAuB;AAC1C,SAAK,IAAIsC,IAAI,CAAb,EAAgBA,IAAI3C,KAAKmG,QAAL,CAAcvF,MAAlC,EAA0C,EAAE+B,CAA5C,EAA+C;AAC7C,UAAIyD,MAAMpG,KAAKmG,QAAL,CAAcxD,CAAd,CAAV;AACA,UAAIyD,GAAJ,EAAS/F,EAAE+F,GAAF,EAAO9F,EAAP,EAAW,SAAX;AACV;AACF,GALD;AAMAJ,OAAKmG,aAAL,GAAqB,UAAUrG,IAAV,EAAgBM,EAAhB,EAAoBD,CAApB,EAAuB;AAC1C,SAAK,IAAIsC,IAAI,CAAb,EAAgBA,IAAI3C,KAAKsG,UAAL,CAAgB1F,MAApC,EAA4C,EAAE+B,CAA9C;AACEtC,QAAEL,KAAKsG,UAAL,CAAgB3D,CAAhB,EAAmB4D,KAArB,EAA4BjG,EAA5B,EAAgC,SAAhC;AADF;AAED,GAHD;;AAKAJ,OAAKsG,UAAL,GAAkBpE,WAAlB;AACAlC,OAAKuG,cAAL,GAAsBvG,KAAKwG,KAAL,GAAaxG,KAAKyG,YAAL,GAAoBtE,MAAvD;AACAnC,OAAK0G,eAAL,GAAuB,UAAU5G,IAAV,EAAgBM,EAAhB,EAAoBD,CAApB,EAAuB;AAC5C,SAAK,IAAIsC,IAAI,CAAb,EAAgBA,IAAI3C,KAAKmG,QAAL,CAAcvF,MAAlC,EAA0C,EAAE+B,CAA5C,EAA+C;AAC7C,UAAIyD,MAAMpG,KAAKmG,QAAL,CAAcxD,CAAd,CAAV;AACA,UAAIyD,GAAJ,EAAS/F,EAAE+F,GAAF,EAAO9F,EAAP,EAAW,YAAX;AACV;AACF,GALD;AAMAJ,OAAK2G,gBAAL,GAAwB,UAAU7G,IAAV,EAAgBM,EAAhB,EAAoBD,CAApB,EAAuB;AAC7C,SAAK,IAAIsC,IAAI,CAAb,EAAgBA,IAAI3C,KAAKsG,UAAL,CAAgB1F,MAApC,EAA4C,EAAE+B,CAA9C;AACEtC,QAAEL,KAAKsG,UAAL,CAAgB3D,CAAhB,CAAF,EAAsBrC,EAAtB;AADF;AAED,GAHD;AAIAJ,OAAK4G,kBAAL,GAA0B5G,KAAK6G,uBAAL,GAA+B7G,KAAKmF,mBAA9D;AACAnF,OAAK8G,kBAAL,GAA0B9G,KAAK+G,eAAL,GAAuB,UAAUjH,IAAV,EAAgBM,EAAhB,EAAoBD,CAApB,EAAuB;AACtE,SAAK,IAAIsC,IAAI,CAAb,EAAgBA,IAAI3C,KAAKkH,WAAL,CAAiBtG,MAArC,EAA6C,EAAE+B,CAA/C;AACEtC,QAAEL,KAAKkH,WAAL,CAAiBvE,CAAjB,CAAF,EAAuBrC,EAAvB,EAA2B,YAA3B;AADF;AAED,GAHD;AAIAJ,OAAKiH,eAAL,GAAuBjH,KAAKkH,gBAAL,GAAwB,UAAUpH,IAAV,EAAgBM,EAAhB,EAAoBD,CAApB,EAAuB;AACpEA,MAAEL,KAAKiE,QAAP,EAAiB3D,EAAjB,EAAqB,YAArB;AACD,GAFD;AAGAJ,OAAKmH,gBAAL,GAAwBnH,KAAKoH,iBAAL,GAAyB,UAAUtH,IAAV,EAAgBM,EAAhB,EAAoBD,CAApB,EAAuB;AACtEA,MAAEL,KAAKiF,IAAP,EAAa3E,EAAb,EAAiB,YAAjB;AACAD,MAAEL,KAAKkF,KAAP,EAAc5E,EAAd,EAAkB,YAAlB;AACD,GAHD;AAIAJ,OAAKqH,oBAAL,GAA4BrH,KAAKsH,iBAAL,GAAyB,UAAUxH,IAAV,EAAgBM,EAAhB,EAAoBD,CAApB,EAAuB;AAC1EA,MAAEL,KAAKiF,IAAP,EAAa3E,EAAb,EAAiB,SAAjB;AACAD,MAAEL,KAAKkF,KAAP,EAAc5E,EAAd,EAAkB,YAAlB;AACD,GAHD;AAIAJ,OAAKuH,qBAAL,GAA6B,UAAUzH,IAAV,EAAgBM,EAAhB,EAAoBD,CAApB,EAAuB;AAClDA,MAAEL,KAAKoB,IAAP,EAAad,EAAb,EAAiB,YAAjB;AACAD,MAAEL,KAAKmD,UAAP,EAAmB7C,EAAnB,EAAuB,YAAvB;AACAD,MAAEL,KAAKoD,SAAP,EAAkB9C,EAAlB,EAAsB,YAAtB;AACD,GAJD;AAKAJ,OAAKwH,aAAL,GAAqBxH,KAAKyH,cAAL,GAAsB,UAAU3H,IAAV,EAAgBM,EAAhB,EAAoBD,CAApB,EAAuB;AAChEA,MAAEL,KAAK4H,MAAP,EAAetH,EAAf,EAAmB,YAAnB;AACA,QAAIN,KAAK6H,SAAT,EAAoB,KAAK,IAAIlF,IAAI,CAAb,EAAgBA,IAAI3C,KAAK6H,SAAL,CAAejH,MAAnC,EAA2C,EAAE+B,CAA7C;AAClBtC,QAAEL,KAAK6H,SAAL,CAAelF,CAAf,CAAF,EAAqBrC,EAArB,EAAyB,YAAzB;AADkB;AAErB,GAJD;AAKAJ,OAAK4H,gBAAL,GAAwB,UAAU9H,IAAV,EAAgBM,EAAhB,EAAoBD,CAApB,EAAuB;AAC7CA,MAAEL,KAAKyD,MAAP,EAAenD,EAAf,EAAmB,YAAnB;AACA,QAAIN,KAAK+H,QAAT,EAAmB1H,EAAEL,KAAKgI,QAAP,EAAiB1H,EAAjB,EAAqB,YAArB;AACpB,GAHD;AAIAJ,OAAK+H,sBAAL,GAA8B/H,KAAKgI,wBAAL,GAAgC,UAAUlI,IAAV,EAAgBM,EAAhB,EAAoBD,CAApB,EAAuB;AACnF,QAAIL,KAAKmI,WAAT,EACE9H,EAAEL,KAAKmI,WAAP,EAAoB7H,EAApB,EAAwBN,KAAKO,IAAL,IAAa,wBAAb,IAAyCP,KAAKmI,WAAL,CAAiB1C,EAA1D,GAA+D,WAA/D,GAA6E,YAArG;AACF,QAAIzF,KAAKoI,MAAT,EAAiB/H,EAAEL,KAAKoI,MAAP,EAAe9H,EAAf,EAAmB,YAAnB;AAClB,GAJD;AAKAJ,OAAKmI,oBAAL,GAA4B,UAAUrI,IAAV,EAAgBM,EAAhB,EAAoBD,CAApB,EAAuB;AACjDA,MAAEL,KAAKoI,MAAP,EAAe9H,EAAf,EAAmB,YAAnB;AACD,GAFD;AAGAJ,OAAKoI,iBAAL,GAAyB,UAAUtI,IAAV,EAAgBM,EAAhB,EAAoBD,CAApB,EAAuB;AAC9C,SAAK,IAAIsC,IAAI,CAAb,EAAgBA,IAAI3C,KAAKuI,UAAL,CAAgB3H,MAApC,EAA4C+B,GAA5C;AACEtC,QAAEL,KAAKuI,UAAL,CAAgB5F,CAAhB,CAAF,EAAsBrC,EAAtB;AADF,KAEAD,EAAEL,KAAKoI,MAAP,EAAe9H,EAAf,EAAmB,YAAnB;AACD,GAJD;AAKAJ,OAAKsI,eAAL,GAAuBtI,KAAKuI,sBAAL,GAA8BvI,KAAKwI,wBAAL,GAAgCxI,KAAKyI,UAAL,GAAkBzI,KAAK0I,OAAL,GAAevG,MAAtH;;AAEAnC,OAAK2I,wBAAL,GAAgC,UAAU7I,IAAV,EAAgBM,EAAhB,EAAoBD,CAApB,EAAuB;AACrDA,MAAEL,KAAK8I,GAAP,EAAYxI,EAAZ,EAAgB,YAAhB;AACAD,MAAEL,KAAK+I,KAAP,EAAczI,EAAd;AACD,GAHD;AAIAJ,OAAK8I,gBAAL,GAAwB9I,KAAK+I,eAAL,GAAuB,UAAUjJ,IAAV,EAAgBM,EAAhB,EAAoBD,CAApB,EAAuB;AAAE,WAAOA,EAAEL,IAAF,EAAQM,EAAR,EAAY,OAAZ,CAAP;AAA8B,GAAtG;AACAJ,OAAKgJ,KAAL,GAAa,UAAUlJ,IAAV,EAAgBM,EAAhB,EAAoBD,CAApB,EAAuB;AAClC,QAAIL,KAAKyF,EAAT,EAAapF,EAAEL,KAAKyF,EAAP,EAAWnF,EAAX,EAAe,SAAf;AACb,QAAIN,KAAKmJ,UAAT,EAAqB9I,EAAEL,KAAKmJ,UAAP,EAAmB7I,EAAnB,EAAuB,YAAvB;AACrB,SAAK,IAAIqC,IAAI,CAAb,EAAgBA,IAAI3C,KAAK4C,IAAL,CAAUA,IAAV,CAAehC,MAAnC,EAA2C+B,GAA3C;AACEtC,QAAEL,KAAK4C,IAAL,CAAUA,IAAV,CAAeD,CAAf,CAAF,EAAqBrC,EAArB;AADF;AAED,GALD;AAMAJ,OAAKkJ,gBAAL,GAAwBlJ,KAAKmJ,QAAL,GAAgB,UAAUrJ,IAAV,EAAgBM,EAAhB,EAAoBD,CAApB,EAAuB;AAC7D,QAAIL,KAAK+H,QAAT,EAAmB1H,EAAEL,KAAKsJ,GAAP,EAAYhJ,EAAZ,EAAgB,YAAhB;AACnBD,MAAEL,KAAKuG,KAAP,EAAcjG,EAAd,EAAkB,YAAlB;AACD,GAHD;;AAKAb,UAAQM,MAAR,GAAiBA,MAAjB;AACAN,UAAQgB,QAAR,GAAmBA,QAAnB;AACAhB,UAAQsB,SAAR,GAAoBA,SAApB;AACAtB,UAAQ6B,UAAR,GAAqBA,UAArB;AACA7B,UAAQiC,cAAR,GAAyBA,cAAzB;AACAjC,UAAQmC,aAAR,GAAwBA,aAAxB;AACAnC,UAAQoC,cAAR,GAAyBA,cAAzB;AACApC,UAAQyB,IAAR,GAAeA,IAAf;AACAzB,UAAQS,IAAR,GAAeA,IAAf;;AAEA8B,SAAOuH,cAAP,CAAsB9J,OAAtB,EAA+B,YAA/B,EAA6C,EAAE8G,OAAO,IAAT,EAA7C;AAED,CAvWA,CAAD","file":"walk.js","sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (factory((global.acorn = global.acorn || {}, global.acorn.walk = global.acorn.walk || {})));\n}(this, function (exports) { 'use strict';\n\n  // AST walker module for Mozilla Parser API compatible trees\n\n  // A simple walk is one where you simply specify callbacks to be\n  // called on specific nodes. The last two arguments are optional. A\n  // simple use would be\n  //\n  //     walk.simple(myTree, {\n  //         Expression: function(node) { ... }\n  //     });\n  //\n  // to do something with all expressions. All Parser API node types\n  // can be used to identify node types, as well as Expression,\n  // Statement, and ScopeBody, which denote categories of nodes.\n  //\n  // The base argument can be used to pass a custom (recursive)\n  // walker, and state can be used to give this walked an initial\n  // state.\n\n  function simple(node, visitors, base, state, override) {\n    if (!base) base = exports.base\n    ;(function c(node, st, override) {\n      var type = override || node.type, found = visitors[type]\n      base[type](node, st, c)\n      if (found) found(node, st)\n    })(node, state, override)\n  }\n\n  // An ancestor walk keeps an array of ancestor nodes (including the\n  // current node) and passes them to the callback as third parameter\n  // (and also as state parameter when no other state is present).\n  function ancestor(node, visitors, base, state) {\n    if (!base) base = exports.base\n    var ancestors = []\n    ;(function c(node, st, override) {\n      var type = override || node.type, found = visitors[type]\n      var isNew = node != ancestors[ancestors.length - 1]\n      if (isNew) ancestors.push(node)\n      base[type](node, st, c)\n      if (found) found(node, st || ancestors, ancestors)\n      if (isNew) ancestors.pop()\n    })(node, state)\n  }\n\n  // A recursive walk is one where your functions override the default\n  // walkers. They can modify and replace the state parameter that's\n  // threaded through the walk, and can opt how and whether to walk\n  // their child nodes (by calling their third argument on these\n  // nodes).\n  function recursive(node, state, funcs, base, override) {\n    var visitor = funcs ? exports.make(funcs, base) : base\n    ;(function c(node, st, override) {\n      visitor[override || node.type](node, st, c)\n    })(node, state, override)\n  }\n\n  function makeTest(test) {\n    if (typeof test == \"string\")\n      return function (type) { return type == test; }\n    else if (!test)\n      return function () { return true; }\n    else\n      return test\n  }\n\n  var Found = function Found(node, state) { this.node = node; this.state = state };\n\n  // Find a node with a given start, end, and type (all are optional,\n  // null can be used as wildcard). Returns a {node, state} object, or\n  // undefined when it doesn't find a matching node.\n  function findNodeAt(node, start, end, test, base, state) {\n    test = makeTest(test)\n    if (!base) base = exports.base\n    try {\n      ;(function c(node, st, override) {\n        var type = override || node.type\n        if ((start == null || node.start <= start) &&\n            (end == null || node.end >= end))\n          base[type](node, st, c)\n        if ((start == null || node.start == start) &&\n            (end == null || node.end == end) &&\n            test(type, node))\n          throw new Found(node, st)\n      })(node, state)\n    } catch (e) {\n      if (e instanceof Found) return e\n      throw e\n    }\n  }\n\n  // Find the innermost node of a given type that contains the given\n  // position. Interface similar to findNodeAt.\n  function findNodeAround(node, pos, test, base, state) {\n    test = makeTest(test)\n    if (!base) base = exports.base\n    try {\n      ;(function c(node, st, override) {\n        var type = override || node.type\n        if (node.start > pos || node.end < pos) return\n        base[type](node, st, c)\n        if (test(type, node)) throw new Found(node, st)\n      })(node, state)\n    } catch (e) {\n      if (e instanceof Found) return e\n      throw e\n    }\n  }\n\n  // Find the outermost matching node after a given position.\n  function findNodeAfter(node, pos, test, base, state) {\n    test = makeTest(test)\n    if (!base) base = exports.base\n    try {\n      ;(function c(node, st, override) {\n        if (node.end < pos) return\n        var type = override || node.type\n        if (node.start >= pos && test(type, node)) throw new Found(node, st)\n        base[type](node, st, c)\n      })(node, state)\n    } catch (e) {\n      if (e instanceof Found) return e\n      throw e\n    }\n  }\n\n  // Find the outermost matching node before a given position.\n  function findNodeBefore(node, pos, test, base, state) {\n    test = makeTest(test)\n    if (!base) base = exports.base\n    var max\n    ;(function c(node, st, override) {\n      if (node.start > pos) return\n      var type = override || node.type\n      if (node.end <= pos && (!max || max.node.end < node.end) && test(type, node))\n        max = new Found(node, st)\n      base[type](node, st, c)\n    })(node, state)\n    return max\n  }\n\n  // Fallback to an Object.create polyfill for older environments.\n  var create = Object.create || function(proto) {\n    function Ctor() {}\n    Ctor.prototype = proto\n    return new Ctor\n  }\n\n  // Used to create a custom walker. Will fill in all missing node\n  // type properties with the defaults.\n  function make(funcs, base) {\n    if (!base) base = exports.base\n    var visitor = create(base)\n    for (var type in funcs) visitor[type] = funcs[type]\n    return visitor\n  }\n\n  function skipThrough(node, st, c) { c(node, st) }\n  function ignore(_node, _st, _c) {}\n\n  // Node walkers.\n\n  var base = {}\n\n  base.Program = base.BlockStatement = function (node, st, c) {\n    for (var i = 0; i < node.body.length; ++i)\n      c(node.body[i], st, \"Statement\")\n  }\n  base.Statement = skipThrough\n  base.EmptyStatement = ignore\n  base.ExpressionStatement = base.ParenthesizedExpression =\n    function (node, st, c) { return c(node.expression, st, \"Expression\"); }\n  base.IfStatement = function (node, st, c) {\n    c(node.test, st, \"Expression\")\n    c(node.consequent, st, \"Statement\")\n    if (node.alternate) c(node.alternate, st, \"Statement\")\n  }\n  base.LabeledStatement = function (node, st, c) { return c(node.body, st, \"Statement\"); }\n  base.BreakStatement = base.ContinueStatement = ignore\n  base.WithStatement = function (node, st, c) {\n    c(node.object, st, \"Expression\")\n    c(node.body, st, \"Statement\")\n  }\n  base.SwitchStatement = function (node, st, c) {\n    c(node.discriminant, st, \"Expression\")\n    for (var i = 0; i < node.cases.length; ++i) {\n      var cs = node.cases[i]\n      if (cs.test) c(cs.test, st, \"Expression\")\n      for (var j = 0; j < cs.consequent.length; ++j)\n        c(cs.consequent[j], st, \"Statement\")\n    }\n  }\n  base.ReturnStatement = base.YieldExpression = function (node, st, c) {\n    if (node.argument) c(node.argument, st, \"Expression\")\n  }\n  base.ThrowStatement = base.SpreadElement =\n    function (node, st, c) { return c(node.argument, st, \"Expression\"); }\n  base.TryStatement = function (node, st, c) {\n    c(node.block, st, \"Statement\")\n    if (node.handler) c(node.handler, st)\n    if (node.finalizer) c(node.finalizer, st, \"Statement\")\n  }\n  base.CatchClause = function (node, st, c) {\n    c(node.param, st, \"Pattern\")\n    c(node.body, st, \"ScopeBody\")\n  }\n  base.WhileStatement = base.DoWhileStatement = function (node, st, c) {\n    c(node.test, st, \"Expression\")\n    c(node.body, st, \"Statement\")\n  }\n  base.ForStatement = function (node, st, c) {\n    if (node.init) c(node.init, st, \"ForInit\")\n    if (node.test) c(node.test, st, \"Expression\")\n    if (node.update) c(node.update, st, \"Expression\")\n    c(node.body, st, \"Statement\")\n  }\n  base.ForInStatement = base.ForOfStatement = function (node, st, c) {\n    c(node.left, st, \"ForInit\")\n    c(node.right, st, \"Expression\")\n    c(node.body, st, \"Statement\")\n  }\n  base.ForInit = function (node, st, c) {\n    if (node.type == \"VariableDeclaration\") c(node, st)\n    else c(node, st, \"Expression\")\n  }\n  base.DebuggerStatement = ignore\n\n  base.FunctionDeclaration = function (node, st, c) { return c(node, st, \"Function\"); }\n  base.VariableDeclaration = function (node, st, c) {\n    for (var i = 0; i < node.declarations.length; ++i)\n      c(node.declarations[i], st)\n  }\n  base.VariableDeclarator = function (node, st, c) {\n    c(node.id, st, \"Pattern\")\n    if (node.init) c(node.init, st, \"Expression\")\n  }\n\n  base.Function = function (node, st, c) {\n    if (node.id) c(node.id, st, \"Pattern\")\n    for (var i = 0; i < node.params.length; i++)\n      c(node.params[i], st, \"Pattern\")\n    c(node.body, st, node.expression ? \"ScopeExpression\" : \"ScopeBody\")\n  }\n  // FIXME drop these node types in next major version\n  // (They are awkward, and in ES6 every block can be a scope.)\n  base.ScopeBody = function (node, st, c) { return c(node, st, \"Statement\"); }\n  base.ScopeExpression = function (node, st, c) { return c(node, st, \"Expression\"); }\n\n  base.Pattern = function (node, st, c) {\n    if (node.type == \"Identifier\")\n      c(node, st, \"VariablePattern\")\n    else if (node.type == \"MemberExpression\")\n      c(node, st, \"MemberPattern\")\n    else\n      c(node, st)\n  }\n  base.VariablePattern = ignore\n  base.MemberPattern = skipThrough\n  base.RestElement = function (node, st, c) { return c(node.argument, st, \"Pattern\"); }\n  base.ArrayPattern =  function (node, st, c) {\n    for (var i = 0; i < node.elements.length; ++i) {\n      var elt = node.elements[i]\n      if (elt) c(elt, st, \"Pattern\")\n    }\n  }\n  base.ObjectPattern = function (node, st, c) {\n    for (var i = 0; i < node.properties.length; ++i)\n      c(node.properties[i].value, st, \"Pattern\")\n  }\n\n  base.Expression = skipThrough\n  base.ThisExpression = base.Super = base.MetaProperty = ignore\n  base.ArrayExpression = function (node, st, c) {\n    for (var i = 0; i < node.elements.length; ++i) {\n      var elt = node.elements[i]\n      if (elt) c(elt, st, \"Expression\")\n    }\n  }\n  base.ObjectExpression = function (node, st, c) {\n    for (var i = 0; i < node.properties.length; ++i)\n      c(node.properties[i], st)\n  }\n  base.FunctionExpression = base.ArrowFunctionExpression = base.FunctionDeclaration\n  base.SequenceExpression = base.TemplateLiteral = function (node, st, c) {\n    for (var i = 0; i < node.expressions.length; ++i)\n      c(node.expressions[i], st, \"Expression\")\n  }\n  base.UnaryExpression = base.UpdateExpression = function (node, st, c) {\n    c(node.argument, st, \"Expression\")\n  }\n  base.BinaryExpression = base.LogicalExpression = function (node, st, c) {\n    c(node.left, st, \"Expression\")\n    c(node.right, st, \"Expression\")\n  }\n  base.AssignmentExpression = base.AssignmentPattern = function (node, st, c) {\n    c(node.left, st, \"Pattern\")\n    c(node.right, st, \"Expression\")\n  }\n  base.ConditionalExpression = function (node, st, c) {\n    c(node.test, st, \"Expression\")\n    c(node.consequent, st, \"Expression\")\n    c(node.alternate, st, \"Expression\")\n  }\n  base.NewExpression = base.CallExpression = function (node, st, c) {\n    c(node.callee, st, \"Expression\")\n    if (node.arguments) for (var i = 0; i < node.arguments.length; ++i)\n      c(node.arguments[i], st, \"Expression\")\n  }\n  base.MemberExpression = function (node, st, c) {\n    c(node.object, st, \"Expression\")\n    if (node.computed) c(node.property, st, \"Expression\")\n  }\n  base.ExportNamedDeclaration = base.ExportDefaultDeclaration = function (node, st, c) {\n    if (node.declaration)\n      c(node.declaration, st, node.type == \"ExportNamedDeclaration\" || node.declaration.id ? \"Statement\" : \"Expression\")\n    if (node.source) c(node.source, st, \"Expression\")\n  }\n  base.ExportAllDeclaration = function (node, st, c) {\n    c(node.source, st, \"Expression\")\n  }\n  base.ImportDeclaration = function (node, st, c) {\n    for (var i = 0; i < node.specifiers.length; i++)\n      c(node.specifiers[i], st)\n    c(node.source, st, \"Expression\")\n  }\n  base.ImportSpecifier = base.ImportDefaultSpecifier = base.ImportNamespaceSpecifier = base.Identifier = base.Literal = ignore\n\n  base.TaggedTemplateExpression = function (node, st, c) {\n    c(node.tag, st, \"Expression\")\n    c(node.quasi, st)\n  }\n  base.ClassDeclaration = base.ClassExpression = function (node, st, c) { return c(node, st, \"Class\"); }\n  base.Class = function (node, st, c) {\n    if (node.id) c(node.id, st, \"Pattern\")\n    if (node.superClass) c(node.superClass, st, \"Expression\")\n    for (var i = 0; i < node.body.body.length; i++)\n      c(node.body.body[i], st)\n  }\n  base.MethodDefinition = base.Property = function (node, st, c) {\n    if (node.computed) c(node.key, st, \"Expression\")\n    c(node.value, st, \"Expression\")\n  }\n\n  exports.simple = simple;\n  exports.ancestor = ancestor;\n  exports.recursive = recursive;\n  exports.findNodeAt = findNodeAt;\n  exports.findNodeAround = findNodeAround;\n  exports.findNodeAfter = findNodeAfter;\n  exports.findNodeBefore = findNodeBefore;\n  exports.make = make;\n  exports.base = base;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n}));"]}