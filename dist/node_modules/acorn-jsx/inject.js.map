{"version":3,"sources":["../../../src/node_modules/acorn-jsx/inject.js"],"names":["XHTMLEntities","require","hexNumber","decimalNumber","module","exports","acorn","tt","tokTypes","tc","tokContexts","j_oTag","TokContext","j_cTag","j_expr","jsxName","TokenType","jsxText","beforeExpr","jsxTagStart","jsxTagEnd","updateContext","context","push","exprAllowed","prevType","out","pop","slash","curContext","pp","Parser","prototype","jsx_readToken","chunkStart","pos","input","length","raise","start","ch","charCodeAt","finishToken","getTokenFromCode","slice","jsx_readEntity","isNewLine","jsx_readNewLine","normalizeCRLF","String","fromCharCode","options","locations","curLine","lineStart","jsx_readString","quote","string","str","count","entity","startPos","substr","test","parseInt","jsx_readWord","isIdentifierChar","getQualifiedJSXName","object","type","name","namespace","property","jsx_parseIdentifier","node","startNode","value","keyword","unexpected","next","finishNode","jsx_parseNamespacedName","startLoc","plugins","jsx","allowNamespaces","eat","colon","startNodeAt","jsx_parseElementName","dot","allowNamespacedObjects","newNode","jsx_parseAttributeValue","braceL","jsx_parseExpressionContainer","expression","parseExprAtom","jsx_parseEmptyExpression","lastTokEnd","lastTokEndLoc","finishNodeAt","braceR","parseExpression","expect","jsx_parseAttribute","ellipsis","argument","parseMaybeAssign","eq","jsx_parseOpeningElementAt","attributes","selfClosing","jsx_parseClosingElementAt","jsx_parseElementAt","children","openingElement","closingElement","contents","relational","jsx_parseElement","instance","opts","extend","inner","refShortHandDefaultPos","parseLiteral","call","code","isIdentifierStart","b_expr","b_tmpl"],"mappings":"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","file":"inject.js","sourcesContent":["'use strict';\n\nvar XHTMLEntities = require('./xhtml');\n\nvar hexNumber = /^[\\da-fA-F]+$/;\nvar decimalNumber = /^\\d+$/;\n\nmodule.exports = function(acorn) {\n  var tt = acorn.tokTypes;\n  var tc = acorn.tokContexts;\n\n  tc.j_oTag = new acorn.TokContext('<tag', false);\n  tc.j_cTag = new acorn.TokContext('</tag', false);\n  tc.j_expr = new acorn.TokContext('<tag>...</tag>', true, true);\n\n  tt.jsxName = new acorn.TokenType('jsxName');\n  tt.jsxText = new acorn.TokenType('jsxText', {beforeExpr: true});\n  tt.jsxTagStart = new acorn.TokenType('jsxTagStart');\n  tt.jsxTagEnd = new acorn.TokenType('jsxTagEnd');\n\n  tt.jsxTagStart.updateContext = function() {\n    this.context.push(tc.j_expr); // treat as beginning of JSX expression\n    this.context.push(tc.j_oTag); // start opening tag context\n    this.exprAllowed = false;\n  };\n  tt.jsxTagEnd.updateContext = function(prevType) {\n    var out = this.context.pop();\n    if (out === tc.j_oTag && prevType === tt.slash || out === tc.j_cTag) {\n      this.context.pop();\n      this.exprAllowed = this.curContext() === tc.j_expr;\n    } else {\n      this.exprAllowed = true;\n    }\n  };\n\n  var pp = acorn.Parser.prototype;\n\n  // Reads inline JSX contents token.\n\n  pp.jsx_readToken = function() {\n    var out = '', chunkStart = this.pos;\n    for (;;) {\n      if (this.pos >= this.input.length)\n        this.raise(this.start, 'Unterminated JSX contents');\n      var ch = this.input.charCodeAt(this.pos);\n\n      switch (ch) {\n      case 60: // '<'\n      case 123: // '{'\n        if (this.pos === this.start) {\n          if (ch === 60 && this.exprAllowed) {\n            ++this.pos;\n            return this.finishToken(tt.jsxTagStart);\n          }\n          return this.getTokenFromCode(ch);\n        }\n        out += this.input.slice(chunkStart, this.pos);\n        return this.finishToken(tt.jsxText, out);\n\n      case 38: // '&'\n        out += this.input.slice(chunkStart, this.pos);\n        out += this.jsx_readEntity();\n        chunkStart = this.pos;\n        break;\n\n      default:\n        if (acorn.isNewLine(ch)) {\n          out += this.input.slice(chunkStart, this.pos);\n          out += this.jsx_readNewLine(true);\n          chunkStart = this.pos;\n        } else {\n          ++this.pos;\n        }\n      }\n    }\n  };\n\n  pp.jsx_readNewLine = function(normalizeCRLF) {\n    var ch = this.input.charCodeAt(this.pos);\n    var out;\n    ++this.pos;\n    if (ch === 13 && this.input.charCodeAt(this.pos) === 10) {\n      ++this.pos;\n      out = normalizeCRLF ? '\\n' : '\\r\\n';\n    } else {\n      out = String.fromCharCode(ch);\n    }\n    if (this.options.locations) {\n      ++this.curLine;\n      this.lineStart = this.pos;\n    }\n\n    return out;\n  };\n\n  pp.jsx_readString = function(quote) {\n    var out = '', chunkStart = ++this.pos;\n    for (;;) {\n      if (this.pos >= this.input.length)\n        this.raise(this.start, 'Unterminated string constant');\n      var ch = this.input.charCodeAt(this.pos);\n      if (ch === quote) break;\n      if (ch === 38) { // '&'\n        out += this.input.slice(chunkStart, this.pos);\n        out += this.jsx_readEntity();\n        chunkStart = this.pos;\n      } else if (acorn.isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.pos);\n        out += this.jsx_readNewLine(false);\n        chunkStart = this.pos;\n      } else {\n        ++this.pos;\n      }\n    }\n    out += this.input.slice(chunkStart, this.pos++);\n    return this.finishToken(tt.string, out);\n  };\n\n  pp.jsx_readEntity = function() {\n    var str = '', count = 0, entity;\n    var ch = this.input[this.pos];\n    if (ch !== '&')\n      this.raise(this.pos, 'Entity must start with an ampersand');\n    var startPos = ++this.pos;\n    while (this.pos < this.input.length && count++ < 10) {\n      ch = this.input[this.pos++];\n      if (ch === ';') {\n        if (str[0] === '#') {\n          if (str[1] === 'x') {\n            str = str.substr(2);\n            if (hexNumber.test(str))\n              entity = String.fromCharCode(parseInt(str, 16));\n          } else {\n            str = str.substr(1);\n            if (decimalNumber.test(str))\n              entity = String.fromCharCode(parseInt(str, 10));\n          }\n        } else {\n          entity = XHTMLEntities[str];\n        }\n        break;\n      }\n      str += ch;\n    }\n    if (!entity) {\n      this.pos = startPos;\n      return '&';\n    }\n    return entity;\n  };\n\n\n  // Read a JSX identifier (valid tag or attribute name).\n  //\n  // Optimized version since JSX identifiers can't contain\n  // escape characters and so can be read as single slice.\n  // Also assumes that first character was already checked\n  // by isIdentifierStart in readToken.\n\n  pp.jsx_readWord = function() {\n    var ch, start = this.pos;\n    do {\n      ch = this.input.charCodeAt(++this.pos);\n    } while (acorn.isIdentifierChar(ch) || ch === 45); // '-'\n    return this.finishToken(tt.jsxName, this.input.slice(start, this.pos));\n  };\n\n  // Transforms JSX element name to string.\n\n  function getQualifiedJSXName(object) {\n    if (object.type === 'JSXIdentifier')\n      return object.name;\n\n    if (object.type === 'JSXNamespacedName')\n      return object.namespace.name + ':' + object.name.name;\n\n    if (object.type === 'JSXMemberExpression')\n      return getQualifiedJSXName(object.object) + '.' +\n      getQualifiedJSXName(object.property);\n  }\n\n  // Parse next token as JSX identifier\n\n  pp.jsx_parseIdentifier = function() {\n    var node = this.startNode();\n    if (this.type === tt.jsxName)\n      node.name = this.value;\n    else if (this.type.keyword)\n      node.name = this.type.keyword;\n    else\n      this.unexpected();\n    this.next();\n    return this.finishNode(node, 'JSXIdentifier');\n  };\n\n  // Parse namespaced identifier.\n\n  pp.jsx_parseNamespacedName = function() {\n    var startPos = this.start, startLoc = this.startLoc;\n    var name = this.jsx_parseIdentifier();\n    if (!this.options.plugins.jsx.allowNamespaces || !this.eat(tt.colon)) return name;\n    var node = this.startNodeAt(startPos, startLoc);\n    node.namespace = name;\n    node.name = this.jsx_parseIdentifier();\n    return this.finishNode(node, 'JSXNamespacedName');\n  };\n\n  // Parses element name in any form - namespaced, member\n  // or single identifier.\n\n  pp.jsx_parseElementName = function() {\n    var startPos = this.start, startLoc = this.startLoc;\n    var node = this.jsx_parseNamespacedName();\n    if (this.type === tt.dot && node.type === 'JSXNamespacedName' && !this.options.plugins.jsx.allowNamespacedObjects) {\n      this.unexpected();\n    }\n    while (this.eat(tt.dot)) {\n      var newNode = this.startNodeAt(startPos, startLoc);\n      newNode.object = node;\n      newNode.property = this.jsx_parseIdentifier();\n      node = this.finishNode(newNode, 'JSXMemberExpression');\n    }\n    return node;\n  };\n\n  // Parses any type of JSX attribute value.\n\n  pp.jsx_parseAttributeValue = function() {\n    switch (this.type) {\n    case tt.braceL:\n      var node = this.jsx_parseExpressionContainer();\n      if (node.expression.type === 'JSXEmptyExpression')\n        this.raise(node.start, 'JSX attributes must only be assigned a non-empty expression');\n      return node;\n\n    case tt.jsxTagStart:\n    case tt.string:\n      return this.parseExprAtom();\n\n    default:\n      this.raise(this.start, 'JSX value should be either an expression or a quoted JSX text');\n    }\n  };\n\n  // JSXEmptyExpression is unique type since it doesn't actually parse anything,\n  // and so it should start at the end of last read token (left brace) and finish\n  // at the beginning of the next one (right brace).\n\n  pp.jsx_parseEmptyExpression = function() {\n    var node = this.startNodeAt(this.lastTokEnd, this.lastTokEndLoc);\n    return this.finishNodeAt(node, 'JSXEmptyExpression', this.start, this.startLoc);\n  };\n\n  // Parses JSX expression enclosed into curly brackets.\n\n\n  pp.jsx_parseExpressionContainer = function() {\n    var node = this.startNode();\n    this.next();\n    node.expression = this.type === tt.braceR\n      ? this.jsx_parseEmptyExpression()\n      : this.parseExpression();\n    this.expect(tt.braceR);\n    return this.finishNode(node, 'JSXExpressionContainer');\n  };\n\n  // Parses following JSX attribute name-value pair.\n\n  pp.jsx_parseAttribute = function() {\n    var node = this.startNode();\n    if (this.eat(tt.braceL)) {\n      this.expect(tt.ellipsis);\n      node.argument = this.parseMaybeAssign();\n      this.expect(tt.braceR);\n      return this.finishNode(node, 'JSXSpreadAttribute');\n    }\n    node.name = this.jsx_parseNamespacedName();\n    node.value = this.eat(tt.eq) ? this.jsx_parseAttributeValue() : null;\n    return this.finishNode(node, 'JSXAttribute');\n  };\n\n  // Parses JSX opening tag starting after '<'.\n\n  pp.jsx_parseOpeningElementAt = function(startPos, startLoc) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.attributes = [];\n    node.name = this.jsx_parseElementName();\n    while (this.type !== tt.slash && this.type !== tt.jsxTagEnd)\n      node.attributes.push(this.jsx_parseAttribute());\n    node.selfClosing = this.eat(tt.slash);\n    this.expect(tt.jsxTagEnd);\n    return this.finishNode(node, 'JSXOpeningElement');\n  };\n\n  // Parses JSX closing tag starting after '</'.\n\n  pp.jsx_parseClosingElementAt = function(startPos, startLoc) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.name = this.jsx_parseElementName();\n    this.expect(tt.jsxTagEnd);\n    return this.finishNode(node, 'JSXClosingElement');\n  };\n\n  // Parses entire JSX element, including it's opening tag\n  // (starting after '<'), attributes, contents and closing tag.\n\n  pp.jsx_parseElementAt = function(startPos, startLoc) {\n    var node = this.startNodeAt(startPos, startLoc);\n    var children = [];\n    var openingElement = this.jsx_parseOpeningElementAt(startPos, startLoc);\n    var closingElement = null;\n\n    if (!openingElement.selfClosing) {\n      contents: for (;;) {\n        switch (this.type) {\n        case tt.jsxTagStart:\n          startPos = this.start; startLoc = this.startLoc;\n          this.next();\n          if (this.eat(tt.slash)) {\n            closingElement = this.jsx_parseClosingElementAt(startPos, startLoc);\n            break contents;\n          }\n          children.push(this.jsx_parseElementAt(startPos, startLoc));\n          break;\n\n        case tt.jsxText:\n          children.push(this.parseExprAtom());\n          break;\n\n        case tt.braceL:\n          children.push(this.jsx_parseExpressionContainer());\n          break;\n\n        default:\n          this.unexpected();\n        }\n      }\n      if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {\n        this.raise(\n          closingElement.start,\n          'Expected corresponding JSX closing tag for <' + getQualifiedJSXName(openingElement.name) + '>');\n      }\n    }\n\n    node.openingElement = openingElement;\n    node.closingElement = closingElement;\n    node.children = children;\n    if (this.type === tt.relational && this.value === \"<\") {\n      this.raise(this.start, \"Adjacent JSX elements must be wrapped in an enclosing tag\");\n    }\n    return this.finishNode(node, 'JSXElement');\n  };\n\n  // Parses entire JSX element from current position.\n\n  pp.jsx_parseElement = function() {\n    var startPos = this.start, startLoc = this.startLoc;\n    this.next();\n    return this.jsx_parseElementAt(startPos, startLoc);\n  };\n\n  acorn.plugins.jsx = function(instance, opts) {\n    if (!opts) {\n      return;\n    }\n\n    if (typeof opts !== 'object') {\n      opts = {};\n    }\n\n    instance.options.plugins.jsx = {\n      allowNamespaces: opts.allowNamespaces !== false,\n      allowNamespacedObjects: !!opts.allowNamespacedObjects\n    };\n\n    instance.extend('parseExprAtom', function(inner) {\n      return function(refShortHandDefaultPos) {\n        if (this.type === tt.jsxText)\n          return this.parseLiteral(this.value);\n        else if (this.type === tt.jsxTagStart)\n          return this.jsx_parseElement();\n        else\n          return inner.call(this, refShortHandDefaultPos);\n      };\n    });\n\n    instance.extend('readToken', function(inner) {\n      return function(code) {\n        var context = this.curContext();\n\n        if (context === tc.j_expr) return this.jsx_readToken();\n\n        if (context === tc.j_oTag || context === tc.j_cTag) {\n          if (acorn.isIdentifierStart(code)) return this.jsx_readWord();\n\n          if (code == 62) {\n            ++this.pos;\n            return this.finishToken(tt.jsxTagEnd);\n          }\n\n          if ((code === 34 || code === 39) && context == tc.j_oTag)\n            return this.jsx_readString(code);\n        }\n\n        if (code === 60 && this.exprAllowed) {\n          ++this.pos;\n          return this.finishToken(tt.jsxTagStart);\n        }\n        return inner.call(this, code);\n      };\n    });\n\n    instance.extend('updateContext', function(inner) {\n      return function(prevType) {\n        if (this.type == tt.braceL) {\n          var curContext = this.curContext();\n          if (curContext == tc.j_oTag) this.context.push(tc.b_expr);\n          else if (curContext == tc.j_expr) this.context.push(tc.b_tmpl);\n          else inner.call(this, prevType);\n          this.exprAllowed = true;\n        } else if (this.type === tt.slash && prevType === tt.jsxTagStart) {\n          this.context.length -= 2; // do not consider JSX expr -> JSX open tag -> ... anymore\n          this.context.push(tc.j_cTag); // reconsider as closing tag context\n          this.exprAllowed = false;\n        } else {\n          return inner.call(this, prevType);\n        }\n      };\n    });\n  };\n\n  return acorn;\n};\n"]}